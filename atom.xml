<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TJ VanToll's Blog]]></title>
  <link href="http://tjvantoll.com/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2015-07-04T15:47:53-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NativeScript Quick Tip: Showing and Hiding Elements]]></title>
    <link href="http://tjvantoll.com/2015/06/05/nativescript-showing-and-hiding-elements/"/>
    <updated>2015-06-05T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2015/06/05/nativescript-showing-and-hiding-elements</id>
    <content type="html"><![CDATA[<p>NativeScript supports the <code>"collapsed"</code> and <code>"visible"</code> states of the CSS <code>visibility</code> property. This means you can hide an element by setting its <code>"visibility"</code> property to <code>"collapsed"</code> in CSS. For example you can use the following CSS to hide all buttons.</p>

<pre class="language-css"><code>button {
    visibility: collapsed;
}</code></pre>


<blockquote><p><strong>Warning</strong>: Currently NativeScript is inconsistent with the CSS spec, as the CSS spec defines <code>visibility: collapse</code>, and NativeScript uses <code>visiblity: collapsed</code>. I have <a href="https://github.com/NativeScript/NativeScript/issues/285">an issue open</a> to resolve this discrepancy.</p></blockquote>

<!-- more -->


<p>Hiding an element in CSS works, but if you need to hide an element you almost certainly need to show it at some point. For this, NativeScript exposes a <code>visibility</code> <em>attribute</em>, which is just a light wrapper around the CSS property. For instance you could also use the following syntax to hide a button:</p>

<pre class="language-markup"><code>&lt;Button text="I'm hidden" visibility="collapsed" /&gt;</code></pre>


<p>This is handy because having an attribute lets you to use <a href="http://docs.nativescript.org/bindings#using-expressions-for-bindings">data-binding expressions</a> to control the value of the attribute, which is the technique I almost always use to control visibility. To give a concrete example, in the code below I use a flag in my data model, <code>"showDetails"</code>, to determine the visibility of a <code>&lt;Label&gt;</code>.</p>

<pre class="language-markup line-numbers"><code>&lt;Page loaded="loaded"&gt;
    &lt;StackLayout&gt;
        &lt;Button text="{{ showDetails ? 'Hide' : 'Show' }}" tap="toggle" /&gt;
        &lt;Label text="Lorem ipsum..." visibility="{{ showDetails ? 'visible' : 'collapsed' }}" /&gt;
    &lt;/StackLayout&gt;
&lt;/Page&gt;</code></pre>




<pre class="language-javascript line-numbers"><code>var observable = require("data/observable");
var pageData = new observable.Observable();

exports.loaded = function(args) {
    pageData.set("showDetails", true);
    args.object.bindingContext = pageData;
}

exports.toggle = function() {
    pageData.set("showDetails", !pageData.get("showDetails"));
}</code></pre>


<p>The key here is the ternary used as part of the <code>&lt;Label&gt;</code>&#8217;s <code>visibility</code> attribute: <code>{{ showDetails ? 'visible' : 'collapsed' }}</code>. When the data model&#8217;s <code>"showDetails"</code> property is true NativeScript shows the label, and when the property is false NativeScript hides the label.</p>

<p>That&#8217;s all there is to it. If you have any other techniques you use to show/hide elements let me know in the comments. If you have suggestions for a cleaner API feel free to <a href="https://github.com/NativeScript/NativeScript/issues/new">suggest it on GitHub</a>, or better yet, <a href="https://www.nativescript.org/contribute">send a PR</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linting JavaScript in NativeScript Apps]]></title>
    <link href="http://tjvantoll.com/2015/05/22/linting-javascript-in-nativescript-apps/"/>
    <updated>2015-05-22T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2015/05/22/linting-javascript-in-nativescript-apps</id>
    <content type="html"><![CDATA[<p>One of the great things about <a href="https://www.nativescript.org/">NativeScript</a> is you can use the JavaScript tools you already know to help build your native iOS and Android apps. In my case I recently added two tools I was already familiar with—<a href="http://jshint.com/">JSHint</a> and <a href="http://jscs.info/">JSCS</a>—to my NativeScript apps to automate <a href="http://en.wikipedia.org/wiki/Lint_%28software%29">linting</a>. In this article I&#8217;ll show you how to do it too.</p>

<!-- more -->


<h2>Setting up Gulp</h2>

<p>There are a number of tools you can use to automate tasks in NativeScript apps—including <a href="http://gulpjs.com/">Gulp</a>, <a href="http://gruntjs.com/">Grunt</a>, and even <a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/">npm</a>—but I&#8217;m a fan of Gulp so that&#8217;s what I&#8217;ll be using in this article. First, if you don&#8217;t have Gulp installed globally you&#8217;ll need to grab it from npm:</p>

<pre class="language-shell"><code>npm install -g gulp</code></pre>


<p>Next, to start using Gulp in your NativeScript projects you need to make sure each project has a <code>package.json</code> file in its root:</p>

<pre class="language-shell"><code>.
├── app
│   └── ...
├── package.json ────────────── here
└── platforms
    └── ...</code></pre>


<p>If your project doesn&#8217;t already have a <code>package.json</code> file, run <a href="https://docs.npmjs.com/cli/init"><code>npm init</code></a> in the project&#8217;s root and npm will help you build one.</p>

<p>After that, install Gulp locally along with its <a href="https://www.npmjs.com/package/gulp-jshint">JSHint</a> and <a href="https://www.npmjs.com/package/gulp-jscs">JSCS</a> packages:</p>

<pre class="language-shell"><code>npm install gulp gulp-jshint gulp-jscs --save-dev</code></pre>


<p>The <code>--save-dev</code> flag tells npm to remember these dependencies in your newly created <code>package.json</code> file. If you open your project&#8217;s <code>package.json</code> you should now see a <code>"devDependencies"</code> key at the bottom that looks something like this:</p>

<pre class="language-javascript"><code>{
  ...
  "devDependencies": {
    "gulp": "^3.8.11",
    "gulp-jscs": "^1.6.0",
    "gulp-jshint": "^1.10.0"
  }
}</code></pre>


<p>With the installation out the way, now it&#8217;s time to write the code that uses these tools.</p>

<h2>Writing the task</h2>

<p>To write a Gulp task that runs JSHint and JSCS you&#8217;ll need to create a <code>gulpfile.js</code> file in your project&#8217;s root:</p>

<pre class="language-shell"><code>.
├── app
│   └── ...
├── gulpfile.js ────────────── here
├── package.json
└── platforms
    └── ...</code></pre>


<p>Paste the following code into your newly created <code>gulpfile.js</code>:</p>

<pre class="language-javascript line-numbers"><code>var gulp = require("gulp");
var jscs = require("gulp-jscs");
var jshint = require("gulp-jshint");

var filesToLint = [
    "app/**/*.js",

    // Exclude node modules from linting
    "!app/node_modules/**/*.js",

    // Exclude NativeScript modules from linting
    "!app/tns_modules/**/*.js"
];

gulp.task("jscs", function() {
    gulp.src(filesToLint)
        .pipe(jscs());
});

gulp.task("jshint", function() {
    return gulp.src(filesToLint)
        .pipe(jshint())
        .pipe(jshint.reporter());
});

gulp.task("lint", ["jshint", "jscs"]);</code></pre>


<p>This code defines three Gulp tasks: <code>jscs</code>, <code>jshint</code>, and <code>lint</code>. As you might expect, <code>gulp jscs</code> runs JSCS, <code>gulp jshint</code> runs JSHint, and <code>gulp lint</code> runs both.</p>

<p>The <code>filesToLint</code> array specifies which files the linters should hit. By default this is set to lint all JavaScript files in the <code>app</code> directory—excluding any npm modules you have in the <code>node_modules</code> folder, and any NativeScript modules in <code>tns_modules</code> folder—but you may wish to customize this depending on how you&#8217;ve structured your app.</p>

<p>With the <code>gulpfile.js</code> file in place the last thing you need to do is add a few configuration files.</p>

<h2>Configuring JSHint and JSCS</h2>

<p>JSHint and JSCS each have comprehensive sets of options for specifying exactly how they should lint your code. To specify these options, head back to the root of your project and create two files: <code>.jshintrc</code> and <code>.jscsrc</code>:</p>

<pre class="language-shell"><code>.
├── app
│   └── ...
├── gulpfile.js
├── package.json
├── platforms
│   └── ...
├── .jshintrc ────────────── here
└── .jscsrc ────────────── here</code></pre>


<p>The contents of these configuration files will depend on your personal coding preferences. I&#8217;ll share my preferences if you&#8217;d like to use them as a starting point, and you can look over <a href="http://jshint.com/docs/options/">JSHint&#8217;s option docs</a> and <a href="http://jscs.info/rules.html">JSCS&#8217;s option docs</a> to configure them to your liking.</p>

<p>Here&#8217;s my <code>.jshintrc</code>:</p>

<pre class="language-javascript"><code>{
  "boss": true,
  "curly": true,
  "esnext": true,
  "eqeqeq": true,
  "eqnull": true,
  "expr": true,
  "immed": true,
  "noarg": true,
  "quotmark": "double",
  "smarttabs": true,
  "trailing": true,
  "unused": true
}</code></pre>


<p>And here&#8217;s my <code>.jscsrc</code>:</p>

<pre class="language-javascript"><code>{
  "disallowMixedSpacesAndTabs": true,
  "disallowMultipleLineBreaks": true,
  "disallowMultipleSpaces": true,
  "disallowMultipleVarDecl": true,
  "disallowNamedUnassignedFunctions": true,
  "disallowNewlineBeforeBlockStatements": true,
  "disallowSpacesInCallExpression": true,
  "disallowSpacesInFunctionDeclaration": {
    "beforeOpeningRoundBrace": true
  },
  "disallowTrailingWhitespace": true,
  "esnext": true,
  "requireCommaBeforeLineBreak": true,
  "requireCurlyBraces": ["if", "else", "for", "while", "try", "catch"],
  "requireSemicolons": true,
  "requireSpaceBetweenArguments": true,
  "requireSpacesInConditionalExpression": true,
  "requireSpacesInForStatement": true,
  "requireSpacesInsideObjectBrackets": "all",
  "validateIndentation": "\t",
  "validateQuoteMarks": "\""
}</code></pre>


<p>After you have these files in place head back to your terminal and run <code>gulp lint</code>. If all went well you should see something like this:</p>

<pre class="language-shell"><code>$ gulp lint
[12:06:49] Using gulpfile /path/to/my-project/gulpfile.js
[12:06:49] Starting 'jshint'...
[12:06:49] Starting 'jscs'...
[12:06:49] Finished 'jscs' after 84 ms
[12:06:49] Finished 'jshint' after 305 ms
[12:06:49] Starting 'lint'...
[12:06:49] Finished 'lint' after 13 μs</code></pre>


<p>If you head back into your app and create a problem, such as changing <code>var</code> to <code>vax</code>, <code>gulp lint</code> should now point out the error:</p>

<pre class="language-shell"><code>$ gulp lint
[12:09:24] Using gulpfile /path/to/my-project/gulpfile.js
[12:09:24] Starting 'jshint'...
[12:09:24] Starting 'jscs'...
[12:09:24] Finished 'jscs' after 70 ms
[12:09:24] Finished 'jshint' after 255 ms
[12:09:24] Starting 'lint'...
[12:09:24] Finished 'lint' after 6.09 μs

events.js:72
        throw er; // Unhandled 'error' event
              ^
Error: Unexpected identifier at my-file.js :
     2 |
     3 |exports.loaded = function(args) {
     4 | vax page = args.object;
--------------^
     5 | page.bindingContext = viewModel;
     6 |};</code></pre>


<h2>Wrapping up</h2>

<p>That&#8217;s it! If you have any other questions about this setup let me know in the comments. If you&#8217;re looking for an example of this setup in a real app, check out JustMeme, which is <a href="https://github.com/NativeScript/sample-JustMeme">available on GitHub</a> as well as the <a href="https://itunes.apple.com/us/app/justmeme/id989340374?mt=8">iOS app store</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NativeScript Quick Tip: Managing iOS Navigation Bars]]></title>
    <link href="http://tjvantoll.com/2015/03/19/nativescript-ios-navigation-bars/"/>
    <updated>2015-03-19T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2015/03/19/nativescript-ios-navigation-bars</id>
    <content type="html"><![CDATA[<p>I&#8217;ve gotten a whole lot of questions about adding navigation bars to NativeScript iOS apps, so I thought I&#8217;d write a quick post about it.</p>

<!-- more -->


<h2>Showing the navigation bar with a title</h2>

<p>Let&#8217;s say you have the following simple NativeScript app:</p>

<pre class="language-markup line-numbers"><code>&lt;!-- main-page.xml --&gt;
&lt;Page loaded="pageLoaded"&gt;&lt;/Page&gt;</code></pre>




<pre class="language-javascript line-numbers"><code>// main-page.js
function pageLoaded(args) {
    var page = args.object;
}</code></pre>


<p>By default this app does not show a navigation bar, because that&#8217;s the default iOS behavior as well. Here&#8217;s how you can alter your JavaScript to show the navigation bar on iOS with a title:</p>

<pre class="language-javascript line-numbers"><code>// main-page.js
var frameModule = require("ui/frame");

exports.pageLoaded = function(args) {
    var page = args.object;

    // Make sure we're on iOS before making iOS-specific changes
    if (page.ios) {

        // Tell the frame module that the navigation bar should always display
        frameModule.topmost().ios.navBarVisibility = "always";

        // Change the UIViewController's title property
        page.ios.title = "My Awesome App";

        // Get access to the native iOS UINavigationController
        var controller = frameModule.topmost().ios.controller;

        // Call the UINavigationController's setNavigationBarHidden method
        controller.navigationBarHidden = false;
    }
};</code></pre>


<p>Here&#8217;s what this looks like:</p>

<p><img src="http://tjvantoll.com/images/posts/2015-03-19/ios-nav-bar.png" class="plain" alt=""></p>

<p>All that you&#8217;re doing here is invoking iOS APIs using the NativeScript runtime. <code>page.ios.title</code> sets the <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/#//apple_ref/occ/instp/UIViewController/title"><code>UIViewController</code>&#8217;s <code>title</code> property</a>; <code>controller.navigationBarHidden</code> calls the <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UINavigationController_Class/#//apple_ref/occ/instm/UINavigationController/setNavigationBarHidden:animated:"><code>UINavigationController</code>&#8217;s <code>setNavigationBarHidden</code> method</a>. That&#8217;s it.</p>

<p>This means that in NativeScript you&#8217;re not limited to what NativeScript provides; if an API exists in iOS or Android you can just call it. Let&#8217;s look at one more example.</p>

<h2>Changing the navigation bar&#8217;s color</h2>

<p>Let&#8217;s say you want to change your navigation bar&#8217;s background color. Here&#8217;s how you make the navigation bar red:</p>

<pre class="language-javascript line-numbers"><code>// main-page.js
var frameModule = require("ui/frame");

exports.pageLoaded = function(args) {
    var page = args.object;

    // Make sure we're on iOS before making iOS-specific changes
    if (page.ios) {

        // Tell the frame module that the navigation bar should always display
        frameModule.topmost().ios.navBarVisibility = "always";

        // Change the UIViewController's title property
        page.ios.title = "My Awesome App";

        // Get access to the native iOS UINavigationController
        var controller = frameModule.topmost().ios.controller;

        // Access the UINavigationBar and change its barTintColorProperty
        controller.navigationBar.barTintColor = UIColor.redColor();

        // Call the UINavigationController's setNavigationBarHidden method
        controller.navigationBarHidden = false;
    }
};</code></pre>


<p>Here&#8217;s what that red navigation bar looks like:</p>

<p><img src="http://tjvantoll.com/images/posts/2015-03-19/ios-red-nav-bar.png" class="plain" alt=""></p>

<p>Again, all that you&#8217;re doing here is invoking iOS APIs with the NativeScript runtime. <code>controller.navigationBar</code> gets a reference to the app&#8217;s <a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UINavigationBar_Class/index.html"><code>UINavigationBar</code></a>, and <code>navigationBar.barTintColor = UIColor.redColor()</code> changes its <a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UINavigationBar_Class/index.html#//apple_ref/occ/instp/UINavigationBar/barTintColor"><code>barTintColor</code></a> property.</p>

<h2>What else can you do?</h2>

<p>Anything iOS allows you to do. Seriously. Obviously when you make these very iOS-specific changes some knowledge of iOS is required, and some knowledge of <a href="http://docs.nativescript.org/runtimes/ios/marshalling/Marshalling-Overview.html">how NativeScript handles marshalling between Objective-C and JavaScript</a> certainly helps, but I still think it&#8217;s cool that you can access these native APIs so easily—in JavaScript even!</p>

<p>The appeal of NativeScript is that over time more and more of these common tasks are going to be abstracted into platform-agnostic modules so that you don&#8217;t have to know the platform-specific details. <a href="https://github.com/nativescript/cross-platform-modules">There are already dozen of modules out there</a>, and new ones are being added with each release.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A reportValidity() Use Case and Polyfill]]></title>
    <link href="http://tjvantoll.com/2015/01/28/reportvalidity/"/>
    <updated>2015-01-28T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2015/01/28/reportvalidity</id>
    <content type="html"><![CDATA[<p>Last week Chrome 40 was released, and while the greater web community <a href="https://twitter.com/addyosmani/status/558051510840356864">was celebrating service workers landing</a>, a little known DOM method made its first appearance in a browser: <code>reportValidity()</code>.</p>

<p>Because I don&#8217;t think many people know what <code>reportValidity()</code> does, I thought I&#8217;d write a quick article about it. Personally I think the best way to explain <code>reportValidity()</code> is with a real-world example, so let&#8217;s start there.</p>

<!-- more -->


<h2><code>reportValidity()</code> use case: a registration form</h2>

<p>Suppose that you&#8217;re building a registration form and you require a username:</p>

<pre class="language-markup line-numbers"><code>&lt;form&gt;
    &lt;label&gt;
        Username:
        &lt;input required&gt;
    &lt;/label&gt;
    ...
    &lt;button&gt;Submit&lt;/button&gt;
&lt;/form&gt;</code></pre>


<p>The username is required so you use a <code>required</code> attribute. But there&#8217;s another common username requirement that you can&#8217;t handle with an HTML attribute: uniqueness. You can&#8217;t have two “bieber_fan_2003”s in your system after all.</p>

<p>So typically you use some sort of server-side check to make sure the user-provided username is available. Straightfoward. But the next part is tricky, and where <code>reportValidity()</code> comes into play. If you determine that the username is not available, how do you display that error to the user using the HTML5 form validation mechanisms?</p>

<p>It <em>seems</em> like this task should be easy, and it is—at least it only requires two lines of code—but it can be unintuitive to say the least. The first thing you need to do is mark the <code>&lt;input&gt;</code> as invalid, which you can do by calling <code>setCustomValidity()</code> on it with the error message you want to use:</p>

<pre class="language-javascript"><code>document.querySelector( "input" )
    .setCustomValidity( "This username is not available" );</code></pre>


<p>This tells the browser that the text in the <code>&lt;input&gt;</code> is invalid (<code>setCustomValidity()</code> considers an empty string valid, and non-empty strings invalid), but it does not <em>report</em> the error to the user—aka the user doesn&#8217;t see any bubbles. That is what <code>reportValidity()</code> does:</p>

<pre class="language-javascript"><code>document.querySelector( "form" ).reportValidity();</code></pre>


<p><code>reportValidity()</code> displays the form&#8217;s first error to the user using the browser&#8217;s native validation bubbles. Here&#8217;s what it looks like:</p>

<p><img src="http://tjvantoll.com/images/posts/2015-01-28/error-message.png" alt=""></p>

<h2>Report errors without <code>reportValidity()</code></h2>

<p>You may be wondering, if this is such a common use case, how did you report errors before <code>reportValidity()</code>? The completely unintuitive way to do that is by&#8230;  wait for it&#8230;. clicking the <code>&lt;form&gt;</code>&#8217;s submit button in JavaScript:</p>

<pre class="language-javascript"><code>document.querySelector( "button" ).submit();</code></pre>


<p>OF COURSE, right? Here&#8217;s a <a href="http://jsfiddle.net/tj_vantoll/fdofmt7o/">live example</a> that proves this technique works, in case you don&#8217;t believe me.</p>

<p>Basically, clicking the submit button mimics an actual user submission, which triggers the HTML form validation algorithm, which reports the first error to the user. The thing is, if you wanted to report errors to the user you&#8217;d never think to use JavaScript to click the submit button, you&#8217;d look for a method named something like, oh I don&#8217;t know, <code>reportValidity()</code>.</p>

<h2>Polyfill</h2>

<p>Because <code>reportValidity()</code> and “clicking” a submit button in JavaScript are essentially equivalent actions, you can write a polyfill that takes advantage of this similarity. The following code does just that. You can include it to gain the ability to use <code>reportValidity()</code> in Firefox and IE 10+ (the first version of IE with an HTML5 form validation implementation):</p>

<pre class="language-javascript line-numbers"><code>if ( !HTMLFormElement.prototype.reportValidity ) {
    HTMLFormElement.prototype.reportValidity = function() {
        var submitButtons = this.querySelectorAll( "button, input[type=submit]" );
        for ( var i = 0; i < submitButtons.length; i++ ) {
            // Filter out &lt;button type="button"&gt;, as querySelectorAll can't
            // handle :not filtering
            if ( submitButtons[ i ].type === "submit" ) {
                submitButtons[ i ].click();
                return;
            }
        }
    }
}</code></pre>


<blockquote><p>This also adds support to Safari, but Safari does not have a native error reporting mechanism (i.e. bubbles), so you have to add your own. I went through some strategies to do so at a talk I gave last year. Here are <a href="http://tjvantoll.com/speaking/slides/Constraint-Validation/Chicago/">the slides</a> and here&#8217;s the <a href="https://www.youtube.com/watch?v=8qvjhMr6UGM&amp;list=PL-0yjdC10QYpmXI3l-PGK1od4kTWOjm_A&amp;index=12">video</a> if you&#8217;re interested.</p></blockquote>

<p>This polyfill relies on all forms having a submit button because having one is a <a href="http://www.smashingmagazine.com/2014/05/21/mobile-accessibility-why-care-what-can-you-do/">best practice</a>, but you could easily alter the script to insert a hidden submit button into the DOM if you really wanted to.</p>

<h2>Who cares?</h2>

<p>Ok, I&#8217;ll admit that a single DOM method being shipped isn&#8217;t life altering, but it&#8217;s a small thing that makes HTML5 form validation a little easier to implement. I&#8217;ve been <a href="http://tjvantoll.com/speaking/slides/Constraint-Validation/Atlanta/">advocating the usage of HTML form validation</a> for a long time now, but <a href="https://www.youtube.com/watch?v=8qvjhMr6UGM&amp;list=PL-0yjdC10QYpmXI3l-PGK1od4kTWOjm_A&amp;index=12">very few people actually use it in production</a>. I&#8217;m hoping that <code>reportValidity()</code> is a sign that browsers vendors care and are willing to put some effort into making HTML5 form validation easier to use.</p>

<p>Firefox <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1088761">has a ticket for <code>reportValidity()</code></a>, but I have no clue if IE has this method on their roadmap. WebKit can&#8217;t consider <code>reportValidity()</code> until they actually have a means of reporting errors—i.e. bubbles. WebKit has a <a href="https://bugs.webkit.org/show_bug.cgi?id=28649">ticket to add bubbles</a>, but it has been inactive since 2010.</p>

<p>Oh, and browser vendors, if you&#8217;re listening, I have two other things on my form validation wish list that still have zero implementations:</p>

<ul>
<li>1) There&#8217;s a new <code>invalid</code> event on <code>&lt;form&gt;</code> elements (see <a href="http://www.w3.org/html/wg/drafts/html/master/forms.html#form-submission-algorithm">step 4 on this form submission algorithm</a>) that makes <a href="http://tjvantoll.com/speaking/slides/Constraint-Validation/Chicago/#/28">aggregating error messages</a> a lot easier.</li>
<li>2) There&#8217;s a <a href="http://dev.w3.org/csswg/selectors-4/#user-pseudos"><code>:user-error</code> pseudo-class</a> in the CSS Selectors 4 spec that&#8217;s <a href="http://tjvantoll.com/speaking/slides/Constraint-Validation/Chicago/#/33">far more useful than <code>:invalid</code></a>.</li>
</ul>


<p>Let&#8217;s make it happen!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed Up Your Cordova App with the WKWebView Plugin]]></title>
    <link href="http://tjvantoll.com/2015/01/26/wkwebview-plugin/"/>
    <updated>2015-01-26T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2015/01/26/wkwebview-plugin</id>
    <content type="html"><![CDATA[<p>I woke up this morning to discover that the Telerik marketplace had a new WKWebView plugin:</p>

<blockquote class="twitter-tweet" lang="en"><p>Instantly speed up your PhoneGap/Cordova app on iOS 8 with the new WKWebView plugin: <a href="http://t.co/hft7Y5GDUJ">http://t.co/hft7Y5GDUJ</a></p>&mdash; Rob Lauer (@rdlauer) <a href="https://twitter.com/rdlauer/status/559713567315075072">January 26, 2015</a></blockquote>


<p>I had written about the <a href="http://developer.telerik.com/featured/why-ios-8s-wkwebview-is-a-big-deal-for-hybrid-development/">performance benefits of WKWebView</a> before, and Eddy Verbruggen—the author of the WKWebView plugin—has done <a href="https://twitter.com/eddyverbruggen/status/531192220498792448">some performance benchmarks</a> as well, so I knew the plugin would give a performance boost, but I had to see the benefits for myself.</p>

<!-- more -->


<p>So I did. I added the plugin to a few Cordova projects with <code>cordova plugin add https://github.com/Telerik-Verified-Plugins/WKWebView</code> and to a few AppBuilder ones with <code>appbuilder plugin add "WKWebView Polyfill" --release</code>.</p>

<blockquote>
    <ul>
        <li>The <code>--release</code> flag is necessary because the WKWebView plugin currently conflicts with AppBuilder&#8217;s LiveSync functionality. LiveSync is only included on debug builds, so the <code>--release</code> flag avoids the conflict. This does mean that you need to perform builds that also include the <code>--release</code> flag to test the WKWebView—e.g. <code>appbuilder build ios --release</code> or <code>appbuilder deploy ios --release</code>.</li>
        <li>AppBuilder apps must run Cordova 3.7 to take advantage of the WKWebView plugin. You can check which version of Cordova your AppBuilder app uses with <code>appbuilder prop print FrameworkVersion</code>, and change it to 3.7 with <code>appbuilder prop set FrameworkVersion 3.7.0</code>.</li>
    </ul>
</blockquote>


<p>Installation is the only step to run the WKWebView plugin, which is pretty awesome. You just build your app with the plugin installed and that&#8217;s it.</p>

<p>I could immediately tell that the performance difference was <em>noticeable</em>. It wasn&#8217;t life altering, but it was there. I decided to make a brief video to show the difference in action, and to convince myself the change I seeing wasn&#8217;t just in my head.</p>

<p>In the video below I run the same app twice, once with the WKWebView plugin installed (on the right), and once with it not (on the left). I made sure this app avoided the network, and I slowed the video down to 50% speed to make it easier to watch.</p>

<iframe width="100%" height="315" src="http://tjvantoll.com//www.youtube.com/embed/4jYAjhYyH74" frameborder="0" allowfullscreen></iframe>


<p>Now, this test isn&#8217;t intended to be conclusive, statistically significant, or anything like that, and your experiences may vary. However, the performance difference shown in the video is consistent with what the statistics have shown, and what I&#8217;ve seen from playing with the plugin today: adding the WKWebView gives your hybrid app a small performance boost, basically for free. How much of a boost your app gets depends on what you&#8217;re doing, with JavaScript-processing-heavy apps getting the most help, but even mundane apps like mine stand to benefit.</p>

<p>There are a few caveats that keep this plugin from being a true drop-in solution—for example third-party Cordova plugins that explicitly reference the UIWebView will be problematic—so you&#8217;ll want to make sure to read through <a href="http://plugins.telerik.com/plugin/wkwebview">the WKWebView plugin&#8217;s documentation</a> before you update your production apps.</p>

<p>That being said, it&#8217;s my opinion that everyone with a Cordova app should try adding the plugin. Assuming you don&#8217;t hit one of the edge cases, installing the plugin gives your apps a free performance boost, so why not?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Kendo UI Core]]></title>
    <link href="http://tjvantoll.com/2015/01/18/getting-started-with-kendo-ui-core/"/>
    <updated>2015-01-18T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2015/01/18/getting-started-with-kendo-ui-core</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using <a href="https://github.com/telerik/kendo-ui-core">Kendo UI Core</a> in a bunch of projects lately, so I thought I&#8217;d document the process I use to get Kendo UI Core up and running. Note that the workflow I show isn&#8217;t the “right” way of doing things, just the workflow I like.</p>

<!-- more -->


<h2>Step 1) Download</h2>

<p>I start by downloading Kendo UI Core from Bower, as it&#8217;s my preferred package manager for web apps:</p>

<pre class="language-shell"><code>$ bower install kendo-ui-core</code></pre>


<p>You can alternatively <a href="https://github.com/telerik/kendo-ui-core/archive/master.zip">download Kendo UI Core from GitHub</a>, but Bower is my jam. (Not to be confused with <a href="http://jamjs.org/">Jam</a>, which—believe it or not—is actually the name of a competing JavaScript package manager. Who knew?)</p>

<h2>Step 2) Scaffold HTML</h2>

<p>Next I create an index.html and paste in the following boilerplate HTML:</p>

<pre class="language-markup line-numbers"><code>&lt;!doctype html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;My Project&lt;/title&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;

    &lt;link rel="stylesheet" href="bower_components/kendo-ui-core/src/styles/web/kendo.common.core.css"&gt;
    &lt;link rel="stylesheet" href="bower_components/kendo-ui-core/src/styles/web/kendo.flat.css"&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;script src="bower_components/jquery/dist/jquery.js"&gt;&lt;/script&gt;
&lt;script src="bower_components/kendo-ui-core/src/js/kendo.ui.core.js"&gt;&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>


<p>A couple things to note here. First, my HTML follows the <a href="http://contribute.jquery.org/style-guide/html/">jQuery HTML style guide</a>, which yes, actually is a thing.</p>

<p>Second, and more relevantly, I use the Kendo UI flat theme. (The import of kendo.flat.min.css file controls which theme the library uses.) Kendo UI has like 15 themes or something, but I&#8217;m a fan of the flat one. If you want to try out different themes all you have to do is switch “flat” in “kendo.flat.css” to the name of another theme. For instance changing “kendo.flat.min.css“ to “kendo.material.min.css” switches your app to Kendo UI&#8217;s new material design inspired theme.</p>

<p><img src="http://tjvantoll.com/images/posts/2015-01-18/kendo-ui-themes.png" alt="">
<i>See how the Flat theme is highlighted? That&#8217;s because it&#8217;s the best one.</i></p>

<p>Finally, note that I&#8217;m including the <em>source</em> files for jQuery and Kendo UI—not the minified ones. I do this because it makes debugging easier, and because I&#8217;m going to tackle minification later.</p>

<p>This markup makes for a decent starting point for demos and quick tests. I even keep this HTML stored as a <a href="http://sublimetext.info/docs/en/extensibility/snippets.html">Sublime snippet</a> for when I need to get a quick test case up and running. And this workflow works great, but for bigger projects I want a little more structure, and a structure that&#8217;s ready to scale for bigger projects. Here&#8217;s how I do that.</p>

<h2>Step 3) Package Management</h2>

<p>I like using AMD and <a href="http://requirejs.org/">RequireJS</a> to manage my app&#8217;s dependencies, and luckily Kendo UI Core is intelligently broken into AMD modules. To start with AMD I download RequireJS from Bower:</p>

<pre class="language-shell"><code>$ bower install requirejs</code></pre>


<p>Next I create an app.js file to serve as the main JavaScript file for my app. At this point my project&#8217;s folder structure looks a little something like this:</p>

<pre class="language-shell"><code>.
├── bower_components
│   ├── jquery
│   │   └── ...
│   ├── kendo-ui-core
│   │   └── ...
│   └── requirejs
│       └── ...
├── index.html
└── js
    └── app.js
</code></pre>


<p>With this structure in place I switch my index.html to use a single <code>&lt;script&gt;</code> tag:</p>

<pre class="language-markup"><code>&lt;script src="bower_components/requirejs/require.js" data-main="js/app"&gt;&lt;/script&gt;</code></pre>


<p>Then I paste the following code in as a starting point for app.js:</p>

<pre class="language-javascript line-numbers"><code>require.config({
    paths: {
        "jquery": "/bower_components/jquery/dist/jquery",
        "kendo-ui-core": "/bower_components/kendo-ui-core/src/js"
    }
});

require([ "jquery", "kendo-ui-core/kendo.ui.core" ], function( $ ) {

});
</code></pre>


<p>This gives me an entry point for my app that loads jQuery and Kendo UI Core dynamically. If my app only needs one portion of Kendo UI Core I only specify the modules I need in the <code>require()</code> call. For instance if I only want a <a href="http://demos.telerik.com/kendo-ui/maskedtextbox/index">MaskedTextBox</a> I only require <code>"jquery"</code> and <code>"kendo-ui-core/kendo.maskedtextbox"</code>—i.e. <code>require([ "jquery", "kendo-ui-core/kendo.maskedtextbox" ])</code>.</p>

<p>Eventually I&#8217;ll add the <a href="http://requirejs.org/docs/optimization.html">RequireJS Optimizer</a> to my app to optimize into a single <code>&lt;script&gt;</code> tag for production, but that won&#8217;t happen until I&#8217;m ready to deploy my project, and I wanted to focus this article on getting started. If you&#8217;re interested in the optimization workflow I use, check out my article on <a href="http://developer.telerik.com/featured/using-ui-libraries-without-the-bloat/">Using UI Libraries Without the Bloat</a>.</p>

<p>For now I hope what I have here was helpful. If you have any other questions about using Kendo UI let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating Google Play and iOS App Store Version Numbers with the AppBuilder CLI]]></title>
    <link href="http://tjvantoll.com/2015/01/09/updating-google-play-and-ios-app-store-version-numbers-with-the-appbuilder-cli/"/>
    <updated>2015-01-09T07:50:00-05:00</updated>
    <id>http://tjvantoll.com/2015/01/09/updating-google-play-and-ios-app-store-version-numbers-with-the-appbuilder-cli</id>
    <content type="html"><![CDATA[<p>I had some issues updating iOS and Android version numbers yesterday so I thought I&#8217;d write up what I learned. Here&#8217;s the scenario: you already have an <a href="http://www.telerik.com/appbuilder">AppBuilder</a> app deployed to the iOS app store and Google Play, and you want to increase the app&#8217;s version number from 1.0 to 1.0.1.</p>

<p>Doing so turns out to be as simple as running two commands:</p>

<pre class="language-shell"><code>$ appbuilder prop set BundleVersion 1.0.1
$ appbuilder prop set AndroidVersionCode 2
</code></pre>




<!-- more -->


<p>The <a href="http://docs.telerik.com/platform/appbuilder/configuring-your-project/project-properties-general#general-project-properties-in-the-appbuilder-command-line-interface"><strong><code>BundleVersion</code></strong></a> is publicly visible version number; it&#8217;s what users see in Google Play and the iOS App Store. Under the hood, <code>BundleVersion</code> changes the <a href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102364"><code>CFBundleVersion</code></a> in your iOS app&#8217;s Info.plist, and <a href="http://developer.android.com/guide/topics/manifest/manifest-element.html#vname"><code>android:versionName</code></a> in your Android app&#8217;s AndroidManifest.xml.</p>

<p>The <a href="http://docs.telerik.com/platform/appbuilder/configuring-your-project/project-properties-for-android-devices#android-project-properties-in-the-appbuilder-command-line-interface"><strong><code>AndroidVersionCode</code></strong></a> corresponds to <a href="http://developer.android.com/guide/topics/manifest/manifest-element.html#vcode"><code>android:versionCode</code></a> in the Android app&#8217;s AndroidManifest.xml, and is an integer value that Google requires you to update with each version of your app. You can increment it by 1, 10, or 10000—as long as it goes up. Google requires this because they let you set your <code>android:versionName</code> to any random string (unlike iOS, whose <code>CFBundleVersion</code> must be a number and has <a href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102364">well defined rules</a>).</p>

<p>Running the <code>appbuilder prop</code> command updates your project&#8217;s .abproject with these changes, so you&#8217;ll want to commit those updates to your source control program of choice.</p>

<h2>What&#8217;s this projectVersion property?</h2>

<p>If you&#8217;re like me and peruse configuration files more than the average person, you may have noticed a <code>projectVersion</code> property in your .abproject. Ignore this property, or at least try to. It&#8217;s a meta property that AppBuilder maintains for its own purposes, and is not intended to be directly edited.</p>

<p>In fact, the entire .abproject is not intended to be directly edited. If you need to change something you see in .abproject do so with the <code>appbuilder prop</code> command. If you don&#8217;t know what the property names mean, or the supported values, run <code>appbuilder prop print --help</code>.</p>

<p>Some property changes do nothing more than update the appropriate value your app&#8217;s .abproject, but some property changes do more. For instance, running <code>appbuilder prop set FrameworkVersion 3.7.0</code> changes the <code>FrameworkVersion</code> in .abproject, but it also upgrades the cordova.*.js scripts within your project to version 3.7.0.</p>

<h2>Wrapping up</h2>

<p>I hope this was helpful. If you have any other questions about this feel free to ask in the comments. Thanks to <a href="https://twitter.com/admatha">Iva Koevska</a> for setting me straight on all of this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So You Want to Write a Tech Book]]></title>
    <link href="http://tjvantoll.com/2014/12/29/so-you-want-to-write-a-tech-book/"/>
    <updated>2014-12-29T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2014/12/29/so-you-want-to-write-a-tech-book</id>
    <content type="html"><![CDATA[<p><img src="http://tjvantoll.com/images/posts/2014-12-29/shelf.jpg" alt="Books on my shelf" style="border: none;"></p>

<p>When I finished <em><a href="http://tjvantoll.com/jquery-ui-in-action.html">jQuery UI in Action</a></em> I decided I wanted to write a retrospective to help other aspiring authors. I wanted to release the retrospective around the same time as the book (*cough* late September), but as it turns out, it&#8217;s super easy to legitimize procrastination after you finish writing a book. Playing through the entire suite of Sonic the Hedgehog Genesis games suddenly seems like a <em>great</em> idea. (It is, by the way.)</p>

<p>But I did finally get around to doing this. What follows is a semi-coherent series of sentences about my experiences writing a tech book. The target reader is someone curious about how tech books are authored—especially masochistic readers that might be interested in writing a book themselves one day.</p>

<!-- more -->


<h2>A timeline</h2>

<p>The most frequent questions I get about the book are related to time, so let&#8217;s start there. Here&#8217;s how <em>jQuery UI in Action</em> went down:</p>

<ul>
<li><strong>April 29th, 2013</strong>: <a href="http://www.manning.com/?a_aid=tj-vantoll">Manning</a> (the publisher) first contacted me</li>
<li><strong>June 26th, 2013</strong>: I signed a contract to write the book</li>
<li><strong>August 1st, 2013</strong>: I started writing chapter 1</li>
<li><strong>March 26th, 2014</strong>: I completed the first draft of the entire book</li>
<li><strong>September 30th, 2014</strong>: <em>jQuery UI in Action</em> was published</li>
</ul>


<p>For those of you counting that&#8217;s <strong>462 days</strong> from contract to publication. To give you some perspective on how long that is, or possibly just to confuse you with a questionably related statistic, that&#8217;s also approximately <a href="http://www.vaughns-1-pagers.com/biology/gestation-periods.htm">the gestational period for a grey rhino</a>. It&#8217;s a long time.</p>

<p>And it definitely seemed long, but after talking to other tech authors this sort of timeline seems to be fairly average. Ilya Grigorik wrote <a href="http://www.amazon.com/High-Performance-Browser-Networking-performance/dp/1449344763/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1419611457&amp;sr=1-1&amp;keywords=high+performance+browser+networking"><em>High Performance Browser Networking</em></a> (which is almost exactly the same length as <em>jQuery UI in Action</em>) in 381 days, which is 81 fewer days than it took me&#8230; but his book has “Performance” in the title, so I&#8217;d say that checks out.</p>

<blockquote><p>That stat is from Ilya&#8217;s <a href="https://www.igvita.com/2013/09/29/retrospective-high-performance-browser-networking/">amazing retrospective of his work on his book</a>. You should read it, especially if you&#8217;re interested in detailed data related to the writing process.</p></blockquote>

<p>Of course, writing time can vary considerably depending on the book&#8217;s length. <em>jQuery UI in Action</em> is twelve chapters long with six appendices. In total the book is <strong>361 pages</strong>, the vast majority of which were written over eight months.</p>

<p>
    <img src="http://tjvantoll.com/images/posts/2014-12-29/last-page.png" alt="The last page of jQuery UI in Action">
    <i>See, it is 361 pages. Manning counts the index pages so I will too; don&#8217;t judge me.</i>
</p>


<h2>Day to day</h2>

<p>With the high-level overview out of the way let&#8217;s get into my day-to-day work. Honestly I wish I had a cool story for how this book was written, but the reality is extremely mundane. It was basically me, my laptop, and an inordinate amount of time in my basement.</p>

<p style="float: right; width: 50%; margin: 1em 0 1em 1em;">
    <img src="http://tjvantoll.com/images/posts/2014-12-29/desk.jpg" alt="The desk in my basement" style="max-height: 400px;">
    <i>This is where the magic happens.</i>
</p>


<p>And by inordinate I mean roughly <strong>two hours a day, seven days a week</strong>. I would occasionally take a day off, and I would occasionally work a few extra hours, but overall I was fairly consistent about working <strong>~14 hours per week</strong> on the book.</p>

<p>Before writing <em>jQuery UI in Action</em> I had this vision of tech authors that exclusively wrote books. But since writing <em>jQuery UI in Action</em> I&#8217;ve had the pleasure of meeting several other authors, and I&#8217;ve learned that almost every tech author has a full time job of some variety. Writing books alone is not enough to pay the bills—not even close. And that&#8217;s not necessarily a bad thing (I&#8217;ll get into that later), but it does mean writing a tech book is almost exclusively done in addition to a full-time job.</p>

<p>Personally I was somewhat fortunate because my job was (and is) remote and extraordinarily flexible. (I work as a developer advocate for Telerik.) Working remote afforded me a little extra time everyday, and I was able to use that time to work on the book periodically, which turned out to be invaluable. What worked best for me was handling logistical things during the day—answering emails, performing edits, responding to reviews, and such—so that I could devote my nights to writing without distractions.</p>

<p>Overall, the main thing I learned is that writing a tech book is time and effort on top of your current work and family commitments. In addition to my day job, my four-year-old twin boys made sure that the overwhelming majority of my writing happened between 9:00 PM and midnight, after the boys went to bed.</p>

<p>In general I would advise anyone debating authoring a tech book to make sure your family is on board first. My significant other was extraordinarily helpful and considerate during the process, but I&#8217;m pretty sure she wanted to murder me by the end. Actually, in hindsight, I&#8217;m more than pretty sure—“I&#8217;m going to murder you if you don&#8217;t finish” might be a direct quote. But for the book&#8217;s sake I had to keep her happy, and not just for the reasons you would expect—she&#8217;s a lot better at CSS than me, and I needed her to make my examples work more than a few times.</p>

<h3>Editing</h3>

<p>From my earlier timeline you may have noticed that there was a roughly five-month gap between the time the first draft of the book was complete and publication. A couple things were going on during that time, but it was mostly editing. I can&#8217;t speak for other publishers, but Manning has a lot of processes that are all about producing the best possible book. Off the top of my head this includes the following:</p>

<ul>
<li>A review of the original book proposal and TOC (table of contents) by a group of potential readers</li>
<li>A review after each chapter by my editor</li>
<li>External reviews by ~8 individuals at three points throughout the book (after chapters 4, 8, and 12 were completed, respectively)</li>
<li>A copy edit pass for grammar and formatting</li>
<li>A dedicated technical review</li>
<li>Two proofreading passes</li>
</ul>


<p>I have mixed feelings about having this much ceremony to publish a book. On the positive side I have never been more proud of anything I&#8217;ve written in my life. I made a number of beneficial changes to the structure and contents of the book based on the external reviews; I was ecstatic that <a href="http://bassistance.de/">Jörn Zaefferer</a> agreed to tech review the book; and I learned a lot from going through the copy editing process.</p>

<p>But that being said these review processes can take an extraordinary amount of time and energy. Time spent tweaking wording for clarity could be spent finishing the book sooner, and the <a href="http://en.wikipedia.org/wiki/Diminishing_returns">law of diminishing returns</a> is at play here. Over time I found that the processes aren&#8217;t bad as long as you focus on trends and avoid nit picking every little sentence. If one person doesn&#8217;t like your sentence don&#8217;t worry about it, but three people are confused by an example it&#8217;s probably worth addressing.</p>

<h2>Tips for writing a book</h2>

<p>I have other tips so I thought I might as well make a section for them. As with my other unsolicited advise, take these tips for what they are: things that worked for me that may or may not work for you.</p>

<h3>Tip #1: Write, write write</h3>

<p>Writing a 300+ page book is absurdly time consuming, so wasting time staring at the screen doesn&#8217;t do you any good. Of course this is easier said than done, and writer&#8217;s block is a real thing, but getting a first draft done as fast as possible is incredibly important. A first draft can be reviewed for high-level problems, for structure, and for continuity with the rest of the book. There&#8217;s no point taking an hour to write a perfect introductory paragraph if it&#8217;s going to have to change later. (Remember those five months of editing I just talked about. You&#8217;ll have time to get things as perfect as you&#8217;d like.)</p>

<p>My advice is to try to make your writing a stream of consciousness as much as possible. Write like you&#8217;re explaining something to your friend sitting right next to you. You may end up writing some nonsense, but you might surprise yourself by just how coherent and conversational your stream of consciousness is.</p>

<h3>Tip #2: Drink</h3>

<p>This tip isn&#8217;t for everyone, but for some a drink or two can help put your mind at ease and help get words onto paper. (Figuratively of course, if you&#8217;re literally writing random words on physical paper that&#8217;s a sign that you&#8217;ve had too many.) Personally I found that the occasional beer could help my creative processes substantially.</p>

<p>There&#8217;s actually some science to back this up. Studies are now increasingly showing that <a href="http://blog.pickcrew.com/coffee-vs-beer-effects-on-creativity/">alcohol tends to produce better ideas, and that coffee can give you a burst of energy to complete tasks</a>. The phrase “beer for the idea and coffee for the execution” is actually a thing. Ernest Hemingway may have said it best:</p>

<blockquote><p>Write drunk; edit sober.</p></blockquote>

<p>Note: There&#8217;s a <a href="http://en.wikiquote.org/wiki/Talk:Ernest_Hemingway">good chance Hemingway didn&#8217;t <em>actually</em> say this</a>, but it sound <em>way</em> cooler to attribute the quote to Hemingway, so let&#8217;s assume that he did.</p>

<h3>Tip #3: Don&#8217;t worry about grammar or formatting</h3>

<p>The theme of the previous tips was to help produce a first draft as fast as possible, and this is a continuation of that message. Simply put, while writing a first draft, don&#8217;t worry about your grammar. You can sort out the “it&#8217;s” versus “its”, “affect” versus “effect”, and other such issues later.</p>

<p>Along the same lines, don&#8217;t worry about formatting, indentation, style guides, structure, fonts, code clarity, or any of that stuff. Just write. You can clean all of that up during editing (with coffee of course).</p>

<h3>Tip #4: Sleep on it</h3>

<p>The stresses and timelines associated with writing a book can make you feel like you need to write every day no matter what. But writer&#8217;s block is a real thing, and some days it&#8217;s impossible to write words no matter how hard you try. Worse, nights that you spend hours accomplishing nothing are extremely detrimental to your morale. You wake up the next day tired and more stressed from the time you just lost.</p>

<p>Over time I started giving up on days where I knew nothing would happen and went to sleep. I did this not only for the obvious benefit of being more rested the next day, but because I also found sleeping to help with the my creative processes. I can think of several occasions that I had no idea how to approach a certain topic, but I woke up with a couple of good ideas.</p>

<h3>Tip #5: Don&#8217;t do it for the money</h3>

<p>I have made some money off of <em>jQuery UI in Action</em>, but from an $/hour perspective, I would&#8217;ve been far better doing freelance work, or possibly working at the local McDonald&#8217;s. I think it&#8217;s fairly common knowledge that tech authors don&#8217;t make a whole lot of money, so I&#8217;m guessing that doesn&#8217;t surprise you, but I&#8217;m actually going to make a somewhat different point.</p>

<p>Even if tech books paid exorbitant royalties I still think it would be a bad idea to write just for the money. In my opinion you should have some personal reason for wanting to write, for putting yourself through the excruciating process that is producing a tech book. If you don&#8217;t have something pushing you to continue writing you&#8217;re likely going to 1) give up, 2) regret the experience, or 3) both.</p>

<p>That being said there are several good non-financial reasons to write a book: career advancement, notoriety, industry status, and the satisfaction associated with teaching others are a few that come to mind. I&#8217;ll share my personal motivation to give you a better idea of what I mean.</p>

<h2>Why I wrote a book</h2>

<p>My primary reason for writing <em>jQuery UI in Action</em> was to get what I know about jQuery UI down on paper. I would use the term memoir, but I&#8217;m not dying, and I&#8217;m still working with jQuery UI, so it doesn&#8217;t fit. But you get the idea.</p>

<p style="float: right; width: 300px; margin: 0 0 1em 1em;">
    <img src="http://tjvantoll.com/images/posts/2014-12-29/usage-stats.png" alt="jQuery UI usage statisics" style="max-height: 400px;">
    <br>
    <i>jQuery UI&#8217;s usage statistics as of December 2014—~15% of the top million sites!</i>
</p>


<p>jQuery UI is no longer hip; it&#8217;s no longer sexy; but it&#8217;s an incredibly robust, extensible, well documented, and accessible library that is used in an astounding number of applications—including a number of mine. I&#8217;ve been involved with jQuery and jQuery UI in some fashion for about six years now. I&#8217;ve went from an overenthusiastic user, to a community member, to a contributor, to a team member, to someone that has been fortunate enough to get to know the people behind code. It&#8217;s a project that I&#8217;m proud to say I&#8217;m associated with.</p>

<p>jQuery UI has a lot of good 101-level material scattered throughout the web, but nothing that I felt did the library justice. I also felt that I was in a unique position—as a team member and tech writer—to make the guide I wanted to exist a reality.</p>

<p>My desire to share this information is what gave me the motivation to keep going. If I set out to write a 101-level book on jQuery UI I would&#8217;ve lost the desire to write by week three.</p>

<p>To me motivation was everything. There were <em>many</em> nights that I had no desire to write but had to find a way to write a few pages. People frequently ask me if I&#8217;ll write another book, and my answer is that I need a topic compelling enough to spend a year of my life on—something that I want to write about bad enough to put myself through the process again.</p>

<p>I&#8217;m sure there is a dollar amount that would give me enough motivation, and who knows, after <em>jQuery UI in Action</em> becomes the next <em>Fifty Shades of Grey</em> maybe I&#8217;ll take all of this back.</p>

<h2>Unexpected perks to writing a book</h2>

<p>There are some other non-financial benefits to writing a book that I hadn&#8217;t really thought much of. First of all, getting a book in the mail with your name on it in the mail is a pretty amazing experience.</p>

<p style="float: right; width: 300px; margin: 0 0 1em 1em;">
    <img src="http://tjvantoll.com/images/posts/2014-12-29/print-book.jpg" alt="jQuery UI in Action—the physical book" style="max-height: 400px;">
    <br>
    <i>I can&#8217;t lie, holding a copy of your own book is pretty damn cool.</i>
</p>


<p>An even cooler, and somewhat surreal moment happened when <a href="https://twitter.com/tjvantoll/status/521996479314296832">Amazon sent me an email that recommended my own book to me</a>. It was also cool when I <a href="https://twitter.com/tjvantoll/status/536549375670231040">randomly discovered that <em>jQuery UI in Action</em> had four 5-star reviews on its Amazon page</a></p>

<p>But the biggest unexpected perk for me was learning to be a better writer. Manning has a lot of really smart editors—people that produce books for a living. Over the last year and a half I&#8217;ve learned about the best way to structure content, how to teach through writing effectively, how to attract a potential reader&#8217;s interest, and ways to hold a reader&#8217;s attention.</p>

<p>I&#8217;ve learned a lot about grammar that I&#8217;m pretty sure they didn&#8217;t teach me in high school. I now know what en and em dashes are and how to use them. I know that you can use <code>Option</code> + <code>Shift</code> + <code>-</code> to type an em dash on a Mac. I know what an Oxford comma is and why I don&#8217;t like people that omit them. I have a stance on open grammar style issues, like whether to capitalize complete sentences after a colon and whether to place spaces around em dashes (nope on both, by the way).</p>

<p>I&#8217;m certainly not a grammar expert, and I definitely don&#8217;t feel like a professional writer, but I&#8217;m far more knowledgeable than I was when I started, and that&#8217;s kind of cool. Even if you&#8217;re a coder, writing effectively is still an incredibly valuable skill—even if you&#8217;re just using it to argue for tabs over spaces in a GitHub comment.</p>

<h2>Wrapping Up</h2>

<p>I&#8217;m not sure I have a concise or coherent way of summing all of this up. I warned you there would be rambling and hopefully I didn&#8217;t disappoint. If for some reason you enjoyed this you may enjoy <a href="http://tjvantoll.com/jquery-ui-in-action.html">reading <em>jQuery UI in Action</em></a>. If you <em>have</em> read and enjoyed <em>jQuery UI in Action</em>, I&#8217;d love a <a href="http://www.amazon.com/jQuery-UI-Action-T-VanToll/dp/1617291935/">review on Amazon</a>. It&#8217;s amazing how much seeing a positive review can put a smile on my face. Having gone through the process myself I&#8217;m making a concerted effort to leave positive reviews on books I&#8217;ve enjoyed reading—tech books and otherwise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problem With Using HTML Imports For Dependency Management]]></title>
    <link href="http://tjvantoll.com/2014/08/12/the-problem-with-using-html-imports-for-dependency-management/"/>
    <updated>2014-08-12T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2014/08/12/the-problem-with-using-html-imports-for-dependency-management</id>
    <content type="html"><![CDATA[<p>HTML imports are cool. If you haven&#8217;t heard of them before, you should read <a href="http://www.html5rocks.com/en/tutorials/webcomponents/imports/">Eric Bidelman&#8217;s excellent introduction to them</a>, but they&#8217;re pretty self explanatory with a bit of code. For example the following is how a jQuery UI dialog works in <a href="https://github.com/tjvantoll/ui-web-components">my proof-of-concept web components port</a>:</p>

<pre class="language-markup"><code>&lt;link rel="import" href="ui-dialog.html"&gt;

&lt;ui-dialog title="Hello World"&gt;&lt;/ui-dialog&gt;
</code></pre>


<p>The cool thing here is not what you see—a <code>&lt;link&gt;</code> tag that imports a custom element—but rather, what you don&#8217;t. Normally when using jQuery UI widgets, you have to worry about a number of JavaScript and CSS dependencies, such as jQuery Core, the widget factory, a CSS theme, and more. With HTML imports you don&#8217;t, as the import takes care of bundling everything you need.</p>

<!--more-->


<h3>OMG Awesome! What&#8217;s the problem?</h3>

<p>HTML imports transfer the dependency management burden from component consumers to component authors. This sounds good, until you think about <em>how</em> to reconcile those dependencies.</p>

<p>Suppose you want to write a component that depends on jQuery. How might you do that? Well, the easiest way is to package jquery.js within your web component, and to reference it in your HTML import with a simple <code>&lt;script&gt;</code> tag:</p>

<pre class="language-markup"><code>&lt;script src="jquery.js"&gt;&lt;/script&gt;
</code></pre>


<p>This works, and is simple, but it has a serious repercussion: jquery.js is bundled with your component. That means, with this approach, if a user imports five jQuery-dependent components, the browser will download jQuery five times. And because reducing HTTP requests is a vital web performance optimization, this is <a href="https://www.youtube.com/watch?v=H8OxKx6zKkQ">kind of a big deal</a>.</p>

<h3>What about de-duping?</h3>

<p>De-duping, besides being an awesome word to say, is a mechanism built into HTML imports to prevent multiple requests for the same resource. That is, if multiple imports reference the same URL, the browser is smart enough to only retrieve the resource once.</p>

<p>The problem is the de-duping mechanism only works on <em>exact</em> URL matches. Different domains, different protocols, different versions, and so forth are each enough to subvert the de-duping process.</p>

<p>The crux of the issue is that dependencies in HTML imports aren&#8217;t strings like &#8220;jquery&#8221; and &#8220;bootstrap&#8221;, they&#8217;re URLs like &#8220;http://code.jquery.com/jquery-2.1.1.min.js&#8221; and &#8220;http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js&#8221;—and there&#8217;s no way of knowing what the consumer of the component expects.</p>

<p>What&#8217;s an HTML import with external dependencies to do? <a href="http://www.polymer-project.org/resources/faq.html#loadlibs">Polymer&#8217;s documentation</a> gives the following recommendation in its FAQ:</p>

<blockquote><p>&#8220;If multiple libraries want to share a dependency, they will have to agree on a system. Feature detection, or an agreed upon common location for a ‘jquery.html’ file in a CDN, etc.&#8221;</p></blockquote>

<p>Getting libraries to agree on <em>anything</em> in the web world has been painfully difficult, but it&#8217;s definitely worth a discussion. Let&#8217;s look at each of these options in detail.</p>

<h3>Options for managing external dependencies</h3>

<p>To discuss our options, let&#8217;s suppose that you want to build a hypothetical <code>&lt;formatted-time&gt;</code> custom element as an HTML import, and you want to use <a href="http://momentjs.com/">Moment.js</a> as part of your implementation.</p>

<p>Assuming that you don&#8217;t package Moment.js as part of your component, and we&#8217;ve already seen why that&#8217;s a bad idea, here are your options:</p>

<h4>Option 1: Use a CDN</h4>

<p>You could refer to Moment.js on some CDN, for instance the following <code>&lt;script&gt;</code> tag imports Moment.js from <a href="http://cdnjs.com/">cdnjs</a>:</p>

<pre class="language-markup"><code>&lt;script src="http://tjvantoll.com//cdnjs.cloudflare.com/ajax/libs/moment.js/2.7.0/moment.min.js"&gt;&lt;/script&gt;
</code></pre>


<p>This approach works, but it has some major disadvantages. For one, the CDN approach only prevents multiple downloads of Moment.js if everyone magically chooses to retrieve Moment.js from the exact same URL—same CDN provider, same protocol, same version, and so forth. Second, the CDN reference also prevents the usage of script concatenation tooling, which is an essential performance optimization, especially for mobile. Because of this, I don&#8217;t see CDNs as a viable option for managing external dependencies.</p>

<h4>Option 2: Enforce a folder structure</h4>

<p>The next option you have is enforcing a specific directory structure on the consumer of your component. For instance, you could enforce that users have a folder structure that looks like this:</p>

<pre class="language-shell"><code>.
├── momentjs
│   └── moment.js
└── formatted-time
    └── formatted-time.html
</code></pre>


<p>With this structure in place, your formatted-time.html file can reference moment.js using <code>&lt;link rel="import" href="../momentjs/moment.js"&gt;</code>. This is the strategy Polymer itself uses, as all Polymer core elements include an import of <code>&lt;link rel="import" href="../polymer/polymer.html"&gt;</code> to get the dependencies they need.</p>

<p>This approach works well if your users manage their dependencies through a package manager such as Bower, as the package manager provides a defined structure you can rely on. But the reality is only a small fraction of the web uses Bower, and the developers that do often have build scripts in place to move files to locations that their servers and development environments require.</p>

<p>Enforcing a directory structure for dependencies can theoretically work, but it requires the community to agree on and standardize a directory structure to use, which is a tall task.</p>

<p>Worse, even agreeing on a directory structure isn&#8217;t enough, as the exact file paths must match to prevent multiple downloads. If component A references <code>"../momentjs/moment.js"</code>, and component B references <code>"../momentjs/min/moment.min.js"</code>, the browser sees two different resources that need to be individually downloaded.</p>

<h4>Option 3: Feature detection</h4>

<p>The next option is feature detection, or determining whether your dependency has already been loaded, and if not, loading it yourself. For example, with the <code>&lt;formatted-time&gt;</code> element you could use the following code to load conditionally load Moment.js:</p>

<pre class="language-markup line-numbers"><code>&lt;script&gt;
    (function() {
        var script;
        if ( typeof window.moment === "undefined" ) {
            script = document.createElement( "script" );
            script.src = "path/to/formatted-time/moment.js";
            document.body.appendChild( script );
        }
    }());
&lt;/script&gt;</code></pre>


<blockquote><p><strong>Update August 13th, 2014</strong>—As is, this code is not enough to prevent loading Moment.js multiple times, as two modules could request the script before it has been asynchronously fetched and parsed. To avoid multiple requests correctly you&#8217;d need to <a href="#comment-1540666406">additionally add some boolean logic</a>. Thanks <a href="https://twitter.com/webreflection">@webreflection</a>!</p></blockquote>

<p>This approach avoids the problem of loading Moment.js multiple times, but there&#8217;s still a major problem: the path to use for moment.js. Because you need to do a feature check, and because <code>document.write</code>s are not permitted in HTML import files, you must load feature-checked dependencies asynchronously. And when you do that, the path of the dependency is not relative to the current HTML import file; it&#8217;s relevant to the root of the application—and there&#8217;s no way of knowing what that is in a distributable component. You could use a CDN path, but that&#8217;s subject to the problems discussed in <strong>Option 1</strong>.</p>

<p>Doing a feature check also prevents the usage of HTML import build tools such as <a href="https://github.com/Polymer/vulcanize">Vulcanize</a>, which inlines all HTML import dependencies into a single file—a vital performance optimization for anyone using HTML imports in a production setting. In theory build tools like Vulcanize could help manage these dependencies in the future, but at the moment such a mechanism does not exist.</p>

<h4>Option 4: Don&#8217;t use HTML imports for external dependencies</h4>

<p>The final option you have is to avoid using HTML imports to manage external dependencies. For the <code>&lt;formatted-time&gt;</code> example, this means not referencing moment.js in your component at all; you just assume that it&#8217;s there and note that it&#8217;s a requirement in your documentation—exactly like you do today.</p>

<p>Of course, this subverts the main purpose of building an HTML import—building a self-contained module—but at the moment I don&#8217;t see a better option.</p>

<h3>Where to go from here?</h3>

<p>I don&#8217;t have the solution, but I think we need to be having this discussion if we want to see high quality HTML imports that don&#8217;t have negative performance consequences. I&#8217;d love to hear your thoughts on this in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a PhoneGap App in 10 Seconds Using Nothing But a CLI]]></title>
    <link href="http://tjvantoll.com/2014/07/25/building-a-phonegap-app-in-10-seconds-using-nothing-but-a-cli/"/>
    <updated>2014-07-25T10:17:00-04:00</updated>
    <id>http://tjvantoll.com/2014/07/25/building-a-phonegap-app-in-10-seconds-using-nothing-but-a-cli</id>
    <content type="html"><![CDATA[<p>You may have seen Burke Holland&#8217;s <a href="https://medium.com/@burkeholland/building-and-deploying-a-phonegap-app-in-36-seconds-6552399c12a8">&#8220;Building A PhoneGap App in 36 Seconds Using Nothing But a Browser&#8221;</a> article on Medium this morning. Although most people probably viewed the post as an interesting—and surprisingly fast—way of building an app, I saw the article as a direct challenge.</p>

<p>You see, although I work with AppBuilder in the browser from time to time, I prefer the AppBuilder CLI. And with the CLI, I can put Burke&#8217;s 36 second time to shame. Below I build a PhoneGap app, performing the same steps Burke did, in TEN seconds:</p>

<p><img src="http://tjvantoll.com/images/posts/2014-07-25/10-seconds.gif" alt="10 seconds to build an app"></p>

<!--more-->


<h3>Full Disclosure</h3>

<ul>
<li>This was done using the <a href="https://github.com/Icenium/icenium-cli">Telerik AppBuilder CLI</a>.</li>
<li>I did <strong>NOT</strong> speed up the screen capture.</li>
<li>I <strong>DID</strong> practice this a few times.</li>
<li>I <strong>DID</strong> have to lookup the syntax for the <code>sed</code> command, because it makes no sense.</li>
<li>I <strong>DID</strong> use the <a href="http://www.telerik.com/appbuilder/companion-app">AppBuilder Companion app</a>, which I had pre-installed on my iPhone.</li>
<li>I <strong>DID</strong> rely on the Bash history for speed, which I deem fair, because that&#8217;s a thing CLIs do.</li>
</ul>


<p>With the AppBuilder CLI installed (<code>npm install -g appbuilder</code>), and with the <a href="https://itunes.apple.com/us/app/telerik-appbuilder/id527547398?mt=8">AppBuilder iOS app</a> installed, you can run this yourself with the following four commands:</p>

<pre class="language-shell"><code>$ appbuilder create hybrid gif --template=Blank
$ cd gif
$ sed -i '' 's/Apache Cordova/gif/g' index.html
$ appbuilder livesync ios --companion
</code></pre>


<p>What&#8217;s really cool is that as of <a href="http://blogs.telerik.com/appbuilder/posts/14-07-02/telerik-appbuilder-release-sharing-projects-cordova-update-nativescript-preview-and-more">the last AppBuilder release</a>, you can now share your code across the AppBuilder clients. That means, I can collborate on Burke&#8217;s project from the CLI, and he can collaborate on mine from the browser—which I think is pretty cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Addendum to Why Web Components Aren't Ready for Production Yet]]></title>
    <link href="http://tjvantoll.com/2014/07/18/an-addendum-to-why-web-components-arent-ready-for-production-yet/"/>
    <updated>2014-07-18T14:14:00-04:00</updated>
    <id>http://tjvantoll.com/2014/07/18/an-addendum-to-why-web-components-arent-ready-for-production-yet</id>
    <content type="html"><![CDATA[<p>Yesterday I <a href="http://developer.telerik.com/featured/web-components-arent-ready-production-yet/">published an article on the Telerik Developer Network</a> about the state of web components. In it I argued that web components are not ready for the majority of web developers to use in production.</p>

<p>I was overwhelmed by the amount of feeback—positive and negative—that I received after the article went live. In my opinion this is one of the great things about writing on the web. Opinionated posts tend to attract feedback from smart people with vested interests in the technology being discussed. Although putting yourself out there for criticism is hard, it&#8217;s also a spectacular way to learn. Here I want to summarize what I learned from writing about web components, and take a minute to respond to some of the criticism I received.</p>

<!--more-->


<h3>The Title</h3>

<blockquote class="twitter-tweet" lang="en"><p>Why Web Components Aren’t Ready for Production… Yet <a href="http://t.co/0liPap0bWx">http://t.co/0liPap0bWx</a> sensible research, dangerous title. STOP! More at <a href="https://twitter.com/forwardJS">@forwardJS</a></p>&mdash; Christian Heilmann (@codepo8) <a href="https://twitter.com/codepo8/statuses/489781679272509440">July 17, 2014</a></blockquote>


<p>Several people said that my title was far too generic and link baity. This is somewhat fair, but I think the article gives the necessary context to explain why I chose a generic title. From the article&#8230;</p>

<blockquote><p>&#8220;All of Polymer’s elements, and most (all?) of the elements listed on http://customelements.io/ and http://component.kitchen/ depend on Polymer, which depends on the platform in its entirety.&#8221;</p></blockquote>

<p>Put yourselves in the shoes of a developer debating whether to use web components in your app. The first thing you&#8217;re going to want to do is see an existing component, and the overwhelming majority of published components are Polymer based. Even if you don&#8217;t end up using Polymer, if you use just one Polymer-based element, you are subject to the performance penalties I outline in my article.</p>

<p>Although the conclusion of the article is that web components aren&#8217;t ready for production, that isn&#8217;t necessarily because the technology behind them isn&#8217;t ready. A large part of the problem is that there isn&#8217;t enough documentation available to developers. What are the performance repercussions of each of the various web components polyfills? How do you build performant web components? This is research that needs to be done before the average developer can take web components seriously.</p>

<h3>Not all web components solutions are created equally</h3>

<p>Several people called me out for grouping all web components solutions together. Although I acknowledged that there are alternative libraries out there, I didn&#8217;t do a very good job differentiating them from Polymer in terms of performance.</p>

<blockquote data-conversation="none" class="twitter-tweet" lang="en"><p><a href="https://twitter.com/tjvantoll">@tjvantoll</a> <a href="https://twitter.com/codepo8">@codepo8</a> <a href="https://twitter.com/slightlylate">@slightlylate</a> <a href="https://twitter.com/WebReflection">@WebReflection</a> X-Tag used only Custom Elements since day 1, judging them as one is *extremely* misleading.</p>&mdash; Daniel (@csuwildcat) <a href="https://twitter.com/csuwildcat/statuses/489790523201187842">July 17, 2014</a></blockquote>


<p>I knew that X-Tag used a subset of web components polyfills, and I mention that in the article, but I didn&#8217;t realize they <em>only</em> use custom elements. This is exactly the sort of thing I&#8217;d love to see more information on. Why did X-Tag choose to only go with custom elements? Performance? File size?</p>

<p>I also discovered several other projects that are web components based. <a href="http://bosonic.github.io/index.html">Bosonic</a> takes a transpilation approach, and converts HTML-based web component files into JS and CSS code that works back to IE9. This is another project I&#8217;d love to hear more information about, especially their design choices.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-07-18/bosonic.png"></p>

<p>I was also pointed at an <a href="http://webreflection.blogspot.co.uk/2014/07/a-w3c-custom-elements-alternative.html">alternative custom elements polyfill from Andrea Giammarchi</a>. The polyfill is less than 2K minified and gzipped, and supports an impressive range of browsers. This is another project worth experimenting with.</p>

<h3>My tone</h3>

<p>The last thing I want to discuss is my tone in the article, as that was called out by a few people.</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/tjvantoll">@tjvantoll</a> <a href="https://twitter.com/csuwildcat">@csuwildcat</a> <a href="https://twitter.com/codepo8">@codepo8</a> <a href="https://twitter.com/WebReflection">@WebReflection</a> : OK, fine, but downer pieces like yours that don&#39;t do that work don&#39;t contribute to that.</p>&mdash; Alex Russell (@slightlylate) <a href="https://twitter.com/slightlylate/statuses/489793567007571969">July 17, 2014</a></blockquote>




<blockquote class="twitter-tweet" lang="en"><p>Why Web Components aren&#39;t ready for production yet - <a href="https://twitter.com/tjvantoll">@tjvantoll</a> - <a href="http://t.co/4EEQIHtmWe">http://t.co/4EEQIHtmWe</a> Valid points, bit too negatively brought imho</p>&mdash; Leon de Rijke (@leonderijke) <a href="https://twitter.com/leonderijke/statuses/489856563327537152">July 17, 2014</a></blockquote>


<p>I want to make it <em>very clear</em> that I am not trying to be a web component naysayer. I am excited about web components, and the article presents my honest feedback from someone that wants to move forward with them in major libraries, but ran into roadblocks. In my opinion, putting this feedback in the open starts conversations that we need to have to start seriously considering web components.</p>

<p>Per the feedback I received, and based on my own experience, the sanest place for developers to start is with custom elements, as it has a relatively sane polyfill. Or as <a href="https://twitter.com/csuwildcat">@csuwildcat</a> puts it&#8230;</p>

<blockquote data-conversation="none" class="twitter-tweet" lang="en"><p><a href="https://twitter.com/tjvantoll">@tjvantoll</a> <a href="https://twitter.com/WebReflection">@WebReflection</a> <a href="https://twitter.com/slightlylate">@slightlylate</a> <a href="https://twitter.com/codepo8">@codepo8</a> shout this: deploy UI as custom elements today, &amp; when Shadow DOM is native, hide the guts.</p>&mdash; Daniel (@csuwildcat) <a href="https://twitter.com/csuwildcat/statuses/489800753997828097">July 17, 2014</a></blockquote>


<p>Consider it shouted. This is certainly something we need more people to experiment with, myself included.</p>

<h3>Thanks</h3>

<p>Finally I want to thank everyone that contributed feedback in some fashion. Writing on the internet is a great way to learn from others, and that&#8217;s certainly true in this case. With that in mind I want to encourage people that have used web components to share their experiences—especially those that have attempted to use them in production. Let&#8217;s make this happen.</p>

<script async src="http://tjvantoll.com//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A jQuery UI Vertical Tabs Extension]]></title>
    <link href="http://tjvantoll.com/2014/07/04/a-jquery-ui-vertical-tabs-extension/"/>
    <updated>2014-07-04T10:13:00-04:00</updated>
    <id>http://tjvantoll.com/2014/07/04/a-jquery-ui-vertical-tabs-extension</id>
    <content type="html"><![CDATA[<p>The single coolest thing in jQuery UI is the <a href="http://learn.jquery.com/jquery-ui/widget-factory/extending-widgets/">extension mechanism</a> built into the <a href="http://api.jqueryui.com/jquery.widget/">widget factory</a>. In my <a href="http://tjvantoll.com/jquery-ui-in-action.html">upcoming book</a> on jQuery UI I devote an entire chapter to building extensions, and now that the book is <em>mostly</em> done, I want to publish some of the extensions I built for the world to use.</p>

<p>The first of these is an extension to display a <a href="http://jqueryui.com/tabs/">jQuery UI tabs widget</a> vertically. The extension is simple: it adds a single <code>orientation</code> option that you can set to <code>"horizontal"</code> or <code>"vertical"</code>. Here it is in action:</p>

<div class="code_example"><h6>jQuery UI Vertical Tabs Extension<a href="http://tjvantoll.com/demos/2014-07-04/index.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 325px;" frameborder="0" src="http://tjvantoll.com/demos/2014-07-04/index.html"></iframe></div>


<p>The extension <a href="https://github.com/tjvantoll/jquery-ui-vertical-tabs#amd-usage">supports AMD usage</a>, including <a href="http://learn.jquery.com/jquery-ui/environments/amd/">the new AMD modules introduced in jQuery UI 1.11</a>. If you&#8217;re a Bower user, you can install the extension with <code>bower install jquery-ui-vertical-tabs</code>.</p>

<p>Please <a href="https://github.com/tjvantoll/jquery-ui-vertical-tabs">check out the extension on GitHub</a>. Try it; report issues; and star it if you like it. The extension is released under the MIT license, so it use it in any project you&#8217;d like. I&#8217;ll have more of these coming in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Semantic HTML to Drive Display Logic]]></title>
    <link href="http://tjvantoll.com/2014/05/01/using-semantic-html-to-drive-display-logic/"/>
    <updated>2014-05-01T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2014/05/01/using-semantic-html-to-drive-display-logic</id>
    <content type="html"><![CDATA[<p>Today I want to share a quick tip for driving display logic in UI components—and I think it&#8217;s easier to see in an example.</p>

<p>Suppose you are tasked with implementing a form that can be used by two types of users: admins and regular users. Admins should be able to delete, and regular users should see an informational message. The display of this form is shown below:</p>

<p><img src="http://tjvantoll.com/images/posts/2014-05-01/user-types.png" alt="Display of the admin and regular user modes of a form"></p>

<p><em>Note: You can view the final example of this code at <a href="http://jsfiddle.net/tj_vantoll/77TbG/">http://jsfiddle.net/tj_vantoll/77TbG/</a> if you&#8217;d like to follow along.</em></p>

<!--more-->


<p>Here&#8217;s the HTML we&#8217;ll use:</p>

<pre class="language-markup line-numbers"><code>&lt;form id="information-form"&gt;
    &lt;fieldset&gt;
        &lt;legend&gt;Information&lt;/legend&gt;
        &lt;div&gt;
            &lt;label for="name"&gt;Name:&lt;/label&gt;
            &lt;input id="name"&gt;
        &lt;/div&gt;
        &lt;div&gt;
            &lt;label for="address"&gt;Address:&lt;/label&gt;
            &lt;input id="address"&gt;
        &lt;/div&gt;

        &lt;button&gt;Update&lt;/button&gt;
        &lt;button id="delete"&gt;Delete&lt;/button&gt;

        &lt;p id="admin-message"&gt;To delete this user, please contact an administrator.&lt;/p&gt;
    &lt;/fieldset&gt;
&lt;/form&gt;</code></pre>


<p>And we&#8217;ll use two buttons to switch between the two user types.</p>

<pre class="language-markup line-numbers"><code>&lt;button id="admin"&gt;Display as admin&lt;/button&gt;
&lt;button id="regular-user"&gt;Display as regular user&lt;/button&gt;</code></pre>


<p>So, the question is&#8230; what JavaScript do you implement to show/hide the delete button and informational message? The following shows an approach I often see: targeting individual elements in JavaScript, and altering their display.</p>

<pre class="language-javascript line-numbers"><code>var adminButton = document.querySelector( "#admin" ),
    regularButton = document.querySelector( "#regular-user" ),
    deleteButton = document.querySelector( "#delete" ),
    adminMessage = document.querySelector( "#admin-message" );

adminButton.addEventListener( "click", function() {
    deleteButton.style.display = "inline-block";
    adminMessage.style.display = "none";
});
regularButton.addEventListener( "click", function() {
    deleteButton.style.display = "none";
    adminMessage.style.display = "block";
});</code></pre>


<p>This works, but it&#8217;s verbose, as you have to target each element that should be shown or hidden whenever the user types changes. From a more abstract perspective, it also breaks the <a href="http://en.wikipedia.org/wiki/Separation_of_concerns">separation of concerns design principle</a>, since CSS changes are being done in JavaScript.</p>

<p>To improve this, let&#8217;s switch the JavaScript to manage a single CSS class name on the form.</p>

<pre class="language-javascript line-numbers"><code>var adminButton = document.querySelector( "#admin" ),
    regularButton = document.querySelector( "#regular-user" ),
    form = document.querySelector( "#information-form" );

adminButton.addEventListener( "click", function() {
    form.classList.add( "admin" );
});
regularButton.addEventListener( "click", function() {
    form.classList.remove( "admin" );
});</code></pre>


<p>At the moment, nothing shows or hides when you click buttons, but with the <code>"admin"</code> class name in place, you have the hook you need to implement the logic in CSS.</p>

<pre class="language-css line-numbers"><code>#delete {
    display: none;
}
.admin #admin-message {
    display: none;
}
.admin #delete {
    display: inline-block;
}</code></pre>


<p>JavaScript manages the state of the element, which gives CSS the ability to control the display based on that state. This approach is not only cleaner, it is also more flexible. If you need to change colors for admin, or spacing, you now have a CSS hook you can use to do so.</p>

<p>This same approach works with HTML attributes as well. For instance, let&#8217;s switch from using a CSS class name, to a <code>data-admin</code> attribute on the <code>&lt;form&gt;</code>. With that approach you use the following JavaScript:</p>

<pre class="language-javascript line-numbers"><code>var adminButton = document.querySelector( "#admin" ),
    regularButton = document.querySelector( "#regular-user" ),
    form = document.querySelector( "#information-form" );

adminButton.addEventListener( "click", function() {
    form.setAttribute( "data-admin", true );
});
regularButton.addEventListener( "click", function() {
    form.setAttribute( "data-admin", false );
});</code></pre>


<p>And the following CSS:</p>

<pre class="language-css line-numbers"><code>#delete {
    display: none;
}
[data-admin="true"] #admin-message {
    display: none;
}
[data-admin="true"] #delete {
    display: inline-block;
}</code></pre>


<p>Use whatever makes sense for your use case. The overarching idea is to use JavaScript to apply semantic HTML that reflects an element&#8217;s state, and to let CSS control the display from there. Personally I&#8217;ve found this to be the best way to handle display logic in UI components—especially complex ones.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effect of iOS 7.1's minimal-ui Viewport Property]]></title>
    <link href="http://tjvantoll.com/2014/03/11/effect-of-ios-7-dot-1s-minimal-ui-meta-tag/"/>
    <updated>2014-03-11T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2014/03/11/effect-of-ios-7-dot-1s-minimal-ui-meta-tag</id>
    <content type="html"><![CDATA[<p>One of the major, and <a href="http://www.mobilexweb.com/blog/safari-ios7-html5-problems-apis-review">not well-received</a> changes introduced in iOS7 was the lack of a true full screen mode. Apple&#8217;s answer was the introduction of a <code>minimal-ui</code> viewport property in iOS 7.1, which was released yesterday.</p>

<p>I wanted to quickly show the effect this property has. Adding it is as easy as appending <code>minimal-ui</code> to the <code>content</code> attribute of your site&#8217;s <code>&lt;meta&gt;</code> tag.</p>

<pre class="language-markup"><code>&lt;meta name="viewport" content="width=device-width, initial-scale=1, minimal-ui"&gt;
</code></pre>


<p>The two images below show a before and after of applying the property to a test page.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-03-11/before.png" alt="Without minimal-ui property status bars display" />
<img src="http://tjvantoll.com/images/posts/2014-03-11/after.png" alt="With minimal-ui status bars do not show" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting AppBuilder Projects to Facebook]]></title>
    <link href="http://tjvantoll.com/2014/02/06/connecting-appbuilder-projects-to-facebook/"/>
    <updated>2014-02-06T13:08:00-05:00</updated>
    <id>http://tjvantoll.com/2014/02/06/connecting-appbuilder-projects-to-facebook</id>
    <content type="html"><![CDATA[<p>One commonly requested, and non-trivial requirement PhoneGap/Cordova apps often have is Facebook integration. To perform the actual integration, hybrid Cordova apps have an advantage over traditional web apps: they can leverage the platform&#8217;s native Facebook APIs.</p>

<p>The bridge between the JavaScript APIs and the native APIs takes the form of a Cordova plugin, named - crazily enough - the <a href="https://github.com/phonegap/phonegap-facebook-plugin">Cordova Facebook Plugin</a>. In this article we&#8217;ll give a step-by-step guide to integrating this plugin into an <a href="http://www.telerik.com/appbuilder">AppBuilder</a> application; then we&#8217;ll see what we can do with it.</p>

<p><em>Note: If you want to cut straight to the chase, the final example with the integration complete is available at <a href="https://github.com/tjvantoll/Facebook-Connect">https://github.com/tjvantoll/Facebook-Connect</a>. You can <a href="http://blogs.telerik.com/appbuilder/posts/13-12-19/git-started-with-github-in-mist">clone this project directly in AppBuilder</a>.</em></p>

<!--more-->


<h3>Adding the Plugin</h3>

<p>The first step to adding the plugin is to download it from <a href="https://github.com/phonegap/phonegap-facebook-plugin">https://github.com/phonegap/phonegap-facebook-plugin</a> - just click the <em>Download ZIP</em> button.</p>

<p>Then, with your project open in AppBuilder, select the <code>Plugins</code> directory, and select <em>Add</em> &#8211;> <em>From Archive</em> from the menu bar.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-02-06/step-1.png" alt="Location of the From Archive menu" /></p>

<p>Select the ZIP file we just downloaded and click <em>Upload</em>.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-02-06/step-2.png" alt="Add from archive dialog with newly download zip selected" /></p>

<p>Now add the following two <code>&lt;script&gt;</code> tags to your project&#8217;s <code>index.html</code> file:</p>

<pre class="language-markup"><code>&lt;script src="cdv-plugin-fb-connect.js">&lt;/script&gt;
&lt;script src="facebook-js-sdk.js"&gt;&lt;/script&gt;
</code></pre>


<p>The plugin is now a part of your project, but before we dig into the its APIs, we have a bit of configuration we have to change.</p>

<h3>Configuring the Plugin</h3>

<p>In order for the Cordova plugin to speak to the native Facebook APIs, it has to know the id and name of <em>your</em> Facebook application. To get this, head over to <a href="https://developers.facebook.com/">https://developers.facebook.com/</a> and login to your app&#8217;s dashboard settings. (If you don&#8217;t have an app built in Facebook, you&#8217;ll need to create one.) Here&#8217;s what my app looks like:</p>

<p><img src="http://tjvantoll.com/images/posts/2014-02-06/facebook-dashboard.png" alt="The dashboard of my Facebook application" /></p>

<p>The two things we&#8217;re interested in are the <strong>App ID</strong> and the <strong>Display Name</strong>. Take note of these and head back to AppBuilder, as we need to add these configuration variables to the plugin&#8217;s <code>plugin.xml</code> file. Start by opening up <code>plugin.xml</code> and removing the two <code>&lt;preference&gt;</code> tags shown below.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-02-06/step-3.png" alt="Visualization of earlier described steps" /></p>

<p>In Cordova plugins, <code>plugin.xml</code> files&#8217; <code>&lt;preference&gt;</code> tags are placeholders; they&#8217;re a way of indicating that you need to change these strings elsewhere in the file. In the case of this plugin, you&#8217;ll find <code>APP_ID</code> and <code>APP_NAME</code> used a few times as shown in the image below. You&#8217;ll need to update the placeholder values with your app&#8217;s actual data.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-02-06/step-4.png" alt="Visualization of earlier described steps" /></p>

<p>And that&#8217;s it! We now have Facebook integrated into our app, including the ability to use the full <a href="https://developers.facebook.com/docs/javascript/">Facebook JavaScript SDK</a>. So what can we do with it?</p>

<h3>Using the Facebook JavaScript SDK</h3>

<p>Facebook&#8217;s APIs are provided through a <code>FB</code> global variable, and the first thing you must do with it is call <code>FB.init()</code>.</p>

<pre class="language-javascript"><code>FB.init({
    appId: "204075246457176",
    nativeInterface: CDV.FB
});
</code></pre>


<p>You can see that we again need to provide our Facebook&#8217;s app id. We also need to set a <code>nativeInterface</code> property to <code>CDV.FB</code>. You won&#8217;t find this property on Facebook&#8217;s documentation, but it&#8217;s what tells the Cordova plugin to step in and do its thing.</p>

<p>From here, there are several things we can do, but most of them require the user to be logged into Facebook. We can check whether the user is logged in using <code>FB.getLoginStatus()</code>.</p>

<pre class="language-javascript"><code>FB.getLoginStatus(function( response ) {
    if ( response.status === "connected" ) {
        alert( "logged in" );
    } else {
        alert( "not logged in" );
    }
});
</code></pre>


<p>Or we can just prompt the user to login with <code>FB.login()</code>. Like most of Facebook&#8217;s API methods, the first argument to <code>FB.login()</code> is a callback function to run when the login completes. The second argument is an object with a single <code>scope</code> property. The <code>scope</code> property needs to contain a comma delimited list of permissions your application needs. Here, we&#8217;re asking the user to give us access to their email address.</p>

<pre class="language-javascript"><code>FB.login(function( response ) {
    // Handle the response
}, { scope: "email" });
</code></pre>


<p><em>Note: Refer to Facebook&#8217;s SDK documentation for a <a href="https://developers.facebook.com/docs/reference/login/extended-permissions">full list of the permissions you can request</a>.</em></p>

<p>When you call <code>FB.login()</code>, if the user is <em>not</em> logged in, they&#8217;ll see a Facebook login form in a popup.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-02-06/nexus-7-no-login.png" alt="Facebook login on Nexus 7" /></p>

<p>If they are logged in, they&#8217;ll have to confirm that they want to give your application access to the information you requested.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-02-06/nexus-7-login.png" alt="Facebook login on Nexus 7" /></p>

<p>Once they have given access, you can use Facebook&#8217;s API to access what you need. For example the following retrieves the id, name, and picture of the user&#8217;s friends.</p>

<pre class="language-javascript"><code>FB.api( "/me/friends", { fields: "id, name, picture" });
</code></pre>


<h3>Wrapping up</h3>

<p>To show this API in action, I built an AppBuilder app that logs the user in, and displays their friends in a <a href="http://demos.telerik.com/kendo-ui/mobile/listview/index.html">Kendo UI Mobile ListView</a>. The app is available at <a href="https://github.com/tjvantoll/Facebook-Connect">https://github.com/tjvantoll/Facebook-Connect</a>.</p>

<p>If you try this out, please let me know if everything works alright for you in the comments below. If there are any additional integrations or examples you&#8217;d like to see, let me know that as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Only the gzip Size Matters]]></title>
    <link href="http://tjvantoll.com/2014/01/27/only-the-gzip-size-matters/"/>
    <updated>2014-01-27T19:32:00-05:00</updated>
    <id>http://tjvantoll.com/2014/01/27/only-the-gzip-size-matters</id>
    <content type="html"><![CDATA[<p>Let&#8217;s just get it out there: the only size that matters for a CSS or JavaScript file is its gzipped size.</p>

<p>And by gzipped size I mean: the size of the file after it&#8217;s compressed using <a href="http://en.wikipedia.org/wiki/Gzip">gzip</a>&#8217;s compression algorithm. All browsers since IE6 have supported gzipped assets, and enabling gzip on web servers has been a <a href="https://developers.google.com/speed/docs/best-practices/payload#GzipCompression">best practice</a> for years now; therefore it&#8217;s relatively safe to assume that everyone who cares about the size of CSS or JavaScript files is gzipping them.</p>

<p>So if you&#8217;re trying to find how big a front-end library is, the answer you need is not in Finder or Windows Explorer. While the uncompressed file size can give you a rough idea, you have no idea what the user will actually download until you gzip the files.</p>

<!--more-->


<h3>Running gzip</h3>

<p>If you&#8217;re on OS X or Linux, you can run the <code>gzip</code> command on any file to compress it. For example the following shows the before and after of compressing jQuery 2.1.0.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery.png" alt="Running gzip on jQuery from the command line"></p>

<p>There are two things to note here:</p>

<ol>
<li><code>gzip</code> made quite the difference in file size - 82K down to 29K.</li>
<li><code>gzip</code> replaces the original file; <code>jquery.js</code> is now <code>jquery.js.gz</code>.</li>
</ol>


<p>Because replacing the original file is a bit annoying, you can make <code>gzip</code> generate a new file with a <a href="http://unix.stackexchange.com/questions/46786/how-to-tell-gzip-to-keep-original-file#answer-58814">little shell magic</a>, shown below.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery-new-file.png" alt="Running gzip on jQuery from the command line and generating a new file"></p>

<div class="warning">Commenter yalue <a href="http://tjvantoll.com/2014/01/27/only-the-gzip-size-matters/#comment-1278948548">pointed out</a> that the <code>gzip</code> command has a <code>--keep</code> option that preserves the original file. So you can run <code>gzip jquery.js --keep</code> instead of <code>gzip < jquery.js > jquery.js.gz</code>.</div>


<h3>Why It Matters</h3>

<p>There is no set percentage that <code>gzip</code> will reduce the size of a JavaScript or CSS file by. There is no way to know for sure other than running <code>gzip</code>.</p>

<p>To show this, let&#8217;s look at the <a href="https://twitter.com/nelsonic/status/426724640090640384">specific situation</a> that made me feel the need to write this.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/twitter.png" alt="View of Twitter discussion of the size of the jQuery Mobile library"></p>

<p>414K! Yikes! But remember, this is the file size that is shown in Finder, not the size that the user is actually going to download from a server with gzip enabled.</p>

<p>To see what the user will actually download, we have to run <code>gzip</code>. Below we run <code>gzip</code> on each of jQuery Mobile&#8217;s files.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery-mobile.png" alt="Running gzip on jQuery Mobile files"></p>

<p>As you can see, <code>gzip</code> reduced our two files down to a combined 88K. Quite the difference! Take note of one more thing: the drastic difference running <code>gzip</code> made on <code>jquery.mobile.css</code> - 216K to 25K. A savings of 88.5%!</p>

<p>Why was the compression so successful here?</p>

<p><a href="http://blog.jquerymobile.com/2013/12/23/jquery-mobile-1-4-0-released/">jQuery Mobile 1.4</a> made a big change to the way they handle images - namely, they now embed images directly within their css file to avoid separate HTTP requests. Because of this change, <a href="http://code.jquery.com/mobile/1.4.0/jquery.mobile-1.4.0.min.css">their CSS file</a> is packed full of <a href="https://developer.mozilla.org/en-US/docs/data_URIs">data URIs</a>.</p>

<p>How does this relate to <code>gzip</code>?</p>

<p>At a high level, the compression algorithm that runs under the hoods of <code>gzip</code> finds repeated strings and replaces them with symbols. Because of this, the files that compress best are the ones with a lot of repeated strings - such as a file with a bunch of data URIs.</p>

<p>Just look at all the repeated strings in jQuery Mobile&#8217;s CSS. <code>gzip</code> is practically salivating.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery-mobile-source.png" alt="View of jQuery mobile 1.4's CSS source"></p>

<p><em>Note: If you concatenate your files <code>gzip</code> gets better. Bigger files = more repeated strings to substitute.</em></p>

<h3>Wrapping Up</h3>

<p>Anyways, the point is: if you&#8217;re assessing the size of a library, framework, or whatever - run <code>gzip</code> on it first. Since it&#8217;s what the user actually downloads, it&#8217;s the only size that matters for front-end assets.</p>

<p>Because size is paramount in jQuery core, they actually make <a href="http://bugs.jquery.com/ticket/12229">changes</a> to improve how well the library is optimized by <code>gzip</code>&#8217;s compression algorithm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speaking Tip: Use the iPad's Clock App as a Timer]]></title>
    <link href="http://tjvantoll.com/2014/01/23/speaking-tip-use-the-ipad-clock-app-as-a-timer/"/>
    <updated>2014-01-23T09:42:00-05:00</updated>
    <id>http://tjvantoll.com/2014/01/23/speaking-tip-use-the-ipad-clock-app-as-a-timer</id>
    <content type="html"><![CDATA[<p>I <a href="http://tjvantoll.com/speaking/">have been speaking</a> for some time now, and I&#8217;ve learned that keeping track of time is hard. And it&#8217;s important; no one likes attending the talk that goes ten minutes over, or the talk that awkwardly ends half way through.</p>

<p>Most presentation software - PowerPoint, Keynote, etc - shows the elapsed time, but I find that the display isn&#8217;t obvious enough. For example, here&#8217;s the presenter mode in PowerPoint:</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-23/powerpoint.png" alt="View of PowerPoint's presenter mode"></p>

<p>When I&#8217;m already nervous I don&#8217;t want to pick out the time from an already busy screen. I want to use as little brain processing as possible.</p>

<p>Furthermore, I usually present with custom, HTML-based slide decks, or do demos with no slides at all; therefore I usually don&#8217;t have <em>any</em> timer available. Some conferences provide some timing help, but it&#8217;s definitely not something you can rely on.</p>

<p>This was a problem for me for a while. I rushed to finish my first big conference talk - just to discover I had finished 15 minutes early. After some experimenting I finally found something that has worked for me, so I thought I&#8217;d share it.</p>

<!--more-->


<h3>iPad</h3>

<p>I bring my iPad to my talks and use iOS&#8217;s Clock app, set to the Stopwatch tab.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-23/clock.png" alt="View of iOS's clock app"></p>

<p>This helps me out for a few reasons:</p>

<ul>
<li>The iPad is big, so the time is easy to see.</li>
<li>Since the cover of the iPad is a stand, I can prop it somewhere near where I&#8217;m speaking.</li>
</ul>


<p>You can also use the Timer tab, but for some reason I&#8217;ve found that counting up (rather than counting down) is easier for my brain to process. If you go this route, there are two important thing to remember:</p>

<ul>
<li>Make sure the iPad is charged.</li>
<li>Set the iPad to never sleep; specifically set Settings &#8211;> General &#8211;> Auto-Lock to &#8220;Never&#8221;. This screen is shown below. This keeps your screen from turning off a few minutes into your talk.</li>
</ul>


<p><img src="http://tjvantoll.com/images/posts/2014-01-23/settings.png" alt="View of iOS's Auto-Lock settings"></p>

<p>Obviously there&#8217;s no <em>right</em> way to keep track of time, but I thought I&#8217;d share what has worked for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Is Styling Form Elements So Damn Hard?]]></title>
    <link href="http://tjvantoll.com/2013/12/06/why-is-styling-form-elements-so-damn-hard/"/>
    <updated>2013-12-06T12:54:00-05:00</updated>
    <id>http://tjvantoll.com/2013/12/06/why-is-styling-form-elements-so-damn-hard</id>
    <content type="html"><![CDATA[<p>The web has come a long way. We can now build powerful 3D animations, design sites that work on a vast array of screen sizes, and even <a href="https://brendaneich.com/2013/03/the-web-is-the-game-platform/">play high end games</a> - all without leaving our browser.</p>

<p>Despite this, developers still cannot change the background color of an <code>&lt;option&gt;</code> or the size of a checkbox. Why is this?</p>

<p>Basically, it comes down to the fact that the HTML specification dictates how form controls should <em>function</em>, and not how they should look. Therefore UAs (User Agents, aka browsers) are free to come up with a UI they feel best performs the functionality. And as such, there are vast differences in the UIs used.</p>

<p>Giving browsers control over the display of form controls has had an enormous impact on the development of the web - good and bad. Let&#8217;s discuss the good first.</p>

<!--more-->


<h3>Why Letting Browser Control Form Elements is Awesome</h3>

<p>To start our discussion, consider this simple <code>&lt;select&gt;</code> element.</p>

<pre class="language-markup"><code>&lt;select&gt;
    &lt;option&gt;One&lt;/option&gt;
    &lt;option&gt;Two&lt;/option&gt;
    &lt;option&gt;Three&lt;/option&gt;
&lt;/select&gt;
</code></pre>


<p>Here&#8217;s a sampling of a few different renderings. The two on the left are Chrome and Firefox for OS X, the two on the right are IE and Chrome for Windows.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-12-06/selects.png" alt="View of selects on multiple platforms"></p>

<p>While there are slightly different approaches here, these controls look relatively the same. However, the story is completely different when you consider mobile devices. The image below shows the <code>&lt;select&gt;</code> rendering on some common mobile OSs (Android on the left, iOS on the right).</p>

<p><img src="http://tjvantoll.com/images/posts/2013-12-06/selects-mobile.png" alt="View of selects on multiple platforms"></p>

<p>Because mobile browsers are not locked down to specific displays, they are free to present <code>&lt;select&gt;</code> menus in a way that best fits the device they&#8217;re running on. This is the single greatest advantage of giving browsers complete control over the look of form controls. Just think of how horrible an experience working with desktop sized <code>&lt;select&gt;</code> menus would be on a mobile device.</p>

<p>Furthermore, browsers can present users with familiar OS controls. As an example, iOS uses the same datepicker for <code>&lt;input type="date"&gt;</code> as it does for its calendar app. This familiarity helps users complete forms quicker.</p>

<p>While these truly custom UIs are great for mobile users, they present a major issue for developers.</p>

<h3>Why Letting Browser Control Form Elements is Horrible</h3>

<p>Because we now have a multitude of ways form controls are displayed, it is literally impossible to control the look, feel, and positioning of these controls across platforms. If you consider all the <code>&lt;select&gt;</code> renderings shown above, what would applying a <code>padding</code> or <code>margin</code> to an <code>&lt;option&gt;</code> element even mean?</p>

<p>This is a problem, because making slight alterations to form controls is a common request web developers have. As such, the question of how to address this has been going around the <a href="http://www.whatwg.org/mailing-list#specs">WHATWG mailing list</a> and <a href="http://lists.w3.org/">W3C mailing list</a> recently.</p>

<p>There are a number of ideas being thrown out there, so I thought I&#8217;d summarize a few of them.</p>

<h3>Pseudo Elements</h3>

<p>A number of browsers now offer styling hooks through vendor prefixed pseudo elements. (I created a <a href="http://tjvantoll.com/2013/12/06/why-is-styling-form-elements-so-damn-hard/">full list</a> if you&#8217;d like to peruse them). For instance <code>::-ms-check</code> lets you play with the look of checkboxes and radio buttons in IE.</p>

<pre class="language-markup"><code>&lt;style&gt;
    ::-ms-check {
        color: red;
        background: black;
        padding: 1em;
    }
&lt;/style&gt;
&lt;input type="checkbox"&gt;
&lt;input type="radio"&gt;
</code></pre>


<p>Which renders as follows.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-radio-checkbox.png" alt="Display of altered checkboxes in IE"></p>

<p>For the specification, the idea is that we could standardize all of the common styling points. So <code>::check</code> would be able to style checkboxes and radio buttons on all platforms, not just IE. And since the shadow DOM spec includes a <a href="http://www.w3.org/TR/shadow-dom/#custom-pseudo-elements">mechanism for exposing custom pseudo-elements</a>, this seems like a perfect solution.</p>

<p>While this sounds great, there are two fundamental problems.</p>

<p><strong>1)</strong> Because of mobile, there is almost nothing in common with the look of <em>any</em> form control across all platforms. For instance, a common request of developers is the ability to customize the calendar presented by <code>&lt;input type="date"&gt;</code>, however consider the display of the calendar on just the three platforms shown below.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-12-06/calendars.png" alt="Display of date input on Chrome, iOS, and Chrome for Android"></p>

<p>Even if you wanted to standardize something, what would it be?</p>

<p><strong>2)</strong> By standardizing pseudo elements you limit the flexibility currently afforded to browsers to innovate. IE&#8217;s <code>::-ms-check</code> pseudo-element is actually a perfect example of this. If <code>::check</code> were indeed standardized, it would prevent browsers from using a completely different representation of a checkbox, such as an iOS style switch (unless they violated the spec).</p>

<p>Therefore while this solution seems appealing, it doesn&#8217;t appear to be a complete solution to styling form controls on the web.</p>

<h3>Using Shadow DOM</h3>

<p>The <a href="http://www.w3.org/TR/shadow-dom/">shadow DOM</a> specification has made another - more drastic - solution possible. Since browsers internally implement form elements through shadow DOM, you have the ability to inject your own shadow root to use instead of the browser&#8217;s.</p>

<p>And as of Chrome 31, this is now something you can actually do. The following example creates a native <code>&lt;input type="date"&gt;</code>, gives it a new shadow root to use, and implements the calendar using <a href="http://jqueryui.com/datepicker/">jQuery UI&#8217;s datepicker</a>.</p>

<pre class="language-markup line-numbers"><code>&lt;style&gt;
    input {
        height: 2em;
        width: 15em;
    }
&lt;/style&gt;

&lt;input type="date"&gt;

&lt;script&gt;
    var dateRoot = document.querySelector( "input" )
        .webkitCreateShadowRoot();

    $( "input" ).datepicker({
        dateFormat: "yy-mm-dd",
        onSelect: function( dateText ) {
            dateRoot.innerHTML = dateText;
        }
    });
&lt;/script&gt;</code></pre>


<p>And here&#8217;s the example live, although you need Chrome 31+ for it to actually work.</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/tj_vantoll/9v44L201/embedded/result,html,js,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>You may notice that there is one big issue with this example. While we do get a custom datepicker, we lose the <code>&lt;input&gt;</code> behavior, including the ability to type in a value.</p>

<p>Another downside is this uses the JavaScript based calendar on all platforms - even mobile ones. Therefore if you try run this example on Chrome for Android you get the jQuery UI&#8217;s calendar rather than the more mobile friendly calendar most developers want.</p>

<h3>Moving Forward</h3>

<p>How do we move forward and make form controls on the web styleable?</p>

<p>Standardizing pseudo elements seems attractive because they&#8217;re easy to use. Who wants to create a new shadow root for an element just to change a few colors? The large number of platform differences makes challenging, but it may be possible for simple elements.</p>

<p>Using shadow roots has potential. While it&#8217;s a bit of work, the really hard stuff could be abstracted into libraries. The problem is currently we have no good way of inheriting the basic functionality of an <code>&lt;input&gt;</code>, and reinventing the wheel in an accessible way is challenging.</p>

<p>As developers we want some magical solution where we can make style the desktop based controls and somehow leave mobile ones alone. And unfortunately this is a very hard problem to solve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hey Developers - You Should Spell Check Your Documentation]]></title>
    <link href="http://tjvantoll.com/2013/09/18/hey-developers-you-should-spell-check-your-documentation/"/>
    <updated>2013-09-18T09:56:00-04:00</updated>
    <id>http://tjvantoll.com/2013/09/18/hey-developers-you-should-spell-check-your-documentation</id>
    <content type="html"><![CDATA[<p>As developers we write code. Therefore, the thought of using a spell checker brings to mind something like this:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-09-18/spell-check.png"></p>

<p>&#8230;which is why text editors don&#8217;t have spell checking on by default. And that&#8217;s fine when writing code, however, most developers write at least <em>some</em> documentation.</p>

<p>Increasingly this documentation is markdown, XML, or JSON files stored in a git repository. Therefore, you likely use the same editor to write documentation as you do to write code - and unfortunately, writing documentation without a spell checker inevitably leads to spelling errors.</p>

<p>Bad spelling makes your documentation look less professional, and less professional documentation reflects badly on your library, product, or whatever. Therefore I thought I&#8217;d share what I do in Sublime Text to help prevent mistakes.</p>

<!--more-->


<h3>What I Do</h3>

<p>Like most editors, Sublime Text has spell checking built in, but it is turned off by default. You can turn it on by adding <code>"spell_check": true</code> to your user preferences file, which is opened with <code>Command</code> + <code>,</code> on OS X and <code>Control</code> + <code>,</code> on Windows.</p>

<p>Because spell checking is a configurable property, turning it on and off is a matter of toggling the property&#8217;s value:</p>

<pre class="language-javascript"><code>/* Writing docs */
"spell_check": true

/* Writing code */
"spell_check": false
</code></pre>


<p>Like most spell checkers, you can right click misspelled words to get suggested fixes:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-09-18/corrections.png"></p>

<p>You can also tell Sublime to ignore certain words:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-09-18/ignore.png"></p>

<p>The hardest part of course is actually remembering to turn the spell checker on. But, even if you only remember occasionally, you can still catch a lot of misspellings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Custom Text Strikethroughs with CSS]]></title>
    <link href="http://tjvantoll.com/2013/09/12/building-custom-text-strikethroughs-with-css/"/>
    <updated>2013-09-12T15:25:00-04:00</updated>
    <id>http://tjvantoll.com/2013/09/12/building-custom-text-strikethroughs-with-css</id>
    <content type="html"><![CDATA[<p><link href="http://tjvantoll.com/stylesheets/custom/posts/2013-09-12.css" rel="stylesheet">
Adding a strikethrough to a line of text in CSS is easy.</p>

<pre class="language-markup"><code>&lt;style&gt;
    p { text-decoration: line-through; }
&lt;/style&gt;
&lt;p&gt;Hello World&lt;/p&gt;
</code></pre>


<p>Which displays as follows:</p>

<p class="example example-one">Hello World</p>


<p>But what if you want the strikethrough line to be a different height, color, or whatever?</p>

<!--more-->


<h3>The Spec</h3>

<p>The <a href="http://dev.w3.org/csswg/css-text-decor-3">CSS text-decoration spec</a> defines two new properties for customizing strikethroughs - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color"><code>text-decoration-color</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style"><code>text-decoration-style</code></a>.</p>

<p><code>text-decoration-style</code> can have values of <code>solid</code>, <code>double</code>, <code>dotted</code>, <code>dashed</code>, and my favorite - <code>wavy</code>.</p>

<p>Unfortunately these two properties are only implemented in Firefox and are behind a <code>-moz-</code> prefix. Here&#8217;s how you can use the various <code>text-decoration-style</code> values in Firefox:</p>

<pre class="language-markup line-numbers"><code>&lt;style&gt;
    p {
        text-decoration: line-through;
    }
    #solid {
        -moz-text-decoration-color: red;
        -moz-text-decoration-style: solid;
    }
    #double {
        -moz-text-decoration-color: blue;
        -moz-text-decoration-style: double;
    }
    #dotted {
        -moz-text-decoration-color: green;
        -moz-text-decoration-style: dotted;
    }
    #dashed {
        -moz-text-decoration-color: purple;
        -moz-text-decoration-style: dashed;
    }
    #wavy {
        -moz-text-decoration-color: orange;
        -moz-text-decoration-style: wavy;
    }
&lt;/style&gt;
&lt;p id="solid"&gt;solid&lt;/p&gt;
&lt;p id="double"&gt;double&lt;/p&gt;
&lt;p id="dotted"&gt;dotted&lt;/p&gt;
&lt;p id="dashed"&gt;dashed&lt;/p&gt;
&lt;p id="wavy"&gt;wavy&lt;/p&gt;
</code></pre>


<p>Which looks like this (note the <em>sweet</em> <code>wavy</code> display):</p>

<p><img src="http://tjvantoll.com/images/posts/2013-09-12/firefox-text.png"></p>

<h3>How to Do it Today&#8230; and Better</h3>

<p>While the spec changes are certainly interesting, you can accomplish much more today with some basic CSS.</p>

<p>The easiest approach is to draw a line with the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::before"><code>::before</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::after"><code>::after</code></a> pseudo-elements and position them on top of the element itself. Here, this is implemented with a CSS class name:</p>

<pre class="language-css"><code>.strike {
    position: relative;
    display: inline-block;
}
.strike::before {
    content: '';
    border-bottom: 2px solid red;
    width: 100%;
    position: absolute;
    right: 0;
    top: 50%;
}
</code></pre>


<p>This displays as follows:</p>

<p class="example strike">Hello World</p>


<p>From here you can play with the <code>border-color</code> and <code>border-height</code> properties to achieve the effect you&#8217;d like.</p>

<p>The one major caveat to this approach is it does not work on text that spans multiple lines. If you need multi-line strikeouts, you&#8217;re stuck with plain old <code>text-decoration</code>.</p>

<p>But as long as your text is on one line, you can use this technique and be as crazy as you&#8217;d like. Here&#8217;s an example that utilizes <code>::before</code> and <code>::after</code> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform">CSS transforms</a> to create a cross out effect on the text.</p>

<pre class="language-css"><code>.cross {
    position: relative;
    display: inline-block;
}
.cross::before, .cross::after {
    content: '';
    width: 100%;
    position: absolute;
    right: 0;
    top: 50%;
}
.cross::before {
    border-bottom: 2px solid green;
    -webkit-transform: skewY(-10deg);
    transform: skewY(-10deg);
}
.cross::after {
    border-bottom: 2px solid blue;
    -webkit-transform: skewY(10deg);
    transform: skewY(10deg);
}
</code></pre>


<p>Which displays as such.</p>

<p class="example cross">Hello World</p>


<p>So yeah, go crazy.</p>
]]></content>
  </entry>
  
</feed>
