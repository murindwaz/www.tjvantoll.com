<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NativeScript | TJ VanToll's Blog]]></title>
  <link href="http://tjvantoll.com/blog/categories/nativescript/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2015-05-07T09:18:26-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NativeScript Quick Tip: Managing iOS Navigation Bars]]></title>
    <link href="http://tjvantoll.com/2015/03/19/nativescript-ios-navigation-bars/"/>
    <updated>2015-03-19T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2015/03/19/nativescript-ios-navigation-bars</id>
    <content type="html"><![CDATA[<p>I've gotten a whole lot of questions about adding navigation bars to NativeScript iOS apps, so I thought I'd write a quick post about it. First of all, a <code>&lt;NavBar&gt;</code> element is coming in NativeScript 1.0 (May), so everything I'm describing will be a lot easier to do soon. But I still find this temporary workaround worth discussing as it shows off how easy the NativeScript runtime makes it to tinker with native APIs.</p>

<!-- more -->


<h2>Showing the navigation bar with a title</h2>

<p>Let's say you have the following simple NativeScript app:</p>

<pre class="language-markup line-numbers"><code>&lt;!-- main-page.xml --&gt;
&lt;Page loaded="pageLoaded"&gt;&lt;/Page&gt;</code></pre>




<pre class="language-javascript"><code>// main-page.js
function pageLoaded(args) {
    var page = args.object;
}</code></pre>


<p>By default this app does not show a navigation bar, because that's the default iOS behavior as well. Here's how you can alter your JavaScript to show the navigation bar on iOS with a title:</p>

<pre class="language-javascript"><code>// main-page.js
var frameModule = require("ui/frame");

exports.pageLoaded = function(args) {
    var page = args.object;

    // Make sure we're on iOS before making iOS-specific changes
    if (page.ios) {

        // Change the UIViewController's title property
        page.ios.title = "My Awesome App";

        // Get access to the native iOS UINavigationController
        var controller = frameModule.topmost().ios.controller;

        // Call the UINavigationController's setNavigationBarHidden method
        controller.navigationBarHidden = false;
    }
};</code></pre>


<p>Here's what this looks like:</p>

<p><img src="http://tjvantoll.com/images/posts/2015-03-19/ios-nav-bar.png" class="plain" alt=""></p>

<p>All that you're doing here is invoking iOS APIs using the NativeScript runtime. <code>page.ios.title</code> sets the <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/#//apple_ref/occ/instp/UIViewController/title"><code>UIViewController</code>'s <code>title</code> property</a>; <code>controller.navigationBarHidden</code> calls the <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UINavigationController_Class/#//apple_ref/occ/instm/UINavigationController/setNavigationBarHidden:animated:"><code>UINavigationController</code>'s <code>setNavigationBarHidden</code> method</a>. That's it.</p>

<p>This means that in NativeScript you're not limited to what NativeScript provides; if an API exists in iOS or Android you can just call it. Let's look at one more example.</p>

<h2>Changing the navigation bar's color</h2>

<p>Let's say you want to change your navigation bar's background color. Here's how you make the navigation bar red:</p>

<pre class="language-javascript"><code>// main-page.js
var frameModule = require("ui/frame");

exports.pageLoaded = function(args) {
    var page = args.object;

    // Make sure we're on iOS before making iOS-specific changes
    if (page.ios) {

        // Change the UIViewController's title property
        page.ios.title = "My Awesome App";

        // Get access to the native iOS UINavigationController
        var controller = frameModule.topmost().ios.controller;

        // Access the UINavigationBar and change its barTintColorProperty
        controller.navigationBar.barTintColor = UIColor.redColor();

        // Call the UINavigationController's setNavigationBarHidden method
        controller.navigationBarHidden = false;
    }
};</code></pre>


<p>Here's what that red navigation bar looks like:</p>

<p><img src="http://tjvantoll.com/images/posts/2015-03-19/ios-red-nav-bar.png" class="plain" alt=""></p>

<p>Again, all that you're doing here is invoking iOS APIs with the NativeScript runtime. <code>controller.navigationBar</code> gets a reference to the app's <a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UINavigationBar_Class/index.html"><code>UINavigationBar</code></a>, and <code>navigationBar.barTintColor = UIColor.redColor()</code> changes its <a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UINavigationBar_Class/index.html#//apple_ref/occ/instp/UINavigationBar/barTintColor"><code>barTintColor</code></a> property.</p>

<h2>What else can you do?</h2>

<p>Anything iOS allows you to do. Seriously. Obviously when you make these very iOS-specific changes some knowledge of iOS is required, and some knowledge of <a href="http://docs.nativescript.org/runtimes/ios/marshalling/Marshalling-Overview.html">how NativeScript handles marshalling between Objective-C and JavaScript</a> certainly helps, but I still think it's cool that you can access these native APIs so easilyâ€”in JavaScript even!</p>

<p>The appeal of NativeScript is that over time more and more of these common tasks are going to be abstracted into platform-agnostic modules so that you don't have to know the platform-specific details. <a href="https://github.com/nativescript/cross-platform-modules">There are already dozen of modules out there</a>, and new ones are being added with each release. For example when <code>&lt;NavBar&gt;</code> lands in NativeScript 1.0 you won't need this article anymore :)</p>
]]></content>
  </entry>
  
</feed>
