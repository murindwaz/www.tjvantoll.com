<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSS | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2014-04-02T09:32:30-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Is Styling Form Elements So Damn Hard?]]></title>
    <link href="http://tjvantoll.com/2013/12/06/why-is-styling-form-elements-so-damn-hard/"/>
    <updated>2013-12-06T12:54:00-05:00</updated>
    <id>http://tjvantoll.com/2013/12/06/why-is-styling-form-elements-so-damn-hard</id>
    <content type="html"><![CDATA[<p>The web has come a long way. We can now build powerful 3D animations, design sites that work on a vast array of screen sizes, and even <a href="https://brendaneich.com/2013/03/the-web-is-the-game-platform/">play high end games</a> - all without leaving our browser.</p>

<p>Despite this, developers still cannot change the background color of an <code>&lt;option&gt;</code> or the size of a checkbox. Why is this?</p>

<p>Basically, it comes down to the fact that the HTML specification dictates how form controls should <em>function</em>, and not how they should look. Therefore UAs (User Agents, aka browsers) are free to come up with a UI they feel best performs the functionality. And as such, there are vast differences in the UIs used.</p>

<p>Giving browsers control over the display of form controls has had an enormous impact on the development of the web - good and bad. Let's discuss the good first.</p>

<!--more-->


<h3>Why Letting Browser Control Form Elements is Awesome</h3>

<p>To start our discussion, consider this simple <code>&lt;select&gt;</code> element.</p>

<p>``` html
<select></p>

<pre><code>&lt;option&gt;One&lt;/option&gt;
&lt;option&gt;Two&lt;/option&gt;
&lt;option&gt;Three&lt;/option&gt;
</code></pre>

<p></select>
```</p>

<p>Here's a sampling of a few different renderings. The two on the left are Chrome and Firefox for OS X, the two on the right are IE and Chrome for Windows.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-12-06/selects.png" alt="View of selects on multiple platforms"></p>

<p>While there are slightly different approaches here, these controls look relatively the same. However, the story is completely different when you consider mobile devices. The image below shows the <code>&lt;select&gt;</code> rendering on some common mobile OSs (Android on the left, iOS on the right).</p>

<p><img src="http://tjvantoll.com/images/posts/2013-12-06/selects-mobile.png" alt="View of selects on multiple platforms"></p>

<p>Because mobile browsers are not locked down to specific displays, they are free to present <code>&lt;select&gt;</code> menus in a way that best fits the device they're running on. This is the single greatest advantage of giving browsers complete control over the look of form controls. Just think of how horrible an experience working with desktop sized <code>&lt;select&gt;</code> menus would be on a mobile device.</p>

<p>Furthermore, browsers can present users with familiar OS controls. As an example, iOS uses the same datepicker for <code>&lt;input type="date"&gt;</code> as it does for its calendar app. This familiarity helps users complete forms quicker.</p>

<p>While these truly custom UIs are great for mobile users, they present a major issue for developers.</p>

<h3>Why Letting Browser Control Form Elements is Horrible</h3>

<p>Because we now have a multitude of ways form controls are displayed, it is literally impossible to control the look, feel, and positioning of these controls across platforms. If you consider all the <code>&lt;select&gt;</code> renderings shown above, what would applying a <code>padding</code> or <code>margin</code> to an <code>&lt;option&gt;</code> element even mean?</p>

<p>This is a problem, because making slight alterations to form controls is a common request web developers have. As such, the question of how to address this has been going around the <a href="http://www.whatwg.org/mailing-list#specs">WHATWG mailing list</a> and <a href="http://lists.w3.org/">W3C mailing list</a> recently.</p>

<p>There are a number of ideas being thrown out there, so I thought I'd summarize a few of them.</p>

<h3>Pseudo Elements</h3>

<p>A number of browsers now offer styling hooks through vendor prefixed pseudo elements. (I created a <a href="/2013/12/06/why-is-styling-form-elements-so-damn-hard/">full list</a> if you'd like to peruse them). For instance <code>::-ms-check</code> lets you play with the look of checkboxes and radio buttons in IE.</p>

<p>``` html</p>



<p><input type="checkbox">
<input type="radio">
```</p>

<p>Which renders as follows.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-radio-checkbox.png" alt="Display of altered checkboxes in IE"></p>

<p>For the specification, the idea is that we could standardize all of the common styling points. So <code>::check</code> would be able to style checkboxes and radio buttons on all platforms, not just IE. And since the shadow DOM spec includes a <a href="http://www.w3.org/TR/shadow-dom/#custom-pseudo-elements">mechanism for exposing custom pseudo-elements</a>, this seems like a perfect solution.</p>

<p>While this sounds great, there are two fundamental problems.</p>

<p><strong>1)</strong> Because of mobile, there is almost nothing in common with the look of <em>any</em> form control across all platforms. For instance, a common request of developers is the ability to customize the calendar presented by <code>&lt;input type="date"&gt;</code>, however consider the display of the calendar on just the three platforms shown below.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-12-06/calendars.png" alt="Display of date input on Chrome, iOS, and Chrome for Android"></p>

<p>Even if you wanted to standardize something, what would it be?</p>

<p><strong>2)</strong> By standardizing pseudo elements you limit the flexibility currently afforded to browsers to innovate. IE's <code>::-ms-check</code> pseudo-element is actually a perfect example of this. If <code>::check</code> were indeed standardized, it would prevent browsers from using a completely different representation of a checkbox, such as an iOS style switch (unless they violated the spec).</p>

<p>Therefore while this solution seems appealing, it doesn't appear to be a complete solution to styling form controls on the web.</p>

<h3>Using Shadow DOM</h3>

<p>The <a href="http://www.w3.org/TR/shadow-dom/">shadow DOM</a> specification has made another - more drastic - solution possible. Since browsers internally implement form elements through shadow DOM, you have the ability to inject your own shadow root to use instead of the browser's.</p>

<p>And as of Chrome 31, this is now something you can actually do. The following example creates a native <code>&lt;input type="date"&gt;</code>, gives it a new shadow root to use, and implements the calendar using <a href="http://jqueryui.com/datepicker/">jQuery UI's datepicker</a>.</p>

<p>``` html</p>



<p><input type="date"></p>

<script>
    var dateRoot = document.querySelector( "input" )
        .webkitCreateShadowRoot();

    $( "input" ).datepicker({
        dateFormat: "yy-mm-dd",
        onSelect: function( dateText ) {
            dateRoot.innerHTML = dateText;
        }
    });
</script>


<p>```</p>

<p>And here's the example live, although you need Chrome 31+ for it to actually work.</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/tj_vantoll/6qadQ/embedded/result,html,js,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>You may notice that there is one big issue with this example. While we do get a custom datepicker, we lose the <code>&lt;input&gt;</code> behavior, including the ability to type in a value.</p>

<p>Another downside is this uses the JavaScript based calendar on all platforms - even mobile ones. Therefore if you try run this example on Chrome for Android you get the jQuery UI's calendar rather than the more mobile friendly calendar most developers want.</p>

<h3>Moving Forward</h3>

<p>How do we move forward and make form controls on the web styleable?</p>

<p>Standardizing pseudo elements seems attractive because they're easy to use. Who wants to create a new shadow root for an element just to change a few colors? The large number of platform differences makes challenging, but it may be possible for simple elements.</p>

<p>Using shadow roots has potential. While it's a bit of work, the really hard stuff could be abstracted into libraries. The problem is currently we have no good way of inheriting the basic functionality of an <code>&lt;input&gt;</code>, and reinventing the wheel in an accessible way is challenging.</p>

<p>As developers we want some magical solution where we can make style the desktop based controls and somehow leave mobile ones alone. And unfortunately this is a very hard problem to solve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Custom Text Strikethroughs with CSS]]></title>
    <link href="http://tjvantoll.com/2013/09/12/building-custom-text-strikethroughs-with-css/"/>
    <updated>2013-09-12T15:25:00-04:00</updated>
    <id>http://tjvantoll.com/2013/09/12/building-custom-text-strikethroughs-with-css</id>
    <content type="html"><![CDATA[<p><link href="http://tjvantoll.com/stylesheets/custom/posts/2013-09-12.css" rel="stylesheet">
Adding a strikethrough to a line of text in CSS is easy.</p>

<p>``` html</p>



<p>Hello World</p>


<p>```</p>

<p>Which displays as follows:</p>

<p class="example example-one">Hello World</p>


<p>But what if you want the strikethrough line to be a different height, color, or whatever?</p>

<!--more-->


<h3>The Spec</h3>

<p>The <a href="http://dev.w3.org/csswg/css-text-decor-3">CSS text-decoration spec</a> defines two new properties for customizing strikethroughs - <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-color"><code>text-decoration-color</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-style"><code>text-decoration-style</code></a>.</p>

<p><code>text-decoration-style</code> can have values of <code>solid</code>, <code>double</code>, <code>dotted</code>, <code>dashed</code>, and my favorite - <code>wavy</code>.</p>

<p>Unfortunately these two properties are only implemented in Firefox and are behind a <code>-moz-</code> prefix. Here's how you can use the various <code>text-decoration-style</code> values in Firefox:</p>

<p>``` html</p>



<p id="solid">solid</p>


<p id="double">double</p>


<p id="dotted">dotted</p>


<p id="dashed">dashed</p>


<p id="wavy">wavy</p>


<p>```</p>

<p>Which looks like this (note the <em>sweet</em> <code>wavy</code> display):</p>

<p><img src="http://tjvantoll.com/images/posts/2013-09-12/firefox-text.png"></p>

<h3>How to Do it Today... and Better</h3>

<p>While the spec changes are certainly interesting, you can accomplish much more today with some basic CSS.</p>

<p>The easiest approach is to draw a line with the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::before"><code>::before</code></a> or <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::after"><code>::after</code></a> pseudo-elements and position them on top of the element itself. Here, this is implemented with a CSS class name:</p>

<p>``` css
.strike {</p>

<pre><code>position: relative;
display: inline-block;
</code></pre>

<p>}
.strike::before {</p>

<pre><code>content: '';
border-bottom: 2px solid red;
width: 100%;
position: absolute;
right: 0;
top: 50%;
</code></pre>

<p>}
```</p>

<p>This displays as follows:</p>

<p class="example strike">Hello World</p>


<p>From here you can play with the <code>border-color</code> and <code>border-height</code> properties to achieve the effect you'd like.</p>

<p>The one major caveat to this approach is it does not work on text that spans multiple lines. If you need multi-line strikeouts, you're stuck with plain old <code>text-decoration</code>.</p>

<p>But as long as your text is on one line, you can use this technique and be as crazy as you'd like. Here's an example that utilizes <code>::before</code> and <code>::after</code> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform">CSS transforms</a> to create a cross out effect on the text.</p>

<p>``` css
.cross {</p>

<pre><code>position: relative;
display: inline-block;
</code></pre>

<p>}
.cross::before, .cross::after {</p>

<pre><code>content: '';
width: 100%;
position: absolute;
right: 0;
top: 50%;
</code></pre>

<p>}
.cross::before {</p>

<pre><code>border-bottom: 2px solid green;
-webkit-transform: skewY(-10deg);
transform: skewY(-10deg);
</code></pre>

<p>}
.cross::after {</p>

<pre><code>border-bottom: 2px solid blue;
-webkit-transform: skewY(10deg);
transform: skewY(10deg);
</code></pre>

<p>}
```</p>

<p>Which displays as such.</p>

<p class="example cross">Hello World</p>


<p>So yeah, go crazy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internet Explorer, Attribute Selectors, and Really Long Attribute Values]]></title>
    <link href="http://tjvantoll.com/2013/06/21/internet-explorer-attribute-selectors-and-long-values/"/>
    <updated>2013-06-21T21:36:00-04:00</updated>
    <id>http://tjvantoll.com/2013/06/21/internet-explorer-attribute-selectors-and-long-values</id>
    <content type="html"><![CDATA[<p>In Internet Explorer, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors">attribute selectors</a> that inspect the attribute's value do not work if the value is >= 4096 characters. This is one of those bugs that you are highly unlikely to run into, but is incredibly painful to track down if you do.</p>

<p>As an example, take the following:</p>

<p>``` html</p>





<div data-test="Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc, quis gravida magna mi a libero. Fusce vulputate eleifend sapien. Vestibulum purus quam, scelerisque ut, mollis sed, nonummy id, metus. Nullam accumsan lorem in dui. Cras ultricies mi eu turpis hendrerit fringilla. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; In ac dui quis mi consectetuer lacinia. Nam pretium turpis et arcu. Duis arcu tortor, suscipit eget, imperdiet nec, imperdiet iaculis, ipsum. Sed aliquam ultrices mauris. Integer ante arcu, accumsan a, consectetuer eget, posuere ut, mauris. Praesent adipiscing. Phasellus ullamcorper ipsum rutrum nunc. Nunc nonummy metus. Vestibulum volutpat pretium libero. Cras id dui. Aenean ut eros et nisl sagittis vestibulum. Nullam nulla eros, ultricies sit amet, nonummy id, imperdiet feugiat, pede. Sed lectus. Donec mollis hendrerit risus. Phasellus nec sem in justo pellentesque facilisis. Etiam imperdiet imperdiet orci. Nunc nec neque. Phasellus leo dolor, tempus non, auctor et, hendrerit quis, nisi. Curabitur ligula sapien, tincidunt non, euismod vitae, posuere imperdiet, leo. Maecenas malesuada. Praesent congue erat at massa. Sed cursus turpis vitae tortor. Donec posuere vulputate arcu. Phasellus accumsan cursus velit. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Sed aliquam, nisi quis porttitor congue, elit erat euismod orci, ac placerat dolor lectus quis orci. Phasellus consectetuer vestibulum elit. Aenean tellus metus, bibendum sed, posuere ac, mattis non, nunc. Vestibulum fringilla pede sit amet augue. In turpis. Pellentesque posuere. Praesent turpis. Aenean posuere, tortor sed cursus feugiat, nunc augue blandit nunc, eu sollicitudin urna dolor sagittis lacus. Donec elit libero, sodales nec, volutpat a, suscipit non, turpis. Nullam sagittis. Suspendisse pulvinar, augue ac venenatis condimentum, sem libero volutpat nibh, nec pellentesque velit pede quis nunc. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Fusce id purus. Ut varius tincidunt libero. Phasellus dolor. Maecenas vestibulum mollis diam. Pellentesque ut neque. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. In dui magna, posuere eget, vestibulum et, tempor auctor, justo. In ac felis quis tortor malesuada pretium. Pellentesque auctor neque nec urna. Proin sapien ipsum, porta a, auctor quis, euismod ut, mi. Aenean viverra rhoncus pede. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Ut non enim eleifend felis pretium feugiat. Vivamus quis mi. Phasellus a est. Phasellus magna. In hac habitasse platea dictumst. Curabitur at lacus ac velit ornare lobortis. Cur">
    4095 Characters
</div>




<div data-test="Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget bibendum sodales, augue velit cursus nunc, quis gravida magna mi a libero. Fusce vulputate eleifend sapien. Vestibulum purus quam, scelerisque ut, mollis sed, nonummy id, metus. Nullam accumsan lorem in dui. Cras ultricies mi eu turpis hendrerit fringilla. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; In ac dui quis mi consectetuer lacinia. Nam pretium turpis et arcu. Duis arcu tortor, suscipit eget, imperdiet nec, imperdiet iaculis, ipsum. Sed aliquam ultrices mauris. Integer ante arcu, accumsan a, consectetuer eget, posuere ut, mauris. Praesent adipiscing. Phasellus ullamcorper ipsum rutrum nunc. Nunc nonummy metus. Vestibulum volutpat pretium libero. Cras id dui. Aenean ut eros et nisl sagittis vestibulum. Nullam nulla eros, ultricies sit amet, nonummy id, imperdiet feugiat, pede. Sed lectus. Donec mollis hendrerit risus. Phasellus nec sem in justo pellentesque facilisis. Etiam imperdiet imperdiet orci. Nunc nec neque. Phasellus leo dolor, tempus non, auctor et, hendrerit quis, nisi. Curabitur ligula sapien, tincidunt non, euismod vitae, posuere imperdiet, leo. Maecenas malesuada. Praesent congue erat at massa. Sed cursus turpis vitae tortor. Donec posuere vulputate arcu. Phasellus accumsan cursus velit. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Sed aliquam, nisi quis porttitor congue, elit erat euismod orci, ac placerat dolor lectus quis orci. Phasellus consectetuer vestibulum elit. Aenean tellus metus, bibendum sed, posuere ac, mattis non, nunc. Vestibulum fringilla pede sit amet augue. In turpis. Pellentesque posuere. Praesent turpis. Aenean posuere, tortor sed cursus feugiat, nunc augue blandit nunc, eu sollicitudin urna dolor sagittis lacus. Donec elit libero, sodales nec, volutpat a, suscipit non, turpis. Nullam sagittis. Suspendisse pulvinar, augue ac venenatis condimentum, sem libero volutpat nibh, nec pellentesque velit pede quis nunc. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Fusce id purus. Ut varius tincidunt libero. Phasellus dolor. Maecenas vestibulum mollis diam. Pellentesque ut neque. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. In dui magna, posuere eget, vestibulum et, tempor auctor, justo. In ac felis quis tortor malesuada pretium. Pellentesque auctor neque nec urna. Proin sapien ipsum, porta a, auctor quis, euismod ut, mi. Aenean viverra rhoncus pede. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Ut non enim eleifend felis pretium feugiat. Vivamus quis mi. Phasellus a est. Phasellus magna. In hac habitasse platea dictumst. Curabitur at lacus ac velit ornare lobortis. Cura">
    4096 Characters
</div>


<p>```</p>

<p>The example has two <code>&lt;div&gt;</code>s and 3 rules applied to both elements via attribute selectors. In Firefox, Chrome, Safari, and Opera all rules apply as they should and the elements display as follows:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-06-21/chrome.png"></p>

<p>In Internet Explorer however, the display looks like this:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-06-21/ie.png"></p>

<p>The selector that looks for the existence of the attribute, <code>div[data-test]</code>, matches both elements and the <code>background: red</code> rule is applied.</p>

<p>However, the two selectors that inspect the attribute's values, <code>div[data-test*="Nullam"]</code> and <code>div[data-test^="Lorem"]</code>), mysteriously do not match the <code>&lt;div&gt;</code> with the 4096 character <code>data-test</code> attribute.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Semantic Class Names to Show and Hide Elements]]></title>
    <link href="http://tjvantoll.com/2013/06/19/using-semantic-class-names-to-show-and-hide-elements/"/>
    <updated>2013-06-19T21:29:00-04:00</updated>
    <id>http://tjvantoll.com/2013/06/19/using-semantic-class-names-to-show-and-hide-elements</id>
    <content type="html"><![CDATA[<p>Showing and hiding elements has the potential to get complicated in large applications.</p>

<p>As a small example, say you have the following form that both displays a user's data as well as allows them to edit it:</p>

<p>``` html
<form></p>

<pre><code>&lt;fieldset&gt;
    &lt;legend&gt;Account Information&lt;/legend&gt;

    &lt;div&gt;
        &lt;label for="name"&gt;Name:&lt;/label&gt;
        &lt;input type="text" id="name" value="TJ" required&gt;
        &lt;span class="display"&gt;TJ&lt;/span&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;label for="email"&gt;Email:&lt;/label&gt;
        &lt;input type="email" id="email" value="tj@somedomain.com" required&gt;
        &lt;span class="display"&gt;tj@somedomain.com&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="actions"&gt;
        &lt;button type="button" class="edit"&gt;Edit&lt;/button&gt;
        &lt;button type="submit" class="save"&gt;Save&lt;/button&gt;
        &lt;button type="button" class="cancel"&gt;Cancel&lt;/button&gt;
    &lt;/div&gt;
&lt;/fieldset&gt;
</code></pre>

<p></form>
```</p>

<!-- more -->


<p>Without any logic both states of the form display:</p>

<p><div class="code_example"><h6>Initial Form Display<a href="/demos/2013-06-19/initialForm.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 300px;" frameborder="0" src="/demos/2013-06-19/initialForm.html"></iframe></div></p>

<h3>Adding the Logic</h3>

<p>Here's the goal. The Edit button should:</p>

<ul>
<li>Show the <code>&lt;input&gt;</code>s.</li>
<li>Show the Save button.</li>
<li>Show the Cancel button.</li>
<li>Hide the Edit button.</li>
<li>Hide the text in the <code>&lt;span&gt;</code>s.</li>
</ul>


<p>The Cancel button should then undo these changes.</p>

<p>The traditional approach to this problem is to show and hide elements explicitly in JavaScript:</p>

<p>``` javascript
$( ".edit" ).on( "click", function() {</p>

<pre><code>$( ".display, .edit" ).hide();
$( ".cancel, .save, input" ).show();
</code></pre>

<p>});
$( ".cancel" ).on( "click", function() {</p>

<pre><code>$( ".display, .edit" ).show();
$( ".cancel, .save, input" ).hide();
</code></pre>

<p>});
```</p>

<p>To get the initial state of the form correct you also need some CSS:</p>

<p>``` css
.cancel, .save, input {</p>

<pre><code>display: none;
</code></pre>

<p>}
```</p>

<p>Because the list of elements has to be specified in JavaScript and CSS, this logic will be difficult to maintain. And this is for a trivial example; usually requirements are much more complex.</p>

<p>How can we make this better?</p>

<h3>Semantic Class Names</h3>

<p>Instead of targeting individual elements in JavaScript, let's add a class name to the parent element that makes the most sense, in this case, the <code>&lt;form&gt;</code>:</p>

<p>``` javascript
$( ".edit" ).on( "click", function() {</p>

<pre><code>$( this ).parents( "form" ).addClass( "editing" );
</code></pre>

<p>});
$( ".cancel" ).on( "click", function() {</p>

<pre><code>$( this ).parents( "form" ).removeClass( "editing" );
</code></pre>

<p>});
```</p>

<p>Since the logic is simple, this can be written library-free as well (<em>note <code>classList</code> is not available in IE &lt; 10</em>):</p>

<p>``` javascript
(function() {</p>

<pre><code>var form = document.querySelector( "form" ),
    editButton = document.querySelector( ".edit" ),
    cancelButton = document.querySelector( ".cancel" );

editButton.addEventListener( "click", function() {
    form.classList.add( "editing" ); 
});
cancelButton.addEventListener( "click", function() {
    form.classList.remove( "editing" ); 
});
</code></pre>

<p>}());
```</p>

<h3>Advantages of Using Semantic Classes</h3>

<p>There are 2 major advantages to this approach.</p>

<p>1) All display logic is now handled in CSS:</p>

<p>``` css
.cancel, .save, input {</p>

<pre><code>display: none;
</code></pre>

<p>}
.editing .save,
.editing .cancel,
.editing input {</p>

<pre><code>display: inline-block;
</code></pre>

<p>}
.editing .edit,
.editing .display {</p>

<pre><code>display: none;
</code></pre>

<p>}
```</p>

<p>2) You have a styling hook that can be used to make further changes to the display. For example, you might want to bold the labels when editing:</p>

<p>``` css
.editing label {</p>

<pre><code>font-weight: bold;
</code></pre>

<p>}
```</p>

<p>The final display of the form looks like this:</p>

<p><div class="code_example"><h6>Semantic Class Approach<a href="/demos/2013-06-19/finalForm.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 300px;" frameborder="0" src="/demos/2013-06-19/finalForm.html"></iframe></div></p>

<h3>Conclusion</h3>

<p>This is not a technique that I came up with but I've used it successfully in several large applications and have found that it scales well over time.</p>

<p>Do you have any other tricks you use to show &amp; hide elements? If so, let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Showing a CSS Based Loading Animation While Your Site Loads]]></title>
    <link href="http://tjvantoll.com/2013/04/24/showing-a-css-based-loading-animation-while-your-site-loads/"/>
    <updated>2013-04-24T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2013/04/24/showing-a-css-based-loading-animation-while-your-site-loads</id>
    <content type="html"><![CDATA[<p>Showing a loading indicator on startup is a common pattern in native applications that is becoming more common on the web.  If you need to load a lot of resources when your web application is first loaded, you should give the user a clear indication that this is occurring.</p>

<!-- more -->


<p>Here's an approach I've used a few times to accomplish this.  I start by giving the <code>&lt;html&gt;</code> element itself a class of <code>"loading"</code>:</p>

<p>``` html
<html class="loading"></p>

<pre><code>&lt;!-- All the things --&gt;
</code></pre>

<p></html>
```</p>

<p>I then setup two transitions that take effect when the loading class is removed.  I transition the color on the <code>&lt;html&gt;</code> element from a predefined color to its default, <code>transparent</code>.  To avoid seeing content during loading, I make the <code>&lt;body&gt;</code> opaque with <code>opacity: 0</code>.  When loading is complete, that is transitioned to <code>opacity: 1</code> to fade the content in.  The full source is below:</p>

<p>``` css
html {</p>

<pre><code>-webkit-transition: background-color 1s;
transition: background-color 1s;
</code></pre>

<p>}
html, body {</p>

<pre><code>/* For the loading indicator to be vertically centered ensure */
/* the html and body elements take up the full viewport */
min-height: 100%;
</code></pre>

<p>}
html.loading {</p>

<pre><code>/* Replace #333 with the background-color of your choice */
/* Replace loading.gif with the loading image of your choice */
background: #333 url('loading.gif') no-repeat 50% 50%;

/* Ensures that the transition only runs in one direction */
-webkit-transition: background-color 0;
transition: background-color 0;
</code></pre>

<p>}
body {</p>

<pre><code>-webkit-transition: opacity 1s ease-in;
transition: opacity 1s ease-in;
</code></pre>

<p>}
html.loading body {</p>

<pre><code>/* Make the contents of the body opaque during loading */
opacity: 0;

/* Ensures that the transition only runs in one direction */
-webkit-transition: opacity 0;
transition: opacity 0;
</code></pre>

<p>}
```</p>

<p>The only JavaScript required is to remove the <code>"loading"</code> class from the <code>&lt;html&gt;</code> element.  Do this when your application is initialized and ready to go.</p>

<p>``` javascript
// IE10+
document.getElementsByTagName( "html" )[0].classList.remove( "loading" );</p>

<p>// All browsers
document.getElementsByTagName( "html" )[0].className.replace( /loading/, "" );</p>

<p>// Or with jQuery
$( "html" ).removeClass( "loading" );
```</p>

<p>The demo below shows this animation in action.  To simulate a real load it waits 3 seconds before the <code>"loading"</code> class is removed.</p>

<p><div class="code_example"><h6>Loading Example<a href="/demos/2013-04-24/loading.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 275px;" frameborder="0" src="/demos/2013-04-24/loading.html"></iframe></div></p>

<p>This will work in <a href="http://caniuse.com/#feat=css-transitions">any browser that supports CSS transitions</a>, which nowadays is really everything other than IE &lt;= 9.  It also degrades gracefully for older browsers.  Unsupported browsers will still see the loading animation, they will simply lose the fade in transition when loading is complete.</p>
]]></content>
  </entry>
  
</feed>
