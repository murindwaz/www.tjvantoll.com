<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQuery UI | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/jquery-ui/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2014-12-29T08:48:28-05:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[So You Want to Write a Tech Book]]></title>
    <link href="http://tjvantoll.com/2014/12/29/so-you-want-to-write-a-tech-book/"/>
    <updated>2014-12-29T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2014/12/29/so-you-want-to-write-a-tech-book</id>
    <content type="html"><![CDATA[<p><img src="http://tjvantoll.com/images/posts/2014-12-29/shelf.jpg" alt="Books on my shelf" style="border: none;"></p>

<p>When I finished <em><a href="http://tjvantoll.com/jquery-ui-in-action.html">jQuery UI in Action</a></em> I decided I wanted to write a retrospective to help other aspiring authors. I wanted to release the retrospective around the same time as the book (*cough* late September), but as it turns out, it's super easy to legitimize procrastination after you finish writing a book. Playing through the entire suite of Sonic the Hedgehog Genesis games suddenly seems like a <em>great</em> idea. (It is, by the way.)</p>

<p>But I did finally get around to doing this. What follows is a semi-coherent series of sentences about my experiences writing a tech book. The target reader is someone curious about how tech books are authored—especially masochistic readers that might be interested in writing a book themselves one day.</p>

<h2>A timeline</h2>

<p>The most frequent questions I get about the book are related to time, so let's start there. Here's how <em>jQuery UI in Action</em> went down:</p>

<ul>
<li><strong>April 29th, 2013</strong>: <a href="http://www.manning.com/?a_aid=tj-vantoll">Manning</a> (the publisher) first contacted me</li>
<li><strong>June 26th, 2013</strong>: I signed a contract to write the book</li>
<li><strong>August 1st, 2013</strong>: I started writing chapter 1</li>
<li><strong>March 26th, 2014</strong>: I completed the first draft of the entire book</li>
<li><strong>September 30th, 2014</strong>: <em>jQuery UI in Action</em> was published</li>
</ul>


<p>For those of you counting that's <strong>462 days</strong> from contract to publication. To give you some perspective on how long that is, or possibly just to confuse you with a questionably related statistic, that's also approximately <a href="http://www.vaughns-1-pagers.com/biology/gestation-periods.htm">the gestational period for a grey rhino</a>. It's a long time.</p>

<p>And it definitely seemed long, but after talking to other tech authors this sort of timeline seems to be fairly average. Ilya Grigorik wrote <a href="http://www.amazon.com/High-Performance-Browser-Networking-performance/dp/1449344763/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1419611457&amp;sr=1-1&amp;keywords=high+performance+browser+networking"><em>High Performance Browser Networking</em></a> (which is almost exactly the same length as <em>jQuery UI in Action</em>) in 381 days, which is 81 fewer days than it took me... but his book has “Performance” in the title, so I'd say that checks out.</p>

<blockquote><p>That stat is from Ilya's <a href="https://www.igvita.com/2013/09/29/retrospective-high-performance-browser-networking/">amazing retrospective of his work on his book</a>. You should read it, especially if you're interested in detailed data related to the writing process.</p></blockquote>

<p>Of course, writing time can vary considerably depending on the book's length. <em>jQuery UI in Action</em> is twelve chapters long with six appendices. In total the book is <strong>361 pages</strong>, the vast majority of which were written over eight months.</p>

<p>
    <img src="http://tjvantoll.com/images/posts/2014-12-29/last-page.png" alt="The last page of jQuery UI in Action">
    <i>See, it is 361 pages. Manning counts the index pages so I will too; don't judge me.</i>
</p>


<h2>Day to day</h2>

<p>With the high-level overview out of the way let's get into my day-to-day work. Honestly I wish I had a cool story for how this book was written, but the reality is extremely mundane. It was basically me, my laptop, and an inordinate amount of time in my basement.</p>

<p style="float: right; width: 50%; margin: 1em 0 1em 1em;">
    <img src="http://tjvantoll.com/images/posts/2014-12-29/desk.jpg" alt="The desk in my basement" style="max-height: 400px;">
    <i>This is where the magic happens.</i>
</p>


<p>And by inordinate I mean roughly <strong>two hours a day, seven days a week</strong>. I would occasionally take a day off, and I would occasionally work a few extra hours, but overall I was fairly consistent about working <strong>~14 hours per week</strong> on the book.</p>

<p>Before writing <em>jQuery UI in Action</em> I had this vision of tech authors that exclusively wrote books. But since writing <em>jQuery UI in Action</em> I've had the pleasure of meeting several other authors, and I've learned that almost every tech author has a full time job of some variety. Writing books alone is not enough to pay the bills—not even close. And that's not necessarily a bad thing (I'll get into that later), but it does mean writing a tech book is almost exclusively done in addition to a full-time job.</p>

<p>Personally I was somewhat fortunate because my job was (and is) remote and extraordinarily flexible. (I work as a developer advocate for Telerik.) Working remote afforded me a little extra time everyday, and I was able to use that time to work on the book periodically, which turned out to be invaluable. What worked best for me was handling logistical things during the day—answering emails, performing edits, responding to reviews, and such—so that I could devote my nights to writing without distractions.</p>

<p>Overall, the main thing I learned is that writing a tech book is time and effort on top of your current work and family commitments. In addition to my day job, my four-year-old twin boys made sure that the overwhelming majority of my writing happened between 9:00 PM and midnight, after the boys went to bed.</p>

<p>In general I would advise anyone debating authoring a tech book to make sure your family is on board first. My significant other was extraordinarily helpful and considerate during the process, but I'm pretty sure she wanted to murder me by the end. Actually, in hindsight, I'm more than pretty sure—“I'm going to murder you if you don't finish” might be a direct quote. But for the book's sake I had to keep her happy, and not just for the reasons you would expect—she's a lot better at CSS than me, and I needed her to make my examples work more than a few times.</p>

<h3>Editing</h3>

<p>From my earlier timeline you may have noticed that there was a roughly five-month gap between the time the first draft of the book was complete and publication. A couple things were going on during that time, but it was mostly editing. I can't speak for other publishers, but Manning has a lot of processes that are all about producing the best possible book. Off the top of my head this includes the following:</p>

<ul>
<li>A review of the original book proposal and TOC (table of contents) by a group of potential readers</li>
<li>A review after each chapter by my editor</li>
<li>External reviews by ~8 individuals at three points throughout the book (after chapters 4, 8, and 12 were completed, respectively)</li>
<li>A copy edit pass for grammar and formatting</li>
<li>A dedicated technical review</li>
<li>Two proofreading passes</li>
</ul>


<p>I have mixed feelings about having this much ceremony to publish a book. On the positive side I have never been more proud of anything I've written in my life. I made a number of beneficial changes to the structure and contents of the book based on the external reviews; I was ecstatic that <a href="http://bassistance.de/">Jörn Zaefferer</a> agreed to tech review the book; and I learned a lot from going through the copy editing process.</p>

<p>But that being said these review processes can take an extraordinary amount of time and energy. Time spent tweaking wording for clarity could be spent finishing the book sooner, and the <a href="http://en.wikipedia.org/wiki/Diminishing_returns">law of diminishing returns</a> is at play here. Over time I found that the processes aren't bad as long as you focus on trends and avoid nit picking every little sentence. If one person doesn't like your sentence don't worry about it, but three people are confused by an example it's probably worth addressing.</p>

<h2>Tips for writing a book</h2>

<p>I have other tips so I thought I might as well make a section for them. As with my other unsolicited advise, take these tips for what they are: things that worked for me that may or may not work for you.</p>

<h3>Tip #1: Write, write write</h3>

<p>Writing a 300+ page book is absurdly time consuming, so wasting time staring at the screen doesn't do you any good. Of course this is easier said than done, and writer's block is a real thing, but getting a first draft done as fast as possible is incredibly important. A first draft can be reviewed for high-level problems, for structure, and for continuity with the rest of the book. There's no point taking an hour to write a perfect introductory paragraph if it's going to have to change later. (Remember those five months of editing I just talked about. You'll have time to get things as perfect as you'd like.)</p>

<p>My advice is to try to make your writing a stream of consciousness as much as possible. Write like you're explaining something to your friend sitting right next to you. You may end up writing some nonsense, but you might surprise yourself by just how coherent and conversational your stream of consciousness is.</p>

<h3>Tip #2: Drink</h3>

<p>This tip isn't for everyone, but for some a drink or two can help put your mind at ease and help get words onto paper. (Figuratively of course, if you're literally writing random words on physical paper that's a sign that you've had too many.) Personally I found that the occasional beer could help my creative processes substantially.</p>

<p>There's actually some science to back this up. Studies are now increasingly showing that <a href="http://blog.pickcrew.com/coffee-vs-beer-effects-on-creativity/">alcohol tends to produce better ideas, and that coffee can give you a burst of energy to complete tasks</a>. The phrase “beer for the idea and coffee for the execution” is actually a thing. Ernest Hemingway may have said it best:</p>

<blockquote><p>Write drunk; edit sober.</p></blockquote>

<p>Note: There's a <a href="http://en.wikiquote.org/wiki/Talk:Ernest_Hemingway">good chance Hemingway didn't <em>actually</em> say this</a>, but it sound <em>way</em> cooler to attribute the quote to Hemingway, so let's assume that he did.</p>

<h3>Tip #3: Don't worry about grammar or formatting</h3>

<p>The theme of the previous tips was to help produce a first draft as fast as possible, and this is a continuation of that message. Simply put, while writing a first draft, don't worry about your grammar. You can sort out the “it's” versus “its”, “affect” versus “effect”, and other such issues later.</p>

<p>Along the same lines, don't worry about formatting, indentation, style guides, structure, fonts, code clarity, or any of that stuff. Just write. You can clean all of that up during editing (with coffee of course).</p>

<h3>Tip #4: Sleep on it</h3>

<p>The stresses and timelines associated with writing a book can make you feel like you need to write every day no matter what. But writer's block is a real thing, and some days it's impossible to write words no matter how hard you try. Worse, nights that you spend hours accomplishing nothing are extremely detrimental to your morale. You wake up the next day tired and more stressed from the time you just lost.</p>

<p>Over time I started giving up on days where I knew nothing would happen and went to sleep. I did this not only for the obvious benefit of being more rested the next day, but because I also found sleeping to help with the my creative processes. I can think of several occasions that I had no idea how to approach a certain topic, but I woke up with a couple of good ideas.</p>

<h3>Tip #5: Don't do it for the money</h3>

<p>I have made some money off of <em>jQuery UI in Action</em>, but from an $/hour perspective, I would've been far better doing freelance work, or possibly working at the local McDonald's. I think it's fairly common knowledge that tech authors don't make a whole lot of money, so I'm guessing that doesn't surprise you, but I'm actually going to make a somewhat different point.</p>

<p>Even if tech books paid exorbitant royalties I still think it would be a bad idea to write just for the money. In my opinion you should have some personal reason for wanting to write, for putting yourself through the excruciating process that is producing a tech book. If you don't have something pushing you to continue writing you're likely going to 1) give up, 2) regret the experience, or 3) both.</p>

<p>That being said there are several good non-financial reasons to write a book: career advancement, notoriety, industry status, and the satisfaction associated with teaching others are a few that come to mind. I'll share my personal motivation to give you a better idea of what I mean.</p>

<h2>Why I wrote a book</h2>

<p>My primary reason for writing <em>jQuery UI in Action</em> was to get what I know about jQuery UI down on paper. I would use the term memoir, but I'm not dying, and I'm still working with jQuery UI, so it doesn't fit. But you get the idea.</p>

<p style="float: right; width: 300px; margin: 0 0 1em 1em;">
    <img src="http://tjvantoll.com/images/posts/2014-12-29/usage-stats.png" alt="jQuery UI usage statisics" style="max-height: 400px;">
    <br>
    <i>jQuery UI's usage statistics as of December 2014—~15% of the top million sites!</i>
</p>


<p>jQuery UI is no longer hip; it's no longer sexy; but it's an incredibly robust, extensible, well documented, and accessible library that is used in an astounding number of applications—including a number of mine. I've been involved with jQuery and jQuery UI in some fashion for about six years now. I've went from an overenthusiastic user, to a community member, to a contributor, to a team member, to someone that has been fortunate enough to get to know the people behind code. It's a project that I'm proud to say I'm associated with.</p>

<p>jQuery UI has a lot of good 101-level material scattered throughout the web, but nothing that I felt did the library justice. I also felt that I was in a unique position—as a team member and tech writer—to make the guide I wanted to exist a reality.</p>

<p>My desire to share this information is what gave me the motivation to keep going. If I set out to write a 101-level book on jQuery UI I would've lost the desire to write by week three.</p>

<p>To me motivation was everything. There were <em>many</em> nights that I had no desire to write but had to find a way to write a few pages. People frequently ask me if I'll write another book, and my answer is that I need a topic compelling enough to spend a year of my life on—something that I want to write about bad enough to put myself through the process again.</p>

<p>I'm sure there is a dollar amount that would give me enough motivation, and who knows, after <em>jQuery UI in Action</em> becomes the next <em>Fifty Shades of Grey</em> maybe I'll take all of this back.</p>

<h2>Unexpected perks to writing a book</h2>

<p>There are some other non-financial benefits to writing a book that I hadn't really thought much of. First of all, getting a book in the mail with your name on it in the mail is a pretty amazing experience.</p>

<p style="float: right; width: 300px; margin: 0 0 1em 1em;">
    <img src="http://tjvantoll.com/images/posts/2014-12-29/print-book.jpg" alt="jQuery UI in Action—the physical book" style="max-height: 400px;">
    <br>
    <i>I can't lie, holding a copy of your own book is pretty damn cool.</i>
</p>


<p>An even cooler, and somewhat surreal moment happened when <a href="https://twitter.com/tjvantoll/status/521996479314296832">Amazon sent me an email that recommended my own book to me</a>. It was also cool when I <a href="https://twitter.com/tjvantoll/status/536549375670231040">randomly discovered that <em>jQuery UI in Action</em> had four 5-star reviews on its Amazon page</a></p>

<p>But the biggest unexpected perk for me was learning to be a better writer. Manning has a lot of really smart editors—people that produce books for a living. Over the last year and a half I've learned about the best way to structure content, how to teach through writing effectively, how to attract a potential reader's interest, and ways to hold a reader's attention.</p>

<p>I've learned a lot about grammar that I'm pretty sure they didn't teach me in high school. I now know what en and em dashes are and how to use them. I know that you can use <code>Option</code> + <code>Shift</code> + <code>-</code> to type an em dash on a Mac. I know what an Oxford comma is and why I don't like people that omit them. I have a stance on open grammar style issues, like whether to capitalize complete sentences after a colon and whether to place spaces around em dashes (nope on both, by the way).</p>

<p>I'm certainly not a grammar expert, and I definitely don't feel like a professional writer, but I'm far more knowledgeable than I was when I started, and that's kind of cool. Even if you're a coder, writing effectively is still an incredibly valuable skill—even if you're just using it to argue for tabs over spaces in a GitHub comment.</p>

<h2>Wrapping Up</h2>

<p>I'm not sure I have a concise or coherent way of summing all of this up. I warned you there would be rambling and hopefully I didn't disappoint. If for some reason you enjoyed this you may enjoy <a href="http://tjvantoll.com/jquery-ui-in-action.html">reading <em>jQuery UI in Action</em></a>. If you <em>have</em> read and enjoyed <em>jQuery UI in Action</em>, I'd love a <a href="http://www.amazon.com/jQuery-UI-Action-T-VanToll/dp/1617291935/">review on Amazon</a>. It's amazing how much seeing a positive review can put a smile on my face. Having gone through the process myself I'm making a concerted effort to leave positive reviews on books I've enjoyed reading—tech books and otherwise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A jQuery UI Vertical Tabs Extension]]></title>
    <link href="http://tjvantoll.com/2014/07/04/a-jquery-ui-vertical-tabs-extension/"/>
    <updated>2014-07-04T10:13:00-04:00</updated>
    <id>http://tjvantoll.com/2014/07/04/a-jquery-ui-vertical-tabs-extension</id>
    <content type="html"><![CDATA[<p>The single coolest thing in jQuery UI is the <a href="http://learn.jquery.com/jquery-ui/widget-factory/extending-widgets/">extension mechanism</a> built into the <a href="http://api.jqueryui.com/jquery.widget/">widget factory</a>. In my <a href="http://tjvantoll.com/jquery-ui-in-action.html">upcoming book</a> on jQuery UI I devote an entire chapter to building extensions, and now that the book is <em>mostly</em> done, I want to publish some of the extensions I built for the world to use.</p>

<p>The first of these is an extension to display a <a href="http://jqueryui.com/tabs/">jQuery UI tabs widget</a> vertically. The extension is simple: it adds a single <code>orientation</code> option that you can set to <code>"horizontal"</code> or <code>"vertical"</code>. Here it is in action:</p>

<p><div class="code_example"><h6>jQuery UI Vertical Tabs Extension<a href="/demos/2014-07-04/index.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 325px;" frameborder="0" src="/demos/2014-07-04/index.html"></iframe></div></p>

<p>The extension <a href="https://github.com/tjvantoll/jquery-ui-vertical-tabs#amd-usage">supports AMD usage</a>, including <a href="http://learn.jquery.com/jquery-ui/environments/amd/">the new AMD modules introduced in jQuery UI 1.11</a>. If you're a Bower user, you can install the extension with <code>bower install jquery-ui-vertical-tabs</code>.</p>

<p>Please <a href="https://github.com/tjvantoll/jquery-ui-vertical-tabs">check out the extension on GitHub</a>. Try it; report issues; and star it if you like it. The extension is released under the MIT license, so it use it in any project you'd like. I'll have more of these coming in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a jQuery UI Dialog with a Submit Button]]></title>
    <link href="http://tjvantoll.com/2013/07/10/creating-a-jquery-ui-dialog-with-a-submit-button/"/>
    <updated>2013-07-10T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2013/07/10/creating-a-jquery-ui-dialog-with-a-submit-button</id>
    <content type="html"><![CDATA[<p>Say you have the following submittable <code>&lt;form&gt;</code>:</p>

<p>``` html
<form id="myForm" action="http://google.com"></p>

<pre><code>&lt;label for="search"&gt;Search For:&lt;/label&gt;
&lt;input type="text" id="search" name="q"&gt;
&lt;button type="submit"&gt;Find&lt;/button&gt;
</code></pre>

<p></form>
```</p>

<p>And you want to show the form in a jQuery UI dialog. You can do that with the code below:</p>

<p>``` javascript Turning a form into a dialog
$( "form" ).dialog({</p>

<pre><code>open: function() {
    // On open, hide the original submit button
    $( this ).find( "[type=submit]" ).hide();
},
buttons: [
    {
        text: "Find",
        click: $.noop,
        type: "submit"
    },
    {
        text: "Close",
        click: function() {
            $( this ).dialog( "close" );
        }
    }
]
</code></pre>

<p>});
```</p>

<p>Which looks like this:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-07-10/form-dialog.png" alt="Display of the form within a jQuery UI dialog"></p>

<h3>The Problem</h3>

<p>There's one problem with this - the "Find" button doesn't work. Because of the generated structure of a jQuery UI dialog, the buttons are not within the <code>&lt;form&gt;</code> itself. Therefore, the buttons are not associated with the <code>&lt;form&gt;</code>. You can see the structure below:</p>

<!-- more -->


<p><img src="http://tjvantoll.com/images/posts/2013-07-10/markup.png" alt="Markup of a UI dialog showing the the buttons are not children of the content."></p>

<p>Note that the <code>&lt;button type="submit"&gt;</code> is not within the <code>&lt;form&gt;</code>.</p>

<h3>Solution</h3>

<p>There are a few ways we can work around this. One is avoid the <a href="http://api.jqueryui.com/dialog/#option-buttons">buttons option</a> and leave the original submit button in place. This works, but you lose the formatted display.</p>

<h3>Explicit Click Handler</h3>

<p>Another solution is to add a <code>click</code> handler to the button that submits the form:</p>

<p>``` js Using a Click Handler to Submit the Form
var form = $( "form" ).dialog({</p>

<pre><code>...
buttons: [
    {
        text: "Find",
        click: function() {
            form.submit();
        }
    }
    ...
]
</code></pre>

<p>});
```</p>

<p>This works, but you lose the browsers <a href="/2013/01/01/enter-should-submit-forms-stop-messing-with-that/">browser's default enter key handling</a>. Therefore it has to be replicated as well:</p>

<p>``` javascript Adding Enter Key Handling
var form = $( "form" ).dialog({ ... });
form.on( "keypress", "input[type=text]", function( event ) {</p>

<pre><code>if ( event.keyCode == 13 ) {
    form.submit();
}
</code></pre>

<p>});
```</p>

<h4>Form Attribute</h4>

<p>An elegant solution to this problem is to use HTML5's new <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-form">form attribute</a>. The attribute allows you to associate a <code>&lt;form&gt;</code> with a <code>&lt;button&gt;</code>, even if the <code>&lt;button&gt;</code> is not a descendant of the <code>&lt;form&gt;</code>. It's even smart enough to keep the <a href="/2013/01/01/enter-should-submit-forms-stop-messing-with-that/">browser's default enter key handling</a> in place.</p>

<p>For example here's the example <code>&lt;form&gt;</code> with a sibling (rather than child) submit button:</p>

<p>``` html
<form id="myForm" action="http://google.com"></p>

<pre><code>&lt;label for="search"&gt;Search For:&lt;/label&gt;
&lt;input type="text" id="search" name="q"&gt;
</code></pre>

<p></form>
<button type="submit" form="myForm">Find</button>
```</p>

<p>The <code>&lt;button&gt;</code> is outside of the <code>&lt;form&gt;</code>, but because its <code>form</code> attribute is equal to the <code>&lt;form&gt;</code>'s <code>id</code>, the <code>&lt;button&gt;</code> will submit the <code>&lt;form&gt;</code> regardless.</p>

<h4>Using the Form Attribute on a Dialog</h4>

<p>To add this attribute to the dialog version, we'll pass <code>form: "myForm"</code> into the <code>buttons</code> option for the Find button:</p>

<p>``` html Turning a form into a dialog
<form id="myForm" action="http://google.com"></p>

<pre><code>&lt;label for="search"&gt;Search For:&lt;/label&gt;
&lt;input type="text" id="search" name="q"&gt;
&lt;button type="submit"&gt;Find&lt;/button&gt;
</code></pre>

<p></form></p>

<script>
    $( "form" ).dialog({
        open: function() {
            // On open, hide the original submit button
            $( this ).find( "[type=submit]" ).hide();
        },
        buttons: [
            {
                text: "Find",
                click: $.noop,
                type: "submit",
                form: "myForm" // <-- Make the association
            },
            {
                text: "Close",
                click: function() {
                    $( this ).dialog( "close" );
                }
            }
        ]
    });
</script>


<p>```</p>

<p><a href="/demos/2013-07-10/form.html">Live Example</a></p>

<h3>Support</h3>

<p>The <code>form</code> attribute is implemented in Firefox, Chrome, Safari 5.1+, and Opera, HOWEVER, IE (as of version 10) still does not support the attribute.</p>

<p>Because the form attribute is so handy here, I wrote a polyfill that adds support in browsers that don't support it natively: <a href="https://gist.github.com/tjvantoll/5911571">https://gist.github.com/tjvantoll/5911571</a>. The source is below:</p>

<p>``` javascript
/<em>*
 * The form attribute can be used to associate a submit button with a form, even
 * if the button is not a child of the <form> itself.
 *
 * This polyfill uses a support check taken from Modernizr and polyfills the
 * functionality using jQuery.
 </em>/
(function() {</p>

<pre><code>// Via Modernizr
function formAttributeSupport() {
    var form = document.createElement( "form" ),
        input = document.createElement( "input" ),
        div = document.createElement( "div" ),
        id = "formtest"+ ( new Date().getTime() ),
        attr,
        bool = false;

        form.id = id;

    // IE6/7 confuses the form idl attribute and the form content attribute
    if ( document.createAttribute ) {
        attr = document.createAttribute("form");
        attr.nodeValue = id;
        input.setAttributeNode(attr);
        div.appendChild(form);
        div.appendChild(input);

        document.documentElement.appendChild(div);

        bool = form.elements.length === 1 &amp;&amp; input.form == form;

        div.parentNode.removeChild(div);
    }

    return bool;
};

if ( !formAttributeSupport() ) {
    $( document )
        .on( "click", "[type=submit][form]", function( event ) {
            event.preventDefault();
            var formId = $( this ).attr( "form" ),
            $form = $( "#" + formId ).submit();
        })
        .on( "keypress", "form input", function( event ) {
            var $form;
            if ( event.keyCode == 13 ) {
                $form = $( this ).parents( "form" );
                if ( $form.find( "[type=submit]" ).length == 0 &amp;&amp;
                    $( "[type=submit][form=" + $( this ).attr( "form" ) + "]" ).length &gt; 0 ) {
                    $form.submit();
                }
            }
        });
}
</code></pre>

<p>}());
```</p>

<p>This can be included anywhere on the page after jQuery is included.</p>

<p>Note that this polyfill only attempts to add support for the <code>form</code> attribute on submit buttons. The <code>form</code> attribute can also be applied to other form elements such as <code>&lt;input&gt;</code>s, <code>&lt;select&gt;</code>s, and <code>&lt;textarea&gt;</code>s, but that is beyond the scope of this script.</p>

<p>If you encounter any issues with this polyfill let me know in the comments.</p>

<h3>Conclusion</h3>

<p>If you need a dialog with a submit button the easiest solution is to add a <code>click</code> handler that manually submits the form. While this is not ideal, it'll work everywhere with no extra effort. Just make sure that you add Enter key handling to text inputs within the <code>&lt;form&gt;</code>.</p>

<p>Long term the <code>form</code> attribute is the solution to this problem. You can try it today as long as you're aware that you need to polyfill for IE support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Showing a Resize Icon on a jQuery UI Dialog]]></title>
    <link href="http://tjvantoll.com/2013/05/28/showing-a-resize-icon-on-a-jquery-ui-dialog/"/>
    <updated>2013-05-28T21:09:00-04:00</updated>
    <id>http://tjvantoll.com/2013/05/28/showing-a-resize-icon-on-a-jquery-ui-dialog</id>
    <content type="html"><![CDATA[<p>Upon <a href="http://jqueryui.com/upgrade-guide/1.10/">upgrading to jQuery UI 1.10</a> you might notice a visual change to the dialog widget - the resize icon no longer displays by default:</p>

<p>Default dialog display in 1.9:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-05-28/dialog-1.9.png" alt="Default display of jQuery UI's dialog in version 1.9"></p>

<p>Default dialog display in 1.10:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-05-28/dialog-1.10.png" alt="Default display of jQuery UI's dialog in version 1.10"></p>

<!-- more -->


<p>The dialog is still resizable, the icon is just not displayed anymore. The change was made because when a dialog contains scrolling content, the scrollbar becomes very difficult to use when the resize icon is present, especially in Windows browsers (see <a href="http://bugs.jqueryui.com/ticket/4575">bug #4575</a>).</p>

<p>The image below is of a version 1.9 dialog in IE9, note how the down arrow of the scrollbar and the resize icon are essentially on top of each other:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-05-28/ie9-dialog.png" alt="Display of a scrolling jQuery UI dialog in IE9."></p>

<h3>Adding the Resize Icon Back</h3>

<p>To get the icon back, you have to override the rules that position the icon:</p>

<p>``` css
.ui-dialog .ui-resizable-se {</p>

<pre><code>width: 14px;
height: 14px;
right: 3px;
bottom: 3px;
background-position: -80px -224px;
</code></pre>

<p>}
```</p>

<p>This will display as follows:</p>

<p><div class="code_example"><h6>Dialog with a Resizable Icon<a href="/demos/2013-05-28/dialog.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 300px;" frameborder="0" src="/demos/2013-05-28/dialog.html"></iframe></div></p>

<p>Remember that there is a reason the icon was removed from the default dialog. If you have scrolling dialogs, you should not add the icon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using jQuery UI Tabs with the &lt;base&gt; Tag]]></title>
    <link href="http://tjvantoll.com/2013/02/17/using-jquery-ui-tabs-with-the-base-tag/"/>
    <updated>2013-02-17T21:14:00-05:00</updated>
    <id>http://tjvantoll.com/2013/02/17/using-jquery-ui-tabs-with-the-base-tag</id>
    <content type="html"><![CDATA[<p>As there have been <a href="http://bugs.jqueryui.com/ticket/7822">numerous bug submissions</a> for this, I feel the need to explain how to properly use <a href="http://jqueryui.com/tabs">jQuery UI's tab widget</a> with a <code>&lt;base&gt;</code> tag.  Let's start with what the <code>&lt;base&gt;</code> tag is intended for.</p>

<h3>The &lt;base&gt; Element</h3>

<p><a href="https://developer.mozilla.org/en-US/docs/HTML/Element/base">Per MDN</a> the <code>&lt;base&gt;</code> element specifies the base URL to use for all relative URLs contained within a document.</p>

<!--more-->


<p>Consider the following example:</p>

<p><code>html
&lt;base href="http://foo.com"&gt;
&lt;a href="bar.html"&gt;Bar&lt;/a&gt;
</code></p>

<p>Let's assume this HTML appears on this domain (<code>http://tjvantoll.com</code>).  When the link is clicked on, the browser will navigate to <code>http://foo.com/bar.html</code> rather than <code>http://tjvantoll.com/bar.html</code>.</p>

<p>It's important to note that hash links are also relative to the specified base.  Therefore on the following:</p>

<p><code>html
&lt;base href="http://foo.com"&gt;
&lt;a href="#bar"&gt;Bar&lt;/a&gt;
</code></p>

<p>When the link is click on, the browser will navigate to <code>http://foo.com#bar</code> and NOT <code>http://tjvantoll.com#bar</code>.  This detail is important; it's the root cause of confusion when using a <code>&lt;base&gt;</code> tag with the tabs widget.</p>

<h3>jQuery UI Tabs</h3>

<p>Here is the intended HTML structure to be used by the tabs widget:</p>

<p>``` html</p>

<div id="tabs">
    <ul>
        <li><a href="#tab-1">One</a></li>
        <li><a href="#tab-2">Two</a></li>
    </ul>
    <div id="tab-1">Contents of tab one.</div>
    <div id="tab-2">Contents of tab two.</div>
</div>




<script>$( "#tabs" ).tabs();</script>


<p>```</p>

<p>Which produces the following:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-02-17/tabs.png" alt="Default look of jQuery UI's tabs"></p>

<p>In this example both links begin with a hash (<code>#</code>), indicating that their content is located on the current page.  If that is not the case, the tabs widget will retrieve the tab's contents server side via an XHR call.  Consider the following:</p>

<p>``` html</p>

<div id="tabs">
    <ul>
        <li><a href="#local">Local</a></li>
        <li><a href="external">External</a></li>
    </ul>
    <div id="local">Contents of the local tab.</div>
</div>




<script>$( "#tabs" ).tabs();</script>


<p>```</p>

<p>Here the local link will work as in the previous example - when it is clicked on, the tabs widget will simply display the contents of the <code>#local</code> container.</p>

<p>However, when the external link is clicked, the tabs widget will perform an XHR request to retrieve the contents.  Assuming this HTML is located on <code>http://tjvantoll.com</code>, an XHR GET will be performed for <code>http://tjvantoll.com/external</code>.  The contents returned are dynamically added to the DOM and displayed.</p>

<p>The markup pattern used here is no accident.  Consider a user that views this HTML without JavaScript enabled.  The local link will move the user's focus to the <code>#local</code> container on <code>http://tjvantoll.com</code>.  The external link will do a full page navigation to <code>http://tjvantoll.com/external</code>.  The markup is designed to enhance the default browser behavior and to degrade gracefully when JavaScript isn't present.</p>

<h3>&lt;base&gt; + tabs</h3>

<p>Given the descriptions above, the behavior of the <code>&lt;base&gt;</code> tag with the tabs widget shouldn't be surprising.  Here's the first example given for the tabs widget again.  This time, a <code>&lt;base&gt;</code> tag to <code>http://foo.com</code> has been added:</p>

<p>``` html
<base href="http://foo.com"></p>

<div id="tabs">
    <ul>
        <li><a href="#tab-1">One</a></li>
        <li><a href="#tab-2">Two</a></li>
    </ul>
    <div id="tab-1">Contents of tab one.</div>
    <div id="tab-2">Contents of tab two.</div>
</div>




<script>$( "#tabs" ).tabs();</script>


<p>```</p>

<p>Let's again assume this HTML is located on <code>http://tjvantoll.com</code>.  Because of the <code>&lt;base&gt;</code> tag, the links used in the tabs widget are actually external links to <code>http://foo.com</code>.  Therefore, upon instantiation, the tabs widget will attempt to load the contents of the first tab from <code>http://foo.com</code>.</p>

<p>If you are having trouble understanding, try the example above with JavaScript disabled.  When the first link is clicked on, the browser will navigate to <code>http://foo.com</code> regardless of the domain the page is viewed on.</p>

<h3>Fixes</h3>

<p>From the numerous bug reports, it seems that a lot of people have applications with <code>&lt;base&gt;</code> tags and want hashed links to be relative to the current page.  How can you fix your application?</p>

<p>1) <strong>Remove the <code>&lt;base&gt;</code> tag.</strong>  It's that simple.  After the removal, the tabs widget will never attempt to load external content from any links with leading hashes.  Of course, this approach requires changing any other links on the page that are dependent on the <code>&lt;base&gt;</code> tag's leading path.</p>

<p>2) <strong>Provide full URLs on links used to build the tabs widget.</strong>  If approach #1 isn't feasible, you can also provide a fully qualified URL in the links used to build the tabs widget.  Here's the earlier example modified to show this approach:</p>

<p>``` html
<base href="http://foo.com"></p>

<div id="tabs">
    <ul>
        <li><a href="http://tjvantoll.com#tab-1">One</a></li>
        <li><a href="http://tjvantoll.com#tab-2">Two</a></li>
    </ul>
    <div id="tab-1">Contents of tab one.</div>
    <div id="tab-2">Contents of tab two.</div>
</div>




<script>$( "#tabs" ).tabs();</script>


<p>```</p>

<p>Since the links in the tabs are now fully qualified paths to the current page, the tabs widget will not perform a request to retrieve external content.</p>

<p>A more robust way of handling this would be to inject the current path server side.  For example the following PHP could be used to inject the link used in the first tab above:</p>

<p><code>'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] . '#tab-1'</code></p>

<p>3) <strong>Add the full URLs via JavaScript.</strong></p>

<div class="warning" style="display: block;">
    This is not the right way to fix this problem.  I'm only providing this because I realize the realities of working on enormous projects or projects where you do not have full control over the HTML.
</div>


<p>This is the same approach as #2, but the appropriate links are changed in JavaScript instead of forcing you to fix every link manually.</p>

<p>The hack is shown below, simply call the <code>makeTabs</code> function with the selector used to create the tabs widget:</p>

<p>``` javascript
var makeTabs = function(selector) {</p>

<pre><code>$( selector )
    .find( "ul a" ).each( function() {
        var href = $( this ).attr( "href" ),
            newHref = window.location.protocol + '//' + window.location.hostname + 
                window.location.pathname + href;

        if ( href.indexOf( "#" ) == 0 ) {
            $( this ).attr( "href", newHref );
        }
    })
$( selector ).tabs();
</code></pre>

<p>};</p>

<p>makeTabs( "#tabs" );
```</p>

<p>As noted by the warning box, you should really fix this the right way.  But desperate times call for desperate measures.  You've been warned.</p>

<h3>The End</h3>

<p>Hopefully if you didn't understand how to use the <code>&lt;base&gt;</code> tag and jQuery UI's tab widget together you do now.  If you are still having issues after reading through this please let me know in the comments.</p>

<h3>Update (March 6th, 2013)</h3>

<p>Per comments from rubensa, I've removed <code>window.location.origin</code> from my JavaScript workaround since it's a WebKit only property.  He also pointed out that if you might need to explicitly include a port number in the URL if you're using it in your local development.</p>
]]></content>
  </entry>
  
</feed>
