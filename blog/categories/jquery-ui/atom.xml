<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQuery UI | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/jquery-ui/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2013-05-28T21:39:01-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Showing a Resize Icon on a jQuery UI Dialog]]></title>
    <link href="http://tjvantoll.com/2013/05/28/showing-a-resize-icon-on-a-jquery-ui-dialog/"/>
    <updated>2013-05-28T21:09:00-04:00</updated>
    <id>http://tjvantoll.com/2013/05/28/showing-a-resize-icon-on-a-jquery-ui-dialog</id>
    <content type="html"><![CDATA[<p>Upon <a href="http://jqueryui.com/upgrade-guide/1.10/">upgrading to jQuery UI 1.10</a> you might notice a visual change to the dialog widget - the resize icon no longer displays by default:</p>

<p>Default dialog display in 1.9:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-05-28/dialog-1.9.png" alt="Default display of jQuery UI's dialog in version 1.9"></p>

<p>Default dialog display in 1.10:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-05-28/dialog-1.10.png" alt="Default display of jQuery UI's dialog in version 1.10"></p>

<p>The dialog is still resizable, the icon is just not displayed anymore. The change was made because when a dialog contains scrolling content, the scrollbar becomes very difficult to use when the resize icon is present, especially in Windows browsers.</p>

<p>The image below is of a version 1.9 dialog in IE9, note how the down arrow of the scrollbar and the resize icon are essentially on top of each other:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-05-28/ie9-dialog.png" alt="Display of a scrolling jQuery UI dialog in IE9."></p>

<h3>Adding the Resize Icon Back</h3>

<p>To get the icon back you have to override the rules that position the icon:</p>

<p>``` css
.ui-dialog .ui-resizable-se {</p>

<pre><code>width: 14px;
height: 14px;
right: 3px;
bottom: 3px;
background-position: -80px -224px;
</code></pre>

<p>}
```</p>

<p>This will display as follows:</p>

<p><div class="code_example"><h6>Dialog with a Resizable Icon<a href="/demos/2013-05-28/dialog.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 300px;" frameborder="0" src="/demos/2013-05-28/dialog.html"></iframe></div></p>

<p>Remember that there is a reason the icon was removed from the default dialog. Therefore, if you have scrolling dialogs you should not add the icon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using jQuery UI Tabs with the &lt;base&gt; Tag]]></title>
    <link href="http://tjvantoll.com/2013/02/17/using-jquery-ui-tabs-with-the-base-tag/"/>
    <updated>2013-02-17T21:14:00-05:00</updated>
    <id>http://tjvantoll.com/2013/02/17/using-jquery-ui-tabs-with-the-base-tag</id>
    <content type="html"><![CDATA[<p>As there have been <a href="http://bugs.jqueryui.com/ticket/7822">numerous bug submissions</a> for this, I feel the need to explain how to properly use <a href="http://jqueryui.com/tabs">jQuery UI's tab widget</a> with a <code>&lt;base&gt;</code> tag.  Let's start with what the <code>&lt;base&gt;</code> tag is intended for.</p>

<h3>The &lt;base&gt; Element</h3>

<p><a href="https://developer.mozilla.org/en-US/docs/HTML/Element/base">Per MDN</a> the <code>&lt;base&gt;</code> element specifies the base URL to use for all relative URLs contained within a document.</p>

<!--more-->


<p>Consider the following example:</p>

<p><code>html
&lt;base href="http://foo.com"&gt;
&lt;a href="bar.html"&gt;Bar&lt;/a&gt;
</code></p>

<p>Let's assume this HTML appears on this domain (<code>http://tjvantoll.com</code>).  When the link is clicked on, the browser will navigate to <code>http://foo.com/bar.html</code> rather than <code>http://tjvantoll.com/bar.html</code>.</p>

<p>It's important to note that hash links are also relative to the specified base.  Therefore on the following:</p>

<p><code>html
&lt;base href="http://foo.com"&gt;
&lt;a href="#bar"&gt;Bar&lt;/a&gt;
</code></p>

<p>When the link is click on, the browser will navigate to <code>http://foo.com#bar</code> and NOT <code>http://tjvantoll.com#bar</code>.  This detail is important; it's the root cause of confusion when using a <code>&lt;base&gt;</code> tag with the tabs widget.</p>

<h3>jQuery UI Tabs</h3>

<p>Here is the intended HTML structure to be used by the tabs widget:</p>

<p>``` html</p>

<div id="tabs">
    <ul>
        <li><a href="#tab-1">One</a></li>
        <li><a href="#tab-2">Two</a></li>
    </ul>
    <div id="tab-1">Contents of tab one.</div>
    <div id="tab-2">Contents of tab two.</div>
</div>




<script>$( "#tabs" ).tabs();</script>


<p>```</p>

<p>Which produces the following:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-02-17/tabs.png" alt="Default look of jQuery UI's tabs"></p>

<p>In this example both links begin with a hash (<code>#</code>), indicating that their content is located on the current page.  If that is not the case, the tabs widget will retrieve the tab's contents server side via an XHR call.  Consider the following:</p>

<p>``` html</p>

<div id="tabs">
    <ul>
        <li><a href="#local">Local</a></li>
        <li><a href="external">External</a></li>
    </ul>
    <div id="local">Contents of the local tab.</div>
</div>




<script>$( "#tabs" ).tabs();</script>


<p>```</p>

<p>Here the local link will work as in the previous example - when it is clicked on, the tabs widget will simply display the contents of the <code>#local</code> container.</p>

<p>However, when the external link is clicked, the tabs widget will perform an XHR request to retrieve the contents.  Assuming this HTML is located on <code>http://tjvantoll.com</code>, an XHR GET will be performed for <code>http://tjvantoll.com/external</code>.  The contents returned are dynamically added to the DOM and displayed.</p>

<p>The markup pattern used here is no accident.  Consider a user that views this HTML without JavaScript enabled.  The local link will move the user's focus to the <code>#local</code> container on <code>http://tjvantoll.com</code>.  The external link will do a full page navigation to <code>http://tjvantoll.com/external</code>.  The markup is designed to enhance the default browser behavior and to degrade gracefully when JavaScript isn't present.</p>

<h3>&lt;base&gt; + tabs</h3>

<p>Given the descriptions above, the behavior of the <code>&lt;base&gt;</code> tag with the tabs widget shouldn't be surprising.  Here's the first example given for the tabs widget again.  This time, a <code>&lt;base&gt;</code> tag to <code>http://foo.com</code> has been added:</p>

<p>``` html
<base href="http://foo.com"></p>

<div id="tabs">
    <ul>
        <li><a href="#tab-1">One</a></li>
        <li><a href="#tab-2">Two</a></li>
    </ul>
    <div id="tab-1">Contents of tab one.</div>
    <div id="tab-2">Contents of tab two.</div>
</div>




<script>$( "#tabs" ).tabs();</script>


<p>```</p>

<p>Let's again assume this HTML is located on <code>http://tjvantoll.com</code>.  Because of the <code>&lt;base&gt;</code> tag, the links used in the tabs widget are actually external links to <code>http://foo.com</code>.  Therefore, upon instantiation, the tabs widget will attempt to load the contents of the first tab from <code>http://foo.com</code>.</p>

<p>If you are having trouble understanding, try the example above with JavaScript disabled.  When the first link is clicked on, the browser will navigate to <code>http://foo.com</code> regardless of the domain the page is viewed on.</p>

<h3>Fixes</h3>

<p>From the numerous bug reports, it seems that a lot of people have applications with <code>&lt;base&gt;</code> tags and want hashed links to be relative to the current page.  How can you fix your application?</p>

<p>1) <strong>Remove the <code>&lt;base&gt;</code> tag.</strong>  It's that simple.  After the removal, the tabs widget will never attempt to load external content from any links with leading hashes.  Of course, this approach requires changing any other links on the page that are dependent on the <code>&lt;base&gt;</code> tag's leading path.</p>

<p>2) <strong>Provide full URLs on links used to build the tabs widget.</strong>  If approach #1 isn't feasible, you can also provide a fully qualified URL in the links used to build the tabs widget.  Here's the earlier example modified to show this approach:</p>

<p>``` html
<base href="http://foo.com"></p>

<div id="tabs">
    <ul>
        <li><a href="http://tjvantoll.com#tab-1">One</a></li>
        <li><a href="http://tjvantoll.com#tab-2">Two</a></li>
    </ul>
    <div id="tab-1">Contents of tab one.</div>
    <div id="tab-2">Contents of tab two.</div>
</div>




<script>$( "#tabs" ).tabs();</script>


<p>```</p>

<p>Since the links in the tabs are now fully qualified paths to the current page, the tabs widget will not perform a request to retrieve external content.</p>

<p>A more robust way of handling this would be to inject the current path server side.  For example the following PHP could be used to inject the link used in the first tab above:</p>

<p><code>'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] . '#tab-1'</code></p>

<p>3) <strong>Add the full URLs via JavaScript.</strong></p>

<div class="warning" style="display: block;">
    This is not the right way to fix this problem.  I'm only providing this because I realize the realities of working on enormous projects or projects where you do not have full control over the HTML.
</div>


<p>This is the same approach as #2, but the appropriate links are changed in JavaScript instead of forcing you to fix every link manually.</p>

<p>The hack is shown below, simply call the <code>makeTabs</code> function with the selector used to create the tabs widget:</p>

<p>``` javascript
var makeTabs = function(selector) {</p>

<pre><code>$( selector )
    .find( "ul a" ).each( function() {
        var href = $( this ).attr( "href" ),
            newHref = window.location.protocol + '//' + window.location.hostname + 
                window.location.pathname + href;

        if ( href.indexOf( "#" ) == 0 ) {
            $( this ).attr( "href", newHref );
        }
    })
$( selector ).tabs();
</code></pre>

<p>};</p>

<p>makeTabs( "#tabs" );
```</p>

<p>As noted by the warning box, you should really fix this the right way.  But desperate times call for desperate measures.  You've been warned.</p>

<h3>The End</h3>

<p>Hopefully if you didn't understand how to use the <code>&lt;base&gt;</code> tag and jQuery UI's tab widget together you do now.  If you are still having issues after reading through this please let me know in the comments.</p>

<h3>Update (March 6th, 2013)</h3>

<p>Per comments from rubensa, I've removed <code>window.location.origin</code> from my JavaScript workaround since it's a WebKit only property.  He also pointed out that if you might need to explicitly include a port number in the URL if you're using it in your local development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Polished Vertical Tabs Interaction with jQuery UI]]></title>
    <link href="http://tjvantoll.com/2012/11/08/creating-a-polished-vertical-tabs-interaction-with-jquery-ui/"/>
    <updated>2012-11-08T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2012/11/08/creating-a-polished-vertical-tabs-interaction-with-jquery-ui</id>
    <content type="html"><![CDATA[<p>The <a href="http://jqueryui.com/tabs/">jQuery UI tabs widget</a> provides a clean way to implement a tabular UI.  Furthermore, the markup used gives you ample hooks to make the tabs visually into what you want them to be.  The docs provide a <a href="http://jqueryui.com/tabs/#vertical">simple demo</a> of how you can give the tabs a vertical orientation, but I thought I'd show how you can use what the framework provides to create something a bit more polished.</p>

<!--more-->


<p>The following CSS will vertically arrange the tabs:</p>

<p>``` css
.ui-tabs.ui-tabs-vertical {</p>

<pre><code>padding: 0;
width: 42em;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-widget-header {</p>

<pre><code>border: none;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav {</p>

<pre><code>float: left;
width: 10em;
background: #CCC;
border-radius: 4px 0 0 4px;
border-right: 1px solid gray;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav li {</p>

<pre><code>clear: left;
width: 100%;
margin: 0.2em 0;
border: 1px solid gray;
border-width: 1px 0 1px 1px;
border-radius: 4px 0 0 4px;
overflow: hidden;
position: relative;
right: -2px;
z-index: 2;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav li a {</p>

<pre><code>display: block;
width: 100%;
padding: 0.6em 1em;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav li a:hover {</p>

<pre><code>cursor: pointer;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav li.ui-tabs-active {</p>

<pre><code>margin-bottom: 0.2em;
padding-bottom: 0;
border-right: 1px solid white;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-nav li:last-child {</p>

<pre><code>margin-bottom: 10px;
</code></pre>

<p>}
.ui-tabs.ui-tabs-vertical .ui-tabs-panel {</p>

<pre><code>float: left;
width: 28em;
border-left: 1px solid gray;
border-radius: 0;
position: relative;
left: -1px;
</code></pre>

<p>}
```</p>

<p>It only relies on a class of <code>ui-tabs-vertical</code> being applied to the elements the <code>tabs</code> widget is created on.</p>

<p><code>javascript
$('#tabs').tabs().addClass('ui-tabs-vertical');
</code></p>

<p>And here's the result:</p>

<p><div class="code_example"><h6>jQuery UI Vertical Tabs<a href="/demos/2012-11-08/verticalTabs.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 275px;" frameborder="0" src="/demos/2012-11-08/verticalTabs.html"></iframe></div></p>

<p>Feel free to use this or modify it to your liking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Pointers to jQuery UI Tooltips]]></title>
    <link href="http://tjvantoll.com/2012/10/24/adding-pointers-to-jquery-ui-tooltips/"/>
    <updated>2012-10-24T20:58:00-04:00</updated>
    <id>http://tjvantoll.com/2012/10/24/adding-pointers-to-jquery-ui-tooltips</id>
    <content type="html"><![CDATA[<p>The recent <a href="http://jqueryui.com/changelog/1.9.0/">jQuery UI 1.9 release</a> included a new <a href="http://jqueryui.com/tooltip/">tooltip plugin</a> that can be used to create tooltips much like the native tooltips the browser provides.  The difference is that jQuery UI's version are completely customizable.</p>

<p>As such I thought I'd show a quick example of how you can create a pointer from the tooltip to its associated field.  The following will show a pointer tooltip a the text input.  You can change the location of the tooltip using the buttons.</p>

<!--more-->


<p><div class="code_example"><h6>Pointer Tooltip Example<a href="/demos/2012-10-24/pointer.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 300px;" frameborder="0" src="/demos/2012-10-24/pointer.html"></iframe></div>
<a href="http://jsfiddle.net/tj_vantoll/kyBwU">View Demo on jsFiddle</a></p>

<p>So how is this done?</p>

<ul>
<li>The <a href="http://api.jqueryui.com/tooltip/#option-position">position</a> option is used to place the tooltip appropriately around the textbox.  Importantly the <code>collision</code> property is set to <code>none</code>, since, if the tooltip were to be repositioned the arrow would be placed incorrectly.</li>
<li>The pointers themselves are created using using the <code>::after</code> and <code>::before</code> pseudo-elements.  For some more information on the technique and to see some other variations there's an excellent tutorial <a href="http://nicolasgallagher.com/pure-css-speech-bubbles/">here</a>.</li>
<li>Since the <code>::after</code> and <code>::before</code> pseudo-elements are used to create the pointers, IE &lt; 8 users will not see them.  However, they'll simply see the default pointerless tooltip, no harm done. <i>Note: IE8 supports the before/after pseudo-elements but as <code>:before</code> and <code>:after</code> instead of <code>::before</code> and <code>::after</code>. So if you need IE8 support use <code>:before</code> and <code>:after</code>.</i></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using jQuery UI's Slider to Polyfill HTML5's input[type=range]]]></title>
    <link href="http://tjvantoll.com/2012/09/14/using-jquery-ui-slider-to-polyfill-html5-input-type-range/"/>
    <updated>2012-09-14T21:25:00-04:00</updated>
    <id>http://tjvantoll.com/2012/09/14/using-jquery-ui-slider-to-polyfill-html5-input-type-range</id>
    <content type="html"><![CDATA[<p><a href="http://jqueryui.com/demos/slider">jQuery UI's slider plugin</a> looks and behaves much like the browser's native <code>input[type=range]</code> control; therefore it makes an excellent choice for <a href="http://remysharp.com/2010/10/08/what-is-a-polyfill/">polyfilling</a> the native behavior.</p>

<h3>How to do it</h3>

<p>The main issue is that the slider must be built on a block level node, not an <code>&lt;input&gt;</code>.  Therefore you must create another container node (in this case a <code>&lt;div&gt;</code>) to create the slider from then hide the original <code>&lt;input&gt;</code>.</p>

<p>Here's the script that I used.</p>

<!--more-->


<p>``` javascript Polyfill input[type=range] with jQuery UI's Slider
$(function() {</p>

<pre><code>//Determine whether the browser natively supports input[type=range].
//If you're using Modernizr this is equivalent to Modernizr.inputtypes.range
var input = document.createElement('input');
input.setAttribute('type', 'range');
var rangeSupport = input.type != 'text';

if (!rangeSupport) {
    var $input, $slider;

    $('input[type=range]').each(function(index, input) {
        $input = $(input);

        //Create a new div, turn it into a slider, and set its attributes based on
        //the attributes of the input.  If the input doesn't possess those attributes
        //use jQuery UI's defaults.
        $slider = $('&lt;div /&gt;').slider({
            min: parseInt($input.attr('min'), 10) || 0,
            max: parseInt($input.attr('max'), 10) || 100,
            value: parseInt($input.attr('value'), 10) || 0,
            step: parseInt($input.attr('step'), 10) || 1,
            slide: function(event, ui) {
                //Keep the value of the input[type=range] in sync with the slider.
                $(this).prev('input').val(ui.value);
            }
        });

        //Append the slider after the input and hide the input.  The user will only
        //interact with the slider.        
        $input.after($slider).hide();
    });
}
</code></pre>

<p>});
```</p>

<h3>Future</h3>

<p>This approach handles the most common use cases but it isn't perfect.  For example, if you want to disable the <code>&lt;input type="range"&gt;</code> you'll have to disable the slider as well.</p>

<p>There is a <a href="http://bugs.jqueryui.com/ticket/5800">feature request to add support for this natively in the slider plugin</a> itself, but it's been sitting inactive for quite some time now.  Hopefully over time <code>input[type=range]</code> support will become ubiquitous enough that we can drop these workarounds.</p>
]]></content>
  </entry>
  
</feed>
