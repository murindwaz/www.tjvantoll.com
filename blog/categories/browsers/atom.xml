<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Browsers | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/browsers/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2013-02-10T21:07:05-05:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stop Messing with the Browser's Default Focus outline]]></title>
    <link href="http://tjvantoll.com/2013/01/28/stop-messing-with-the-browsers-default-focus-outline/"/>
    <updated>2013-01-28T20:57:00-05:00</updated>
    <id>http://tjvantoll.com/2013/01/28/stop-messing-with-the-browsers-default-focus-outline</id>
    <content type="html"><![CDATA[<p>This is the latest in my series of accessibility best practices after getting frustrated with using a keyboard on the internet.  Last time I talked about <a href="/2013/01/01/enter-should-submit-forms-stop-messing-with-that/">enter submitting forms</a>, this time I'm going to explain why removing the browser's default focus <code>outline</code> is a bad idea.</p>

<h3>Focus Rings</h3>

<p>All browsers have a default value they apply to the currently focused item.  For example Chrome on OS X uses the following:</p>

<p>``` css
:focus {</p>

<pre><code>/* -webkit-focus-ring-color = '#5B9DD9' */
outline: -webkit-focus-ring-color auto 5px;
</code></pre>

<p>}
```</p>

<p>Firefox uses a <code>1px dotted #212121</code> outline, other browser use other values.  The focus ring looks like this for Chrome on OS X:</p>

<p><img src="/images/posts/2013-01-28/default.png" title="Default Focus Ring in Chrome on OS X" alt="Default Focus Ring in Chrome on OS X" /></p>

<p>Keyboard users <strong>depend</strong> on this <code>outline</code> to determine where they are on the page.  I cannot stress <strong>depend</strong> enough, without the <code>outline</code> you have no idea where you are.  Don't believe me?  Go to <a href="http://www.cnn.com">cnn.com</a> right now.  Hit tab a few times and try to figure out where the hell you are on the page.</p>

<p>The <code>outline</code> <em>can</em> be removed with the following:</p>

<p>``` css
:focus {</p>

<pre><code>outline: 0;
/* or */
outline: none;
</code></pre>

<p>}
```</p>

<p>This is obviously bad per the reasoning above.  The HTML5 specification has the following to say about removing the default <code>outline</code>:</p>

<p><blockquote><p>"...if an alternative focusing style isn't made available instead, the page will be significantly less usable for people who primarily navigate pages using a keyboard, or those with reduced vision who use focus outlines to help them navigate the page."</p><footer><strong>HTML5 Specification</strong> <cite><a href='http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#element-level-focus-apis'>www.whatwg.org/specs/web-apps/&hellip;</a></cite></footer></blockquote></p>

<h3>Custom Focus Outlines</h3>

<p>As the spec mentions, you can create your own styling for focused items instead of using the browser's default.  For example the following will change all focused links to white text on a black background:</p>

<p>``` css
:link:focus, :visited:focus {</p>

<pre><code>outline: none;
background-color: black;
color: white;
</code></pre>

<p>}
```</p>

<p>Although this is possible, I would <strong>strongly</strong> recommend simply leaving the default browser <code>outline</code> in place.  Changing the default display messes with a user's expectations, which is a big usability no no.  Furthermore, you need to make sure that whatever alternative you put in is sufficiently identifiable for users with reduced vision.</p>

<h3>Why do People Want it Removed?</h3>

<p>For the <a href="http://jqueryui.com">jQuery UI</a> project we get a <a href="https://github.com/jquery/jquery-ui/pull/898">lot</a> <a href="http://bugs.jqueryui.com/ticket/8959">of</a> <a href="http://bugs.jqueryui.com/ticket/6146">requests</a> to remove the browser default <code>outline</code>s from our widgets.</p>

<p>  The most recent tickets have come from the <a href="http://jqueryui.com/slider">slider</a> and <a href="http://jqueryui.com/tabs">tabs</a> widgets.  This is what they look like on the latest Chrome on OS X:</p>

<p><img src="/images/posts/2013-01-28/slider.png" title="Focus ring on jQuery UI slider" alt="Focus ring on jQuery UI slider" />
<img src="/images/posts/2013-01-28/tabs.png" title="Focus ring on jQuery UI tabs" alt="Focus ring on jQuery UI tabs" /></p>

<p>Some people find this unsightly.  Others are thrown off by the fact that the display varies on different browsers / operating systems.  While these concerns are reasonable, they do not outweigh the importance of the <code>outline</code> for keyboard users and users with reduced vision.</p>

<p>jQuery UI does nothing to alter the browser's default <code>outline</code> on these widgets and I encourage others to do the same.</p>

<h3>CSS Reset</h3>

<p>Unfortunately one of the reasons much of the internet removes the default focus ring is because the <a href="http://meyerweb.com/eric/tools/css/reset/reset200802.css">first version of Eric Meyer's CSS reset</a> included the following:</p>

<p>``` css
/<em> remember to define focus styles! </em>/
:focus {</p>

<pre><code>outline: 0;
</code></pre>

<p>}
```</p>

<p>As you can see it's made abundantly clear that you should define your own focus styles, but most people simply copied and pasted the file without realizing this.</p>

<p>The <a href="http://meyerweb.com/eric/tools/css/reset/index.html">updated version</a> of the CSS reset no longer features this, but sadly it's a bit too late for a lot of sites.</p>

<p>Sigh.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML 5 hidden Attribute Browser Support]]></title>
    <link href="http://tjvantoll.com/2013/01/09/html5-hidden-attribute-browser-support/"/>
    <updated>2013-01-09T21:27:00-05:00</updated>
    <id>http://tjvantoll.com/2013/01/09/html5-hidden-attribute-browser-support</id>
    <content type="html"><![CDATA[<p>I had trouble finding this from a Google search, so I thought I'd list the browser support for the <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#the-hidden-attribute">HTML5 hidden attribute</a> here.</p>

<ul>
<li>Chrome 6+</li>
<li>Firefox 4+</li>
<li>Safari 5.1+</li>
<li>Opera 11+</li>
<li>iOS 5+</li>
<li>Android Browser 4+</li>
</ul>


<p>IE still does not support the <code>hidden</code> attribute as of IE 10.  For any unsupported browser you can easily add support by just including the following CSS:</p>

<p><code>css Polyfiling the hidden attribute.
[hidden] { display: none; }
</code></p>

<p>This will work back to IE6, which doesn't support the <a href="https://developer.mozilla.org/en-US/docs/CSS/Attribute_selectors">attribute selector</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the body Element as a Top Level Container - Is it Safe Yet?]]></title>
    <link href="http://tjvantoll.com/2013/01/05/is-it-safe-to-use-the-body-as-a-top-level-container-yet/"/>
    <updated>2013-01-05T14:21:00-05:00</updated>
    <id>http://tjvantoll.com/2013/01/05/is-it-safe-to-use-the-body-as-a-top-level-container-yet</id>
    <content type="html"><![CDATA[<p>View source on almost any web page and you'll likely see the following:</p>

<p>``` html Common HTML Template
<html></p>

<pre><code>&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
    &lt;div id="wrapper"&gt;
        &lt;!-- All the things --&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>The use of a wrapper or container <code>div</code> around the page is fairly universal.  It is commonly used to perform tasks such as centering a page's content or providing a shadow or border to frame it.  But, since the <code>body</code> element is a necessity in the markup, why can't it be styled directly instead?  Why is a wrapper <code>div</code> used?</p>

<p>Historically there have been a number of issues with using the <code>body</code> element as a top level container in old versions of Internet Explorers.  If you're supporting IE >= 8 you're good, but there are some things <a href="#now">you should be aware of</a>.</p>

<!--more-->


<h3>IE 5.5</h3>

<p>To get to the origins of the wrapper <code>div</code> let's go way back.  A pretty common practice is to center the top level container using <code>margin: 0 auto</code>, and this works fine in all browsers... back to IE 5.5.  IE 5.5 did not support <code>auto</code> margins so this approach did not work.</p>

<p>To center the top level container in IE 5.5 you had to make use of <code>text-align: center</code> as such:</p>

<p>``` css Centering the top level container in IE 5.5
body {</p>

<pre><code>text-align: center;
</code></pre>

<p>}</p>

<h1>wrapper {</h1>

<pre><code>width: 1000px;
text-align: left; /* counteract the declaration on body */
</code></pre>

<p>}
```</p>

<p><code>text-align: center</code> <em>should</em> only affect inline elements, but IE 5.5 incorrectly applied it to block elements as well.  (Note: The <code>text-align: center</code> bug was fixed in IE6 standards mode, but the behavior remained in Internet Explorer's quirks mode to this day.)</p>

<h3>IE6</h3>

<p>IE6 implemented <code>auto</code> margins, so <code>margin: 0 auto</code> was now safe to use on the <code>body</code>.  Additionally, IE6 fully supports adding a <code>width</code>, <code>padding</code>, <code>margin</code>, and <code>border</code> to the body element.  Take the following CSS:</p>

<p>``` css
body{</p>

<pre><code>width: 90%;
border: 2px solid red;
background-color: black;
color: white;
padding: 10px;
margin: 0 auto;
</code></pre>

<p>}
```</p>

<p>The layout renders the same in IE6 as it does in the latest version of Chrome (23 as of this writing).</p>

<div style="overflow: hidden;">
    <div style="float: left; width: 49%;">
        <h4>IE6</h4>
        <img title="Styling the body element in IE6" src="http://tjvantoll.com/images/posts/2013-01-05/IE6.png">
    </div>
    <div style="float: right; width: 49%;">
        <h4>Chrome</h4>
        <img title="Styling the body element in Chrome" src="http://tjvantoll.com/images/posts/2013-01-05/Chrome.png">
    </div>
</div>


<p>Believe it or not using the <code>body</code> element as a top level container is actually safe in IE6.</p>

<p><a name="zoom"></a></p>

<h3>IE7</h3>

<p>If there are no issues with IE6 why am I still writing?  IE7 introduced a feature new to Internet Explorer, zoom, and with it came a new bug.</p>

<p>When a <code>margin</code> or <code>width</code> is applied to the <code>body</code> and the user zooms, IE7 incorrectly treats the left edge of the <code>body</code> as the edge of the viewport.  This shift bumps content on the right hand side of the page outside of the screen.  The image below shows the result of a zoomed in window and styled <code>body</code> in IE7.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-01-05/IE7Zoom.png" title="Zooming in IE7" style="max-height: 400px;"></p>

<p>This issue is not present using a wrapper <code>div</code>.</p>

<h3>Beyond IE7</h3>

<p>In my testing beyond IE7 there are no major issues using the <code>body</code> element as a top level container.  There are however a few things to be aware of.</p>

<p><a name="now"></a></p>

<h3>Positioning</h3>

<p>Any absolutely positioned elements will be positioned relative to the viewport rather than the newly placed <code>body</code>.  To fix this set <code>position: relative</code> on the <code>body</code> as such:</p>

<p>``` css Positioning elements relative to the body rather than the viewport
body {</p>

<pre><code>margin: 0 auto;
width: 90%;
position: relative;
</code></pre>

<p>}
```</p>

<h3>Backgrounds</h3>

<p>Backgrounds applied to the <code>body</code> will take up whole page regardless of margins.  Consider the following:</p>

<p>``` css
body {</p>

<pre><code>background: black;
margin: 0 auto;
width: 200px;
</code></pre>

<p>}
```</p>

<p>Here, the background of the entire viewport will be black rather than a centered 200px block.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-01-05/background-before.png" title="background on a body element" style="max-height: 300px;"></p>

<p>Luckily, this can be worked around by applying a <code>background</code> on the <code>html</code> element.</p>

<p>``` css
html {</p>

<pre><code>background: white;
</code></pre>

<p>}
body {</p>

<pre><code>background: black;
margin: 0 auto;
width: 200px;
</code></pre>

<p>}
```</p>

<p>Which renders as expected:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-01-05/background-after.png" title="background on a body element with background on html element" style="max-height: 300px;"></p>

<h3>scrollHeight and scrollWidth</h3>

<p>In WebKit based browsers the <code>body</code>'s <a href="https://developer.mozilla.org/en-US/docs/DOM/element.scrollHeight">scrollHeight</a> and <a href="https://developer.mozilla.org/en-US/docs/DOM/element.scrollWidth">scrollWidth</a> properties are unaffected by declared <code>height</code> and <code>width</code> styles.  For example:</p>

<p>``` html scrollHeight and scrollWidth on the body element
<html></p>

<pre><code>&lt;head&gt;&lt;/head&gt;
&lt;body style="height: 200px; width: 200px;"&gt;
    &lt;script&gt;
        console.log(document.body.scrollHeight);
        console.log(document.body.scrollWidth);
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>This will log <code>200</code> for both in all modern browsers with the exception of WebKit based ones.  WebKit will return the height and width of the viewport.</p>

<p>While you are unlikely to run into this directly, you may use a library that does.  For example, this <a href="http://bugs.jqueryui.com/ticket/8940">causes an issue</a> trying to constrain <a href="http://jqueryui.com/draggable/">jQuery UI draggables</a> within the <code>body</code>.</p>

<h3>Is it Safe to Use Yet?</h3>

<p>The <a href="#zoom">zoom issue in IE7</a> is bad, but if you're no longer supporting IE7 it's safe to drop the wrapper <code>div</code> and style the <code>body</code> directly.</p>

<p>That being said, there's no harm in leaving a wrapper <code>div</code> in place.  So if you have any doubt stick with <code>&lt;div id="wrapper"&gt;&lt;/div&gt;</code>.</p>

<p>Know of any other bugs with styling the <code>body</code> element?  Let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Cross Browser Scrollable &lt;tbody&gt;s - A CSS Only Approach]]></title>
    <link href="http://tjvantoll.com/2012/11/10/creating-cross-browser-scrollable-tbody/"/>
    <updated>2012-11-10T15:44:00-05:00</updated>
    <id>http://tjvantoll.com/2012/11/10/creating-cross-browser-scrollable-tbody</id>
    <content type="html"><![CDATA[<p>By default the <code>overflow</code> CSS property does not apply to table group elements (<code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code>, or <code>&lt;tfoot&gt;</code>).  <a href="https://developer.mozilla.org/en-US/docs/Firefox_4_for_developers#Miscellaneous_CSS_changes">As of Firefox 4</a> this behavior is consistent across all browser implementations.</p>

<p>Therefore, if you attempt to apply a CSS <code>height</code> and <code>overflow: scroll</code> to a <code>&lt;tbody&gt;</code> it will have no effect in modern browsers.  You can see this for yourself <a href="http://jsfiddle.net/tj_vantoll/vU494/">here</a>.</p>

<p>But having a scrolling table body with fixed headers is a useful UI element, so how do you work around this?</p>

<!--more-->


<h3>The Solution</h3>

<p>Here is my solution:</p>

<p><pre class="codepen" data-height="400" data-type="result" data-href="JEKIu" data-user="tjvantoll"><code></code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<h3>How does it work?</h3>

<p>The first step is to set the <code>&lt;tbody&gt;</code> to <code>display: block</code> so an <code>overflow</code> and <code>height</code> can be applied.  From there the rows in the <code>&lt;thead&gt;</code> need to be set to <code>position: relative</code> and <code>display: block</code> so that they'll sit on top of the now scrollable <code>&lt;tbody&gt;</code>.</p>

<p>That's really about it.</p>

<h3>Unfortunate Part #1: Old Internet Explorer</h3>

<p>When you set a <code>height</code> on a <code>&lt;tbody&gt;</code> Internet Explorer &lt; 10 applies that <code>height</code> to every table cell, which is of course wonderful.</p>

<p>My workaround for this is to conditionally create a wrapper <code>&lt;div&gt;</code>.  When it's present I give it the <code>height</code> and <code>overflow</code> and remove the <code>height</code> from the <code>&lt;tbody&gt;</code>.</p>

<p>``` html Wrap table for IE</p>



<!--[if lte IE 9]>
<div class="old_ie_wrapper">
<!--<![endif]-->


<pre><code>&lt;table&gt;
    &lt;!-- Contents of the table --&gt;
&lt;/table&gt;
</code></pre>

<!--[if lte IE 9]>
</div>
<!--<![endif]-->


<p>```</p>

<p>The headers will scroll with the table body, but the table will at least be usable.  You could also create <a href="http://paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/">conditional classes on the &lt;html&gt; tag</a> to handle this as well.</p>

<h3>Unfortunate Part #2: Widths</h3>

<p>Because the <code>&lt;thead&gt;</code> is relatively positioned each table cell needs an explicit <code>width</code>.</p>

<p><code>css
td:nth-child(1), th:nth-child(1) { width: 100px; }
td:nth-child(2), th:nth-child(2) { width: 100px; }
td:nth-child(3), th:nth-child(3) { width: 100px; }
</code></p>

<p>But unfortunately that is not enough.  When a scrollbar is present browsers allocate space for it, therefore, the <code>&lt;tbody&gt;</code> ends up having less space available than the <code>&lt;thead&gt;</code>.  Notice the slight misalignment this creates:</p>

<p><img src="/images/posts/2012-11-10/Alignment-Issue.png" title="Alignment issue with scroll bar" alt="Alignment issue with scroll bar" /></p>

<p>The only workaround I could come up with was to set a <code>min-width</code> on all columns except the last one.</p>

<p><code>css
td:nth-child(1), th:nth-child(1) { min-width: 100px; }
td:nth-child(2), th:nth-child(2) { min-width: 100px; }
td:nth-child(3), th:nth-child(3) { width: 100px; }
</code></p>

<h3>The Good</h3>

<p>Despite these issues the solution does work in all browsers back to IE6 with no JavaScript dependency.</p>

<p>The markup to create the table is simple and semantic.  I've seen workarounds for this issue that use <code>&lt;div&gt;</code>s instead of <code>&lt;table&gt;</code>s or multiple aligned <code>&lt;table&gt;</code>s and those always felt dirty to me.</p>

<p>The code is free to use and do whatever you want with it.  If you have any suggestions for improvements or find any issues please let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[maxlength Constraint Validation Oddities in Major Browsers]]></title>
    <link href="http://tjvantoll.com/2012/10/17/maxlength-constraint-validation-oddities/"/>
    <updated>2012-10-17T12:48:00-04:00</updated>
    <id>http://tjvantoll.com/2012/10/17/maxlength-constraint-validation-oddities</id>
    <content type="html"><![CDATA[<p>The <code>maxlength</code> attribute has been around in browsers for a long time.  When provided all browsers prevent the user entering a value that exceeds the <code>maxlength</code>.</p>

<p>For example you cannot type more than 2 characters in the textbox below:</p>

<p><input type="text" maxlength="2" /></p>

<h3>Constraint Validation</h3>

<p><a href="https://developer.mozilla.org/en-US/docs/HTML/HTML5/Constraint_validation_">Constraint validation</a> is an HTML5 spec that provides native client side form validation in the browser.  As part of its <a href="https://developer.mozilla.org/en-US/docs/HTML/Forms_in_HTML#Constraint_Validation_API">API</a>, all <code>&lt;input&gt;</code> and <code>&lt;textarea&gt;</code> elements have a <code>validity.tooLong</code> property that is <code>true</code> when the length of the <code>value</code> exceeds the <code>maxlength</code>.</p>

<p>But if the browser prevents this then why does the property exist?</p>

<!--more-->


<h3>Prefilled value Attribute</h3>

<p>Assume that you're filling the <code>value</code> of form elements with information from a database and you end up with something like this:</p>

<p><code>&lt;input type="text" maxlength="1" value="ABC" /&gt;</code></p>

<p>How will the browser handle this?</p>

<p>All browsers will prevent entry of additional characters, but they do not trim excess characters already present.  Additionally all browsers will allow a form containing the above input to submit.  <em>Note: Opera is the only browser to set the <code>validity.tooLong</code> property to <code>true</code> in this situation.  Despite this, it does not prevent form submission.</em></p>

<p>Why is submission not prevented?  The key is in the <a href="http://www.whatwg.org/specs/web-apps/current-work/#concept-input-value-dirty-flag">specification</a>:</p>

<blockquote><p>Constraint validation: If an element has a maximum allowed value length, its dirty value flag is true, its value was last changed by a user edit (as opposed to a change made by a script), and the code-unit length of the element's value is greater than the element's maximum allowed value length, then the element is suffering from being too long.</p></blockquote>

<p>The <a href="http://www.whatwg.org/specs/web-apps/current-work/#concept-input-value-dirty-flag">dirty flag</a> essentially means the the user has changed the value of an element.  Therefore, in order to be <code>tooLong</code> the element must have been last interacted with by a user edit.</p>

<h3>Actually Triggering tooLong</h3>

<p>So let's take another approach.  What happens if you have the same input:</p>

<p><code>&lt;input type="text" maxlength="1" value="ABC" /&gt;</code></p>

<p>...remove one character, then submit?  You can try it for yourself below:</p>

<iframe style="width: 100%; height: 180px;" src="http://jsfiddle.net/tj_vantoll/epCQe/embedded/result,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Upon edit IE10 and Chrome will set the <code>validity.tooLong</code> property to <code>true</code> and prevent form submission.  If the user attempts to submit a form after removing the "C" they will see the following in those browsers:</p>

<p><img src="/images/posts/2012-10-17/Chrome.png" title="Chrome" alt="Chrome" />
<img src="/images/posts/2012-10-17/IE10.png" title="IE10" alt="IE10" /></p>

<p>Firefox, Safari, and Opera incorrectly handle this situation and allow the form to be submitted anyways.</p>
]]></content>
  </entry>
  
</feed>
