<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Browsers | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/browsers/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2013-04-27T22:30:06-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[List of Pseudo-Elements to Style Form Controls]]></title>
    <link href="http://tjvantoll.com/2013/04/15/list-of-pseudo-elements-to-style-form-controls/"/>
    <updated>2013-04-15T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2013/04/15/list-of-pseudo-elements-to-style-form-controls</id>
    <content type="html"><![CDATA[<p>Styling form elements is a pain point when developing web applications.  Historically, web developers have had to accept the form controls the browser provided with little hope of customization.  However, web rendering engines are increasingly adding hooks through pseudo-elements to give authors some control over the display.</p>

<p>While all of these pseudo-elements are rendering engine specific (and therefore behind vendor prefixes), they can still be handy for customizing the display for that engine.  The following is my best attempt at compiling a complete list of the pseudo-elements available in Trident, Gecko, and WebKit.  At the time of this writing Blink is a recent fork of WebKit, so the pseudo-elements provided are identical.  I am not aware of any form related pseudo-elements that Presto provides.</p>

<p>A couple of notes:</p>

<ul>
<li>All Trident pseudo-elements listed here were added in IE10 and will not work in earlier versions of Internet Explorer.</li>
<li>In WebKit, to style some pseudo-elements you must set the basis element's <code>-webkit-appearance</code> pseudo-class to <code>none</code>.  For example, to style <code>::-webkit-progress-bar</code> you must apply <code>-webkit-appearance: none;</code> to the appropriate <code>&lt;progress&gt;</code> element.</li>
</ul>


<!-- more -->


<h3>Table of Contents</h3>

<ul>
<li>&lt;input&gt; Elements

<ul>
<li><a href="#input_button">button</a></li>
<li><a href="#input_checkbox_radio">checkbox / radio</a></li>
<li><a href="#input_color">color</a></li>
<li><a href="#input_date">date</a></li>
<li><a href="#input_file">file</a></li>
<li><a href="#input_number">number</a></li>
<li><a href="#input_password">password</a></li>
<li><a href="#placeholder_attribute">placeholder attribute</a></li>
<li><a href="#input_range">range</a></li>
<li><a href="#input_reset">reset</a></li>
<li><a href="#input_search">search</a></li>
<li><a href="#input_submit">submit</a></li>
<li><a href="#input_text">text</a></li>
</ul>
</li>
<li>Other Elements

<ul>
<li><a href="#button_element">button</a></li>
<li><a href="#keygen_element">keygen</a></li>
<li><a href="#meter_element">meter</a></li>
<li><a href="#progress_element">progress</a></li>
<li><a href="#select_element">select</a></li>
<li><a href="#textarea_element">textarea</a></li>
</ul>
</li>
<li>Miscellaneous

<ul>
<li><a href="#form_validation_messages">Form Validation Messages</a></li>
</ul>
</li>
</ul>


<h3 id="input_button">input[type=button]</h3>


<h4>Gecko</h4>

<p>See <a href="#button_element">&lt;button&gt;</a></p>

<h3 id="input_checkbox_radio">input[type=checkbox] / input[type=radio]</h3>


<!-- http://jsfiddle.net/tj_vantoll/8esYJ/ -->


<h4>Trident</h4>

<p>Trident provides the <code>::-ms-check</code> pseudo-element for checkbox and radio button controls.  For example:</p>

<p><code>html
&lt;input type="checkbox"&gt;
&lt;input type="radio"&gt;
</code>
``` css
::-ms-check {</p>

<pre><code>color: red;
background: black;
padding: 1em;
</code></pre>

<p>}
```</p>

<p>This displays as follows in IE10 on Windows 8:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-radio-checkbox.png"></p>

<h3 id="input_color">input[type=color]</h3>


<!-- http://jsfiddle.net/tj_vantoll/fQFwc/ -->


<h4>WebKit</h4>

<p>Webkit provides 2 pseudo elements for its color picker, <code>::-webkit-color-swatch-wrapper</code> and <code>::-webkit-color-swatch</code>.  You can apply a variety of rules to these elements but I haven't come up with anything useful.  Here's an example just to show it's possible:</p>

<p><code>html
&lt;input type="color"&gt;
</code>
<code>css
::-webkit-color-swatch-wrapper { border: 2px solid red; }
::-webkit-color-swatch { opacity: 0.5; }
</code></p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-input-color.png"></p>

<h3 id="input_date">input[type=date]</h3>


<!-- http://jsfiddle.net/tj_vantoll/Qx46G/ -->


<h4>WebKit</h4>

<p>The following 8 pseudo-elements are made available by WebKit for customizing a date input's textbox:</p>

<ul>
<li><code>::-webkit-datetime-edit</code></li>
<li><code>::-webkit-datetime-edit-fields-wrapper</code></li>
<li><code>::-webkit-datetime-edit-text</code></li>
<li><code>::-webkit-datetime-edit-month-field</code></li>
<li><code>::-webkit-datetime-edit-day-field</code></li>
<li><code>::-webkit-datetime-edit-year-field</code></li>
<li><code>::-webkit-inner-spin-button</code></li>
<li><code>::-webkit-calendar-picker-indicator</code></li>
</ul>


<p>Here is the internal structure of these elements:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-input-date-shadow.png"></p>

<p>So if you thought the date input could use more spacing and a ridiculous color scheme you could add the following:</p>

<p><code>html
&lt;input type="date"&gt;
</code>
<code>css
::-webkit-datetime-edit { padding: 1em; }
::-webkit-datetime-edit-fields-wrapper { background: silver; }
::-webkit-datetime-edit-text { color: red; padding: 0 0.3em; }
::-webkit-datetime-edit-month-field { color: blue; }
::-webkit-datetime-edit-day-field { color: green; }
::-webkit-datetime-edit-year-field { color: purple; }
::-webkit-inner-spin-button { display: none; }
::-webkit-calendar-picker-indicator { background: orange; }
</code></p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-input-date.png"></p>

<h3 id="input_file">input[type=file]</h3>


<!-- http://jsfiddle.net/tj_vantoll/nmmGU/ -->


<p>All rendering engines automatically generate a button when an <code>&lt;input type="file"&gt;</code> is created.  Historically, that button has been completely un-styleable.  However, recently Trident and WebKit have added hooks through pseudo-elements.</p>

<h4>Trident</h4>

<p>As of IE10 the file input button can be styled using the <code>::-ms-browse</code> pseudo-element.  Basically any CSS rules that you apply a regular button can be applied to the pseudo-element.  For example:</p>

<p><code>html
&lt;input type="file"&gt;
</code>
``` css
::-ms-browse {</p>

<pre><code>background: black;
color: red;
padding: 1em;
</code></pre>

<p>}
```</p>

<p>This displays as follows in IE10 on Windows 8:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-input-file.png"></p>

<h4>WebKit</h4>

<p>WebKit provides a hook for its file input button with the <code>::-webkit-file-upload-button</code> pseudo-element.  Again pretty much any CSS rule can be applied, therefore the Trident example will work here as well:</p>

<p><code>html
&lt;input type="file"&gt;
</code>
``` css
::-webkit-file-upload-button {</p>

<pre><code>background: black;
color: red;
padding: 1em;
</code></pre>

<p>}
```</p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-input-file.png"></p>

<h3 id="input_number">input[type=number]</h3>


<!-- http://jsfiddle.net/tj_vantoll/KwzPm/ -->


<h4>WebKit</h4>

<p>WebKit provides a spinner control by default for number picker inputs.  Pseudo-elements <code>::-webkit-textfield-decoration-container</code>, <code>::-webkit-inner-spin-button</code> and <code>::-webkit-outer-spin-button</code> are provided for customization.  While you cannot do a whole lot with these elements, it can be useful to hide the spinner.</p>

<p><code>html
&lt;input type="number"&gt;
</code>
``` css
::-webkit-textfield-decoration-container { }
::-webkit-inner-spin-button {</p>

<pre><code>-webkit-appearance: none;
</code></pre>

<p>}
::-webkit-outer-spin-button {</p>

<pre><code>-webkit-appearance: none;
</code></pre>

<p>}
```</p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-input-number.png"></p>

<h3 id="input_password">input[type=password]</h3>


<!-- http://jsfiddle.net/tj_vantoll/Xaw9B/ -->


<h4>Trident</h4>

<p>Trident provides a control on password inputs that can be pressed to display the password in plain text.  This control is made customizable via the <code>::-ms-reveal</code> pseudo-element.  You can change a number of properties of the control including its <code>color</code>, <code>background</code>, or <code>display</code> to hide it.  The following will hide the control:</p>

<p><code>html
&lt;input type="password"&gt;
</code>
<code>css
::-ms-reveal { display: none; }
</code></p>

<p>This displays as follows in IE10 on Windows 8:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-input-password.png"></p>

<h3 id="placeholder_attribute">placeholder Attribute</h3>


<!-- http://jsfiddle.net/tj_vantoll/TAqWZ/ -->


<h4>Gecko</h4>

<p>Gecko provides the pseduo-element <code>::-moz-placeholder</code> to style placeholder text.  You can use this to change the placeholder's color or font properties.  For example:</p>

<p><code>html
&lt;input placeholder="placeholder"&gt;
</code>
``` css
::-moz-placeholder {</p>

<pre><code>color: blue;
font-family: 'Comic Sans MS';
</code></pre>

<p>}
```</p>

<p>This displays as follows in Firefox 20 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/gecko-placeholder.png"></p>

<p><i>Note: Gecko switched from the pseudo-class <code>:-moz-placeholder</code> to the pseudo-element <code>::-moz-placeholder</code> in Firefox 19.</i></p>

<h4>Trident</h4>

<p>Trident offers the ability to style the placeholder text with a pseudo-class rather than a pseudo-element.  However the pseudo-class, <code>:-ms-input-placeholder</code>, can be used the same as the pseudo-elements from the other rendering engines:</p>

<p><code>html
&lt;input placeholder="placeholder"&gt;
</code>
``` css
:-ms-input-placeholder {</p>

<pre><code>color: blue;
font-family: 'Comic Sans MS';
</code></pre>

<p>}
```</p>

<p>This displays as follows in IE10 on Windows 8:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-placeholder.png"></p>

<h4>WebKit</h4>

<p>WebKit provides the <code>::-webkit-input-placeholder</code> pseudo-element.  It can also be used to change the color and font of the placeholder text:</p>

<p><code>html
&lt;input placeholder="placeholder"&gt;
</code>
``` css
::-webkit-input-placeholder {</p>

<pre><code>color: blue;
font-family: 'Comic Sans MS';
</code></pre>

<p>}
```</p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-placeholder.png"></p>

<h3 id="input_range">input[type=range]</h3>


<!-- http://jsfiddle.net/tj_vantoll/MHrzT/ -->


<h4>Gecko</h4>

<p>As of Firefox 22, Gecko provides pseudo-elements <code>::-moz-range-track</code> and <code>::-moz-range-thumb</code> for styling range inputs.  It's possible to apply most CSS rules to these elements, for example:</p>

<p><code>html
&lt;input type="range"&gt;
</code>
``` css
::-moz-range-track {</p>

<pre><code>border: 2px solid red;
height: 20px;
background: orange;
</code></pre>

<p>}
::-moz-range-thumb {</p>

<pre><code>background: blue;
height: 30px;
</code></pre>

<p>}
```</p>

<p>This displays as follows in Firefox 22 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/gecko-input-range.png"></p>

<h4>Trident</h4>

<p>Trident provides an impressive number of pseudo-elements to customize its range selector.</p>

<ul>
<li><code>::-ms-fill-lower</code>: The track portion underneath / before the handle.</li>
<li><code>::ms-fill-upper</code>: The track portion above / after the handle.</li>
<li><code>::-ms-ticks-before</code>: An area above / before the range track with tick marks.</li>
<li><code>::-ms-ticks-after</code>: An area below / after the range track with tick marks.</li>
<li><code>::-ms-thumb</code>: The handle.</li>
<li><code>::-ms-track</code>: The range track itself.</li>
<li><code>::ms-tooltip</code>: The tooltip that appears when the user is selecting a value with the range selector.  Note that this element cannot be styled, only hidden using <code>display: none</code>.</li>
</ul>


<p>This is easier to visualize with an example.  Take the following:</p>

<p><code>html
&lt;input type="range"&gt;
</code>
<code>css
::-ms-fill-lower { background: orange; }
::-ms-fill-upper { background: green; }
::-ms-thumb { background: red; }
::-ms-ticks-after { display: block; color: blue; }
::-ms-ticks-before { display: block; color: black; }
::-ms-track { padding: 20px 0; }
::-ms-tooltip { display: none; /* display and visibility only */ }
</code></p>

<p>This will display as follows in IE10 on Windows 8:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-input-range.png"></p>

<h4>WebKit</h4>

<p>WebKit provides the <code>::-webkit-slider-runnable-track</code> pseudo-element for the track and <code>::-webkit-slider-thumb</code> for the range handle itself.  While you cannot do much with these elements, you can add some colors and padding.</p>

<p><code>html
&lt;input type="range"&gt;
</code>
``` css
::-webkit-slider-runnable-track {</p>

<pre><code>border: 2px solid red;
background: green;
padding: 2em 0;
</code></pre>

<p>}
::-webkit-slider-thumb {</p>

<pre><code>outline: 2px solid blue;
</code></pre>

<p>}
```</p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-input-range.png"></p>

<p>One final note about range inputs.  Trident and Webkit allow you to apply hover states to the thumb pseudo-element (<code>::-webkit-slider-thumb:hover</code> and <code>::-ms-thumb:hover</code> respectively), whereas Gecko currently does not.</p>

<h3 id="input_reset">input[type=reset]</h3>


<h4>Gecko</h4>

<p>See <a href="#button_element">&lt;button&gt;</a></p>

<h3 id="input_search">input[type=search]</h3>


<!-- http://jsfiddle.net/tj_vantoll/9jL5U/ -->


<h4>WebKit</h4>

<p>By default WebKit provides a custom UI for search inputs with cancel and search buttons.  Two pseudo-elements, <code>::-webkit-search-cancel-button</code> and <code>::-webkit-search-results-button</code> are provided for customization, although you can't much of anything with them other than hide them as shown below:</p>

<p><code>html
&lt;input type="search"&gt;
</code>
``` css
/<em> Remove the rounded corners </em>/
input[type=search] { -webkit-appearance: none; }</p>

<p>/<em> Hide the cancel button </em>/
::-webkit-search-cancel-button { -webkit-appearance: none; }</p>

<p>/<em> Hide the magnifying glass </em>/
::-webkit-search-results-button { -webkit-appearance: none; }
```</p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-input-search.png"></p>

<h3 id="input_submit">input[type=submit]</h3>


<h4>Gecko</h4>

<p>See <a href="#button_element">&lt;button&gt;</a></p>

<h3 id="input_text">input[type=text]</h3>


<!-- http://jsfiddle.net/tj_vantoll/r4mwz/, http://jsfiddle.net/tj_vantoll/ADEvK/ -->


<h4>Trident</h4>

<p>As of IE10 Trident provides the pseudo-element <code>::-ms-value</code> to style the value portion of text inputs (<code>input[type=text]</code>, <code>input[type=password]</code>, etc) and <code>&lt;select&gt;</code>s.  For example:</p>

<p><code>html
&lt;input type="text" value="value"&gt;
&lt;input type="password" value="value"&gt;
&lt;select&gt;&lt;option selected&gt;option&lt;/option&gt;&lt;/select&gt;
</code>
``` css
::-ms-value {</p>

<pre><code>color: red;
background: black;
padding: 1em;
</code></pre>

<p>}
```</p>

<p>This displays as follows in IE10 on Windows 8:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-value.png"></p>

<h5>Clear Control</h5>

<p>In IE10 when a text input has focus and is not empty, a small X control appears in the right hand side of the input.  When clicked, the control will clear the contents of the text input.  The X is styleable with the <code>::-ms-clear</code> pseudo-element.  Therefore you can hide it:</p>

<p><code>html
&lt;input type="text"&gt;
</code>
<code>css
::-ms-clear { display: none; }
</code></p>

<p>This displays as follows in IE10 on Windows 8:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-input-clear.png"></p>

<p>There are a variety of rules that <code>::-ms-clear</code> will accept, so you can theme it as well:</p>

<p><code>html
&lt;input type="text" value="Lorem Ipsum"&gt;
</code>
``` css
::-ms-clear {</p>

<pre><code>color: red;
background: black;
padding: 1em;
</code></pre>

<p>}
```</p>

<p>Which displays as follows:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-input-clear-fancy.png"></p>

<h3 id="button_element">&lt;button&gt; Element</h3>


<!-- http://jsfiddle.net/tVqyR/3/ -->


<h4>Gecko</h4>

<p>Gecko applies pseudo-elements <code>::-moz-focus-outer</code> and <code>::-moz-focus-inner</code> to inputs of type <code>button</code>, <code>reset</code>, and <code>submit</code>, as well as <code>&lt;button&gt;</code> elements.</p>

<p>There's not much you can do with these pseudo-elements, but there is one important thing to be aware of.  Gecko applies <code>padding</code> and <code>border</code> to <code>::-moz-focus-inner</code> by default:</p>

<p>``` css
button::-moz-focus-inner,
input[type="reset"]::-moz-focus-inner,
input[type="button"]::-moz-focus-inner,
input[type="submit"]::-moz-focus-inner,
input[type="file"] > input[type="button"]::-moz-focus-inner {</p>

<pre><code>border: 1px dotted transparent;
padding: 0 2px;
</code></pre>

<p>}
```</p>

<p>These rules can easily create appearance differences between button displays in Gecko and other rendering engines.  This is confusing and there's actually <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=140562">a ticket to remove it</a>.  The ticket has been open since 2002 so don't hold your breath.</p>

<p>The default <code>padding</code> and <code>border</code> can be reset by just setting them to 0:</p>

<p>``` css
button::-moz-focus-inner,
input::-moz-focus-inner {</p>

<pre><code>border: 0;
padding: 0;
</code></pre>

<p>}
```</p>

<p>The before and after of this can be seen in the screenshot (below) of Firefox 19 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/gecko-buttons.png"></p>

<h3 id="keygen_element">&lt;keygen&gt; Element</h3>


<!-- http://jsfiddle.net/tj_vantoll/nMRHU/ -->


<h4>WebKit</h4>

<p>WebKit provides the <code>::-webkit-keygen-select</code> that can be used to customize the dropdown that a keygen element uses.  For example:</p>

<p><code>html
&lt;keygen&gt;
</code>
``` css
::-webkit-keygen-select {</p>

<pre><code>background: black;
color: red;
</code></pre>

<p>}
```</p>

<p>This displays as follows on Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-keygen.png"></p>

<h3 id="meter_element">&lt;meter&gt; Element</h3>


<!-- http://jsfiddle.net/tj_vantoll/Wjzwn -->


<h4>WebKit</h4>

<p>WebKit provides pseudo-elements <code>::-webkit-meter-bar</code>, <code>::-webkit-meter-even-less-good-value</code>, <code>::-webkit-meter-optimum-value</code>, and <code>::-webkit-meter-suboptimal-value</code> to customize the display of meter elements.</p>

<p>In order for the pseudo-elements to be styled, you must set <code>-webkit-appearance</code> to <code>none</code> on the meter element itself.</p>

<p>Only one of the <code>::-webkit-meter-even-less-good-value</code>, <code>::-webkit-meter-optimum-value</code>, and <code>::-webkit-meter-suboptimal-value</code> elements will be active at a given time depending on the value of the meter.</p>

<p>See the following for an example:</p>

<p><code>html
&lt;meter low="69" high="80" max="100" optimum="100" value="92"&gt;A&lt;/meter&gt;
&lt;meter low="69" high="80" max="100" optimum="100" value="72"&gt;C&lt;/meter&gt;
&lt;meter low="69" high="80" max="100" optimum="100" value="52"&gt;E&lt;/meter&gt;
</code>
``` css
meter { -webkit-appearance: none; }
::-webkit-meter-bar {</p>

<pre><code>height: 50px;
background: white;
border: 2px solid black;
</code></pre>

<p>}
::-webkit-meter-optimum-value { background: green; }
::-webkit-meter-suboptimum-value { background: orange; }
::-webkit-meter-even-less-good-value { background: blue; }
```</p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-meter.png"></p>

<h3 id="progress_element">&lt;progress&gt; Element</h3>


<!-- http://jsfiddle.net/tj_vantoll/hhTPA/ -->


<h4>WebKit</h4>

<p>WebKit provides pseudo-elements <code>::-webkit-progress-inner-element</code>, <code>::-webkit-progress-bar</code>, &amp; <code>::-webkit-progress-value</code> to style progress elements in the following hierarchy:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-progress-shadow.png"></p>

<p>Like meter, in order to apply any rules to these elements you must set <code>-webkit-appearance: none;</code> on the progress element.  Here's an example:</p>

<p><code>html
&lt;progress max="100" value="50"&gt;&lt;/progress&gt;
</code>
<code>css
progress { -webkit-appearance: none; }
::-webkit-progress-inner-element { }
::-webkit-progress-bar { border: 2px solid black; }
::-webkit-progress-value { background: red; }
</code></p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-progress.png"></p>

<h4>Gecko</h4>

<p>Gecko provides a <code>::-moz-progress-bar</code> pseudo-element to style the progress bar itself.  For example:</p>

<p><code>html
&lt;progress max="100" value="50"&gt;&lt;/progress&gt;
</code>
<code>css
::-moz-progress-bar { background: red; }
</code></p>

<p>This displays as follows in Firefox 19 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/gecko-progress.png"></p>

<h4>Trident</h4>

<p>Like Gecko, Trident provides a single pseudo-element to style the progress bar, <code>::-ms-fill</code>.  For example:</p>

<p><code>html
&lt;progress max="100" value="50"&gt;&lt;/progress&gt;
</code>
<code>css
::-ms-fill { background: red; }
</code></p>

<p>This displays as follows in IE10 on Windows 8:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-progress.png"></p>

<h3 id="select_element">&lt;select&gt; Element</h3>


<!-- http://jsfiddle.net/tj_vantoll/f5qTH/ -->


<h4>Trident</h4>

<p>As of IE10 Trident gives you a hook to style the arrow within select dropdowns, <code>::-ms-expand</code>.  For example:</p>

<p>``` html
<select></p>

<pre><code>&lt;option selected&gt;One&lt;/option&gt;
</code></pre>

<p></select>
<code>
</code> css
::-ms-expand {</p>

<pre><code>padding: 2em;
color: red;
background: black;
</code></pre>

<p>}
```</p>

<p>This displays as follows in IE10 on Windows 8:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/trident-select.png"></p>

<h3 id="textarea_element">&lt;textarea&gt; Element</h3>


<!-- http://jsfiddle.net/tj_vantoll/YwUeF/ -->


<h3>WebKit</h3>

<p>WebKit provides the pseudo-element <code>::-webkit-resizer</code> for the resize control it automatically adds to the bottom right of textarea elements.</p>

<p>It can be hidden by applying <code>display: none</code> or <code>-webkit-appearance: none</code>:</p>

<p><code>html
&lt;textarea&gt;&lt;/textarea&gt;
</code>
``` css
::-webkit-resizer {</p>

<pre><code>display: none;
</code></pre>

<p>}
```</p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-textarea-hide.png"></p>

<p><i>Note: Adding <code>display: none</code> to <code>::-webkit-resizer</code> doesn't actually prevent the user from resizing the textarea, it just hides the control. If you want to disable resizing, set the <a href="https://developer.mozilla.org/en-US/docs/CSS/resize">resize CSS property</a> to <code>none</code>. This also hides the control and has the added benefit of working in all browsers that support resizing textareas.</i></p>

<p>The <code>::-webkit-resizer</code> pseudo-element also allows for some basic styling.  If you thought the resize control could use significantly more color you could add this:</p>

<p><code>html
&lt;textarea&gt;&lt;/textarea&gt;
</code>
``` css
::-webkit-resizer {</p>

<pre><code>border: 2px solid black;
background: red;
box-shadow: 0 0 5px 5px blue;
outline: 2px solid yellow;
</code></pre>

<p>}
```</p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-textarea-style.png"></p>

<h3 id="form_validation_messages">Form Validation Messages</h3>


<!-- http://jsfiddle.net/tj_vantoll/Eb2zN/ -->


<h4>WebKit</h4>

<p>WebKit is the only rendering engine to support styling the validation bubbles created from the <a href="http://www.html5rocks.com/en/tutorials/forms/constraintvalidation">constraint validation API</a>.  The following pseudo-elements are provided:</p>

<ul>
<li><code>::-webkit-validation-bubble</code></li>
<li><code>::-webkit-validation-bubble-arrow</code></li>
<li><code>::-webkit-validation-bubble-arrow-clipper</code></li>
<li><code>::-webkit-validation-bubble-heading</code></li>
<li><code>::-webkit-validation-bubble-message</code></li>
<li><code>::-webkit-validation-bubble-text-block</code></li>
</ul>


<p>It's easier to see what each element does visually.  Here's an example:</p>

<p><code>css
::-webkit-validation-bubble { padding: 1em; background: orange; }
::-webkit-validation-bubble-arrow { background: blue; }
::-webkit-validation-bubble-arrow-clipper { border: 2px solid black; }
::-webkit-validation-bubble-heading { background: green; }
::-webkit-validation-bubble-message { color: white; background: purple; }
::-webkit-validation-bubble-text-block { border: 1px solid red; padding: 1em; }
</code></p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-validation-bubble.png"></p>

<p>Here's a slightly more practical example showing how the bubble can be themed:</p>

<p>``` css
::-webkit-validation-bubble-message {</p>

<pre><code>color: #eee;
background: black;
</code></pre>

<p>}
::-webkit-validation-bubble-arrow {</p>

<pre><code>background: black;
border-color: #444;
box-shadow: none;
</code></pre>

<p>}
```</p>

<p>This displays as follows in Chrome 26 on OS X:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-04-15/webkit-validation-bubble-pretty.png"></p>

<h3>That's It!</h3>

<p>Hopefully you will find this list helpful.  If I'm missing elements or some of this information gets out of date let me know in the comments.</p>

<h3>Resources</h3>

<ul>
<li><a href="https://gist.github.com/afabbro/3759334">https://gist.github.com/afabbro/3759334</a>: A gist from <a href="https://twitter.com/angelinamagnum">@angelinamagnum</a> with a nice list of ALL WebKit pseudo-elements. (<a href="https://twitter.com/paul_irish">@paul_irish</a> actually <code>ack</code>'d the WebKit code base.)</li>
<li><a href="http://www.wufoo.com/html5/">http://www.wufoo.com/html5/</a>: Wufoo's Current State of HTML Forms</li>
<li><a href="https://developer.mozilla.org/en-US/docs/CSS/CSS_Reference/Mozilla_Extensions">https://developer.mozilla.org/en-US/docs/CSS/CSS_Reference/Mozilla_Extensions</a>: MDN article on Mozilla's CSS Extensions</li>
<li><a href="http://dev.bowdenweb.com/css/pseudo/ms-trident-vendor-prefixed-pseudo-elements.html">http://dev.bowdenweb.com/css/pseudo/ms-trident-vendor-prefixed-pseudo-elements.html</a>: List of Trident Vendor-Prefixed Pseudo-Elements</li>
<li><a href="http://trac.webkit.org/browser/trunk/Source/WebCore/css/html.css">http://trac.webkit.org/browser/trunk/Source/WebCore/css/html.css</a>: WebKit's current user agent stylesheet</li>
<li><a href="http://trac.webkit.org/wiki/Styling%20Form%20Controls">http://trac.webkit.org/wiki/Styling%20Form%20Controls</a>: Slightly dated guide from WebKit on styling form controls</li>
</ul>


<h3 id="updates">Updates</h3>


<ul>
<li>April 17th, 2013: Added sections on <code>::-moz-focus-outer</code> and <code>::-moz-focus-inner</code> per comments from Matthew Brundage. <a href="https://github.com/tjvantoll/tjvantoll.github.com/commit/5a776e9edb02d78b0f4e9880523f0752ccf24c3f">5a776e9edb02d78b0f4e9880523f0752ccf24c3f</a>.</li>
<li>April 20th, 2013: Added a section on <code>::-webkit-resizer</code> for textareas per comments from Anselm Urban. <a href="https://github.com/tjvantoll/tjvantoll.github.com/commit/4c37198821fda83dedac061ac282b532b7f7ce81">4c37198821fda83dedac061ac282b532b7f7ce81</a></li>
<li>April 26th, 2013: Added a note that the <code>resize</code> CSS property is the appropriate way to prevent textareas from being resized. <a href="https://github.com/tjvantoll/tjvantoll.github.com/commit/f90720f3aa12c3ec4ca922b5d22f64f03583eb4f">f90720f3aa12c3ec4ca922b5d22f64f03583eb4f</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opera Moves to WebKit - Why We Should Care]]></title>
    <link href="http://tjvantoll.com/2013/02/14/opera-moves-to-webkit-why-we-should-care/"/>
    <updated>2013-02-14T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2013/02/14/opera-moves-to-webkit-why-we-should-care</id>
    <content type="html"><![CDATA[<p>Opera <a href="http://my.opera.com/ODIN/blog/300-million-users-and-move-to-webkit">announced Wednesday</a> that they are moving from their Presto rendering engine to WebKit.</p>

<p>The reaction I saw from most developers was mostly positive - one less rendering engine to support.</p>

<p>And yes, having one less rendering engine to support will make the lives of web developers easier.  But the loss of one of the web's core four rendering engines represents a slippery slope towards a WebKit monoculture.</p>

<!--more-->


<h3>WebKit - Our New Overlords?</h3>

<p>On desktop there's still a healthy distribution between the 3 remaining rendering engines.  According to <a href="http://gs.statcounter.com/#browser-ww-monthly-201201-201301">StatCounter</a>, as of January 2013 Trident (Internet Explorer) has 30.7% of the market, Gecko (Firefox) has 21.4%, and WebKit picks up the rest:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-02-14/statcounter-desktop.png"></p>

<p>On mobile however, the loss of Presto gives WebKit a near monopoly:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-02-14/statcounter-mobile.png"></p>

<p>WebKit is, or will be, the rendering engine behind all browsers listed other than the <a href="http://en.wikipedia.org/wiki/UC_Browser">UC Browser</a>.  Gecko and Trident's mobile browsers are not even popular enough to be put in the key.</p>

<p>This is concerning.</p>

<h3>Why is One Rendering Engine Bad?</h3>

<p>There seems to be a perception amongst web developers that if we had one rendering engine our lives would be so much easier.  And after years of wrestling with asinine browser differences this view is understandable.  But there are some fundamental problems with a single rendering engine having a monopoly.</p>

<h4>Standards</h4>

<p>With only one rendering engine, the line between bugs and standard behavior becomes blurred.  The only way developers have to verify correctness is to refer to the appropriate specification.  Furthermore, standardization is less likely to happen in the first place.  For better or worse, when there is one rendering engine its behavior becomes the standard.</p>

<p>Tools are already being developed that target WebKit exclusively.  The following is from <a href="http://html.adobe.com/edge/">Adobe's Edge tools</a>:</p>

<p><blockquote><p>"Because you design in an environment based on WebKit, your content will display reliably across modern browsers and mobile devices."</p></blockquote></p>

<p>This sort of language is detrimental to Gecko and Trident's chances of being relevant, especially on mobile.</p>

<h4>Competition</h4>

<p>Competition drives innovation.  Fewer rendering engines means less competition.</p>

<h4>Proprietary</h4>

<p>Have you ever used window.showModalDialog?  It's an API <a href="http://tjvantoll.com/2012/05/02/showmodaldialog-what-it-is-and-why-you-should-never-use-it/">riddled with issues</a>, yet, it is now <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dialogs-implemented-using-separate-documents">standardized in the HTML5 specification</a>.</p>

<p>Why?  When IE6 had a virtual monopoly on the browser world, a lot of applications were written that depended on the API.  And once an API is used on the web, it's almost impossible to change or remove it.</p>

<p>For WebKit this is less of a concern than it was with IE6, but there are still a lot of WebKit specific features that are not part of any specification (<a href="http://peter.sh/experiments/vendor-prefixed-css-property-overview/">prefixes</a>, for example).</p>

<h3>Business</h3>

<p>From a business perspective Opera's move is an inevitability.  With the complexity of web browsers rapidly approaching Skynet, keeping up with a rendering engine that is backed by the likes of Google, Apple, Adobe, Nokia, RIM, and <a href="http://techcrunch.com/2013/02/09/apple-and-google-still-lead-webkit-development-but-more-smaller-companies-contributing/">many more</a> is fighting a losing battle.</p>

<p>With Opera throwing their support behind WebKit as well, my primary concern is that it will become increasingly difficult for Gecko and Trident to keep up.</p>

<h3>Optimism</h3>

<p>Despite this, I don't believe all is doom and gloom by any means.  This is not IE6 all over again.  WebKit is an open source project whose contributors are active participants in the web standards community.</p>

<p>It's also important to remember that <a href="http://quirksmode.org/webkit.html">not all WebKits are created equally</a>, WebKit browsers are fighting to distinguish themselves; innovation in the browser world has never been as strong as it is today.</p>

<p>That being said, the loss of a rendering engine is still a sad day for the web.  R.I.P. Presto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Messing with the Browser's Default Focus outline]]></title>
    <link href="http://tjvantoll.com/2013/01/28/stop-messing-with-the-browsers-default-focus-outline/"/>
    <updated>2013-01-28T20:57:00-05:00</updated>
    <id>http://tjvantoll.com/2013/01/28/stop-messing-with-the-browsers-default-focus-outline</id>
    <content type="html"><![CDATA[<p>This is the latest in my series of accessibility best practices after getting frustrated with using a keyboard on the internet.  Last time I talked about <a href="/2013/01/01/enter-should-submit-forms-stop-messing-with-that/">enter submitting forms</a>, this time I'm going to explain why removing the browser's default focus <code>outline</code> is a bad idea.</p>

<h3>Focus Rings</h3>

<p>All browsers have a default value they apply to the currently focused item.  For example Chrome on OS X uses the following:</p>

<p>``` css
:focus {</p>

<pre><code>/* -webkit-focus-ring-color = '#5B9DD9' */
outline: -webkit-focus-ring-color auto 5px;
</code></pre>

<p>}
```</p>

<!--more-->


<p>Firefox uses a <code>1px dotted #212121</code> outline, other browser use other values.  The focus ring looks like this for Chrome on OS X:</p>

<p><img src="/images/posts/2013-01-28/default.png" title="Default Focus Ring in Chrome on OS X" alt="Default Focus Ring in Chrome on OS X" /></p>

<p>Keyboard users <strong>depend</strong> on this <code>outline</code> to determine where they are on the page.  I cannot stress <strong>depend</strong> enough, without the <code>outline</code> you have no idea where you are.  Don't believe me?  Go to <a href="http://www.cnn.com">cnn.com</a> right now.  Hit tab a few times and try to figure out where the hell you are on the page.</p>

<p>The <code>outline</code> <em>can</em> be removed with the following:</p>

<p>``` css
:focus {</p>

<pre><code>outline: 0;
/* or */
outline: none;
</code></pre>

<p>}
```</p>

<p>This is obviously bad per the reasoning above.  The HTML5 specification has the following to say about removing the default <code>outline</code>:</p>

<p><blockquote><p>"...if an alternative focusing style isn't made available instead, the page will be significantly less usable for people who primarily navigate pages using a keyboard, or those with reduced vision who use focus outlines to help them navigate the page."</p><footer><strong>HTML5 Specification</strong> <cite><a href='http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#element-level-focus-apis'>www.whatwg.org/specs/web-apps/&hellip;</a></cite></footer></blockquote></p>

<h3>Custom Focus Outlines</h3>

<p>As the spec mentions, you can create your own styling for focused items instead of using the browser's default.  For example the following will change all focused links to white text on a black background:</p>

<p>``` css
:link:focus, :visited:focus {</p>

<pre><code>outline: none;
background-color: black;
color: white;
</code></pre>

<p>}
```</p>

<p>Although this is possible, I would <strong>strongly</strong> recommend simply leaving the default browser <code>outline</code> in place.  Changing the default display messes with a user's expectations, which is a big usability no no.  Furthermore, you need to make sure that whatever alternative you put in is sufficiently identifiable for users with reduced vision.</p>

<h3>Why do People Want it Removed?</h3>

<p>At the <a href="http://jqueryui.com">jQuery UI</a> project we get a <a href="https://github.com/jquery/jquery-ui/pull/898">lot</a> <a href="http://bugs.jqueryui.com/ticket/8959">of</a> <a href="http://bugs.jqueryui.com/ticket/6146">requests</a> to remove the browser default <code>outline</code>s from our widgets.</p>

<p>  The most recent tickets have come from the <a href="http://jqueryui.com/slider">slider</a> and <a href="http://jqueryui.com/tabs">tabs</a> widgets.  This is what they look like on the latest Chrome on OS X:</p>

<p><img src="/images/posts/2013-01-28/slider.png" title="Focus ring on jQuery UI slider" alt="Focus ring on jQuery UI slider" />
<img src="/images/posts/2013-01-28/tabs.png" title="Focus ring on jQuery UI tabs" alt="Focus ring on jQuery UI tabs" /></p>

<p>Some people find this unsightly.  Others are thrown off by the fact that the display varies on different browsers / operating systems.  While these concerns are reasonable, they do not outweigh the importance of the <code>outline</code> for keyboard users and users with reduced vision.</p>

<p>jQuery UI does nothing to alter the browser's default <code>outline</code> on these widgets and I encourage others to do the same.</p>

<h3>CSS Reset</h3>

<p>Unfortunately one of the reasons much of the internet removes the default focus ring is because the <a href="http://meyerweb.com/eric/tools/css/reset/reset200802.css">first version of Eric Meyer's CSS reset</a> included the following:</p>

<p>``` css
/<em> remember to define focus styles! </em>/
:focus {</p>

<pre><code>outline: 0;
</code></pre>

<p>}
```</p>

<p>As you can see it's made abundantly clear that you should define your own focus styles, but most people simply copied and pasted the file without realizing this.</p>

<p>The <a href="http://meyerweb.com/eric/tools/css/reset/index.html">updated version</a> of the CSS reset no longer features this, but sadly it's a bit too late for a lot of sites.</p>

<p>Sigh.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML 5 hidden Attribute Browser Support]]></title>
    <link href="http://tjvantoll.com/2013/01/09/html5-hidden-attribute-browser-support/"/>
    <updated>2013-01-09T21:27:00-05:00</updated>
    <id>http://tjvantoll.com/2013/01/09/html5-hidden-attribute-browser-support</id>
    <content type="html"><![CDATA[<p>I had trouble finding this from a Google search, so I thought I'd list the browser support for the <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#the-hidden-attribute">HTML5 hidden attribute</a> here.</p>

<ul>
<li>Chrome 6+</li>
<li>Firefox 4+</li>
<li>Safari 5.1+</li>
<li>Opera 11+</li>
<li>iOS 5+</li>
<li>Android Browser 4+</li>
</ul>


<p>IE still does not support the <code>hidden</code> attribute as of IE 10.  For any unsupported browser you can easily add support by just including the following CSS:</p>

<p><code>css Polyfiling the hidden attribute.
[hidden] { display: none; }
</code></p>

<p>This will work back to IE6, which doesn't support the <a href="https://developer.mozilla.org/en-US/docs/CSS/Attribute_selectors">attribute selector</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the body Element as a Top Level Container - Is it Safe Yet?]]></title>
    <link href="http://tjvantoll.com/2013/01/05/is-it-safe-to-use-the-body-as-a-top-level-container-yet/"/>
    <updated>2013-01-05T14:21:00-05:00</updated>
    <id>http://tjvantoll.com/2013/01/05/is-it-safe-to-use-the-body-as-a-top-level-container-yet</id>
    <content type="html"><![CDATA[<p>View source on almost any web page and you'll likely see the following:</p>

<p>``` html Common HTML Template
<html></p>

<pre><code>&lt;head&gt;&lt;/head&gt;
&lt;body&gt;
    &lt;div id="wrapper"&gt;
        &lt;!-- All the things --&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>The use of a wrapper or container <code>div</code> around the page is fairly universal.  It is commonly used to perform tasks such as centering a page's content or providing a shadow or border to frame it.  But, since the <code>body</code> element is a necessity in the markup, why can't it be styled directly instead?  Why is a wrapper <code>div</code> used?</p>

<p>Historically there have been a number of issues with using the <code>body</code> element as a top level container in old versions of Internet Explorers.  If you're supporting IE >= 8 you're good, but there are some things <a href="#now">you should be aware of</a>.</p>

<!--more-->


<h3>IE 5.5</h3>

<p>To get to the origins of the wrapper <code>div</code> let's go way back.  A pretty common practice is to center the top level container using <code>margin: 0 auto</code>, and this works fine in all browsers... back to IE 5.5.  IE 5.5 did not support <code>auto</code> margins so this approach did not work.</p>

<p>To center the top level container in IE 5.5 you had to make use of <code>text-align: center</code> as such:</p>

<p>``` css Centering the top level container in IE 5.5
body {</p>

<pre><code>text-align: center;
</code></pre>

<p>}</p>

<h1>wrapper {</h1>

<pre><code>width: 1000px;
text-align: left; /* counteract the declaration on body */
</code></pre>

<p>}
```</p>

<p><code>text-align: center</code> <em>should</em> only affect inline elements, but IE 5.5 incorrectly applied it to block elements as well.  (Note: The <code>text-align: center</code> bug was fixed in IE6 standards mode, but the behavior remained in Internet Explorer's quirks mode to this day.)</p>

<h3>IE6</h3>

<p>IE6 implemented <code>auto</code> margins, so <code>margin: 0 auto</code> was now safe to use on the <code>body</code>.  Additionally, IE6 fully supports adding a <code>width</code>, <code>padding</code>, <code>margin</code>, and <code>border</code> to the body element.  Take the following CSS:</p>

<p>``` css
body{</p>

<pre><code>width: 90%;
border: 2px solid red;
background-color: black;
color: white;
padding: 10px;
margin: 0 auto;
</code></pre>

<p>}
```</p>

<p>The layout renders the same in IE6 as it does in the latest version of Chrome (23 as of this writing).</p>

<div style="overflow: hidden;">
    <div style="float: left; width: 49%;">
        <h4>IE6</h4>
        <img title="Styling the body element in IE6" src="http://tjvantoll.com/images/posts/2013-01-05/IE6.png">
    </div>
    <div style="float: right; width: 49%;">
        <h4>Chrome</h4>
        <img title="Styling the body element in Chrome" src="http://tjvantoll.com/images/posts/2013-01-05/Chrome.png">
    </div>
</div>


<p>Believe it or not using the <code>body</code> element as a top level container is actually safe in IE6.</p>

<p><a name="zoom"></a></p>

<h3>IE7</h3>

<p>If there are no issues with IE6 why am I still writing?  IE7 introduced a feature new to Internet Explorer, zoom, and with it came a new bug.</p>

<p>When a <code>margin</code> or <code>width</code> is applied to the <code>body</code> and the user zooms, IE7 incorrectly treats the left edge of the <code>body</code> as the edge of the viewport.  This shift bumps content on the right hand side of the page outside of the screen.  The image below shows the result of a zoomed in window and styled <code>body</code> in IE7.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-01-05/IE7Zoom.png" title="Zooming in IE7" style="max-height: 400px;"></p>

<p>This issue is not present using a wrapper <code>div</code>.</p>

<h3>Beyond IE7</h3>

<p>In my testing beyond IE7 there are no major issues using the <code>body</code> element as a top level container.  There are however a few things to be aware of.</p>

<p><a name="now"></a></p>

<h3>Positioning</h3>

<p>Any absolutely positioned elements will be positioned relative to the viewport rather than the newly placed <code>body</code>.  To fix this set <code>position: relative</code> on the <code>body</code> as such:</p>

<p>``` css Positioning elements relative to the body rather than the viewport
body {</p>

<pre><code>margin: 0 auto;
width: 90%;
position: relative;
</code></pre>

<p>}
```</p>

<h3>Backgrounds</h3>

<p>Backgrounds applied to the <code>body</code> will take up whole page regardless of margins.  Consider the following:</p>

<p>``` css
body {</p>

<pre><code>background: black;
margin: 0 auto;
width: 200px;
</code></pre>

<p>}
```</p>

<p>The screenshot below shows this.  The background of the entire viewport is black rather than a centered 200px block.</p>

<p><img src="http://tjvantoll.com/images/posts/2013-01-05/background-before.png" title="background on a body element" style="max-height: 300px;"></p>

<p>This can be worked around by applying a <code>background</code> on the <code>html</code> element:</p>

<p>``` css
html {</p>

<pre><code>background: white;
height: 100%;
</code></pre>

<p>}
body {</p>

<pre><code>background: black;
margin: 0 auto;
width: 200px;
min-height: 100%;
</code></pre>

<p>}
```</p>

<p>Note the <code>height</code> that was added to the <code>html</code> element and the <code>min-height</code> added to the <code>body</code>.  This ensures that the <code>background</code> applied to the <code>body</code> element will take up the entire height of the screen.</p>

<p>The rules above will now render as expected:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-01-05/background-after.png" title="background on a body element with background on html element" style="max-height: 300px;"></p>

<h3>scrollHeight and scrollWidth</h3>

<p>In WebKit based browsers the <code>body</code>'s <a href="https://developer.mozilla.org/en-US/docs/DOM/element.scrollHeight">scrollHeight</a> and <a href="https://developer.mozilla.org/en-US/docs/DOM/element.scrollWidth">scrollWidth</a> properties are unaffected by declared <code>height</code> and <code>width</code> styles.  For example:</p>

<p>``` html scrollHeight and scrollWidth on the body element
<html></p>

<pre><code>&lt;head&gt;&lt;/head&gt;
&lt;body style="height: 200px; width: 200px;"&gt;
    &lt;script&gt;
        console.log(document.body.scrollHeight);
        console.log(document.body.scrollWidth);
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>This will log <code>200</code> for both in all modern browsers with the exception of WebKit based ones.  WebKit will return the height and width of the viewport.</p>

<p>While you are unlikely to run into this directly, you may use a library that does.  For example, this <a href="http://bugs.jqueryui.com/ticket/8940">causes an issue</a> trying to constrain <a href="http://jqueryui.com/draggable/">jQuery UI draggables</a> within the <code>body</code>.</p>

<h3>Is it Safe to Use Yet?</h3>

<p>The <a href="#zoom">zoom issue in IE7</a> is bad, but if you're no longer supporting IE7 it's safe to drop the wrapper <code>div</code> and style the <code>body</code> directly.</p>

<p>That being said, there's no harm in leaving a wrapper <code>div</code> in place.  So if you have any doubt stick with <code>&lt;div id="wrapper"&gt;&lt;/div&gt;</code>.</p>

<p>Know of any other bugs with styling the <code>body</code> element?  Let me know in the comments.</p>
]]></content>
  </entry>
  
</feed>
