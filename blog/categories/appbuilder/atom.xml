<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AppBuilder | TJ VanToll's Blog]]></title>
  <link href="http://tjvantoll.com/blog/categories/appbuilder/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2015-03-19T14:29:48-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Speed Up Your Cordova App with the WKWebView Plugin]]></title>
    <link href="http://tjvantoll.com/2015/01/26/wkwebview-plugin/"/>
    <updated>2015-01-26T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2015/01/26/wkwebview-plugin</id>
    <content type="html"><![CDATA[<p>I woke up this morning to discover that the Telerik marketplace had a new WKWebView plugin:</p>

<blockquote class="twitter-tweet" lang="en"><p>Instantly speed up your PhoneGap/Cordova app on iOS 8 with the new WKWebView plugin: <a href="http://t.co/hft7Y5GDUJ">http://t.co/hft7Y5GDUJ</a></p>&mdash; Rob Lauer (@rdlauer) <a href="https://twitter.com/rdlauer/status/559713567315075072">January 26, 2015</a></blockquote>


<p>I had written about the <a href="http://developer.telerik.com/featured/why-ios-8s-wkwebview-is-a-big-deal-for-hybrid-development/">performance benefits of WKWebView</a> before, and Eddy Verbruggen—the author of the WKWebView plugin—has done <a href="https://twitter.com/eddyverbruggen/status/531192220498792448">some performance benchmarks</a> as well, so I knew the plugin would give a performance boost, but I had to see the benefits for myself.</p>

<p>So I did. I added the plugin to a few Cordova projects with <code>cordova plugin add https://github.com/Telerik-Verified-Plugins/WKWebView</code> and to a few AppBuilder ones with <code>appbuilder plugin add "WKWebView Polyfill" --release</code>.</p>

<blockquote>
    <ul>
        <li>The <code>--release</code> flag is necessary because the WKWebView plugin currently conflicts with AppBuilder's LiveSync functionality. LiveSync is only included on debug builds, so the <code>--release</code> flag avoids the conflict. This does mean that you need to perform builds that also include the <code>--release</code> flag to test the WKWebView—e.g. <code>appbuilder build ios --release</code> or <code>appbuilder deploy ios --release</code>.</li>
        <li>AppBuilder apps must run Cordova 3.7 to take advantage of the WKWebView plugin. You can check which version of Cordova your AppBuilder app uses with <code>appbuilder prop print FrameworkVersion</code>, and change it to 3.7 with <code>appbuilder prop set FrameworkVersion 3.7.0</code>.</li>
    </ul>
</blockquote>


<p>Installation is the only step to run the WKWebView plugin, which is pretty awesome. You just build your app with the plugin installed and that's it.</p>

<p>I could immediately tell that the performance difference was <em>noticeable</em>. It wasn't life altering, but it was there. I decided to make a brief video to show the difference in action, and to convince myself the change I seeing wasn't just in my head.</p>

<p>In the video below I run the same app twice, once with the WKWebView plugin installed (on the right), and once with it not (on the left). I made sure this app avoided the network, and I slowed the video down to 50% speed to make it easier to watch.</p>

<iframe width="100%" height="315" src="http://tjvantoll.com//www.youtube.com/embed/4jYAjhYyH74" frameborder="0" allowfullscreen></iframe>


<p>Now, this test isn't intended to be conclusive, statistically significant, or anything like that, and your experiences may vary. However, the performance difference shown in the video is consistent with what the statistics have shown, and what I've seen from playing with the plugin today: adding the WKWebView gives your hybrid app a small performance boost, basically for free. How much of a boost your app gets depends on what you're doing, with JavaScript-processing-heavy apps getting the most help, but even mundane apps like mine stand to benefit.</p>

<p>There are a few caveats that keep this plugin from being a true drop-in solution—for example third-party Cordova plugins that explicitly reference the UIWebView will be problematic—so you'll want to make sure to read through <a href="http://plugins.telerik.com/plugin/wkwebview">the WKWebView plugin's documentation</a> before you update your production apps.</p>

<p>That being said, it's my opinion that everyone with a Cordova app should try adding the plugin. Assuming you don't hit one of the edge cases, installing the plugin gives your apps a free performance boost, so why not?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating Google Play and iOS App Store Version Numbers with the AppBuilder CLI]]></title>
    <link href="http://tjvantoll.com/2015/01/09/updating-google-play-and-ios-app-store-version-numbers-with-the-appbuilder-cli/"/>
    <updated>2015-01-09T07:50:00-05:00</updated>
    <id>http://tjvantoll.com/2015/01/09/updating-google-play-and-ios-app-store-version-numbers-with-the-appbuilder-cli</id>
    <content type="html"><![CDATA[<p>I had some issues updating iOS and Android version numbers yesterday so I thought I'd write up what I learned. Here's the scenario: you already have an <a href="http://www.telerik.com/appbuilder">AppBuilder</a> app deployed to the iOS app store and Google Play, and you want to increase the app's version number from 1.0 to 1.0.1.</p>

<p>Doing so turns out to be as simple as running two commands:</p>

<p><code>
$ appbuilder prop set BundleVersion 1.0.1
$ appbuilder prop set AndroidVersionCode 2
</code></p>

<p>The <a href="http://docs.telerik.com/platform/appbuilder/configuring-your-project/project-properties-general#general-project-properties-in-the-appbuilder-command-line-interface"><strong><code>BundleVersion</code></strong></a> is publicly visible version number; it's what users see in Google Play and the iOS App Store. Under the hood, <code>BundleVersion</code> changes the <a href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102364"><code>CFBundleVersion</code></a> in your iOS app's Info.plist, and <a href="http://developer.android.com/guide/topics/manifest/manifest-element.html#vname"><code>android:versionName</code></a> in your Android app's AndroidManifest.xml.</p>

<p>The <a href="http://docs.telerik.com/platform/appbuilder/configuring-your-project/project-properties-for-android-devices#android-project-properties-in-the-appbuilder-command-line-interface"><strong><code>AndroidVersionCode</code></strong></a> corresponds to <a href="http://developer.android.com/guide/topics/manifest/manifest-element.html#vcode"><code>android:versionCode</code></a> in the Android app's AndroidManifest.xml, and is an integer value that Google requires you to update with each version of your app. You can increment it by 1, 10, or 10000—as long as it goes up. Google requires this because they let you set your <code>android:versionName</code> to any random string (unlike iOS, whose <code>CFBundleVersion</code> must be a number and has <a href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102364">well defined rules</a>).</p>

<p>Running the <code>appbuilder prop</code> command updates your project's .abproject with these changes, so you'll want to commit those updates to your source control program of choice.</p>

<h2>What's this projectVersion property?</h2>

<p>If you're like me and peruse configuration files more than the average person, you may have noticed a <code>projectVersion</code> property in your .abproject. Ignore this property, or at least try to. It's a meta property that AppBuilder maintains for its own purposes, and is not intended to be directly edited.</p>

<p>In fact, the entire .abproject is not intended to be directly edited. If you need to change something you see in .abproject do so with the <code>appbuilder prop</code> command. If you don't know what the property names mean, or the supported values, run <code>appbuilder prop print --help</code>.</p>

<p>Some property changes do nothing more than update the appropriate value your app's .abproject, but some property changes do more. For instance, running <code>appbuilder prop set FrameworkVersion 3.7.0</code> changes the <code>FrameworkVersion</code> in .abproject, but it also upgrades the cordova.*.js scripts within your project to version 3.7.0.</p>

<h2>Wrapping up</h2>

<p>I hope this was helpful. If you have any other questions about this feel free to ask in the comments. Thanks to <a href="https://twitter.com/admatha">Iva Koevska</a> for setting me straight on all of this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a PhoneGap App in 10 Seconds Using Nothing But a CLI]]></title>
    <link href="http://tjvantoll.com/2014/07/25/building-a-phonegap-app-in-10-seconds-using-nothing-but-a-cli/"/>
    <updated>2014-07-25T10:17:00-04:00</updated>
    <id>http://tjvantoll.com/2014/07/25/building-a-phonegap-app-in-10-seconds-using-nothing-but-a-cli</id>
    <content type="html"><![CDATA[<p>You may have seen Burke Holland's <a href="https://medium.com/@burkeholland/building-and-deploying-a-phonegap-app-in-36-seconds-6552399c12a8">"Building A PhoneGap App in 36 Seconds Using Nothing But a Browser"</a> article on Medium this morning. Although most people probably viewed the post as an interesting—and surprisingly fast—way of building an app, I saw the article as a direct challenge.</p>

<p>You see, although I work with AppBuilder in the browser from time to time, I prefer the AppBuilder CLI. And with the CLI, I can put Burke's 36 second time to shame. Below I build a PhoneGap app, performing the same steps Burke did, in TEN seconds:</p>

<p><img src="http://tjvantoll.com/images/posts/2014-07-25/10-seconds.gif" alt="10 seconds to build an app"></p>

<!--more-->


<h3>Full Disclosure</h3>

<ul>
<li>This was done using the <a href="https://github.com/Icenium/icenium-cli">Telerik AppBuilder CLI</a>.</li>
<li>I did <strong>NOT</strong> speed up the screen capture.</li>
<li>I <strong>DID</strong> practice this a few times.</li>
<li>I <strong>DID</strong> have to lookup the syntax for the <code>sed</code> command, because it makes no sense.</li>
<li>I <strong>DID</strong> use the <a href="http://www.telerik.com/appbuilder/companion-app">AppBuilder Companion app</a>, which I had pre-installed on my iPhone.</li>
<li>I <strong>DID</strong> rely on the Bash history for speed, which I deem fair, because that's a thing CLIs do.</li>
</ul>


<p>With the AppBuilder CLI installed (<code>npm install -g appbuilder</code>), and with the <a href="https://itunes.apple.com/us/app/telerik-appbuilder/id527547398?mt=8">AppBuilder iOS app</a> installed, you can run this yourself with the following four commands:</p>

<p><code>
$ appbuilder create hybrid gif --template=Blank
$ cd gif
$ sed -i '' 's/Apache Cordova/gif/g' index.html
$ appbuilder livesync ios --companion
</code></p>

<p>What's really cool is that as of <a href="http://blogs.telerik.com/appbuilder/posts/14-07-02/telerik-appbuilder-release-sharing-projects-cordova-update-nativescript-preview-and-more">the last AppBuilder release</a>, you can now share your code across the AppBuilder clients. That means, I can collborate on Burke's project from the CLI, and he can collaborate on mine from the browser—which I think is pretty cool.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting AppBuilder Projects to Facebook]]></title>
    <link href="http://tjvantoll.com/2014/02/06/connecting-appbuilder-projects-to-facebook/"/>
    <updated>2014-02-06T13:08:00-05:00</updated>
    <id>http://tjvantoll.com/2014/02/06/connecting-appbuilder-projects-to-facebook</id>
    <content type="html"><![CDATA[<p>One commonly requested, and non-trivial requirement PhoneGap/Cordova apps often have is Facebook integration. To perform the actual integration, hybrid Cordova apps have an advantage over traditional web apps: they can leverage the platform's native Facebook APIs.</p>

<p>The bridge between the JavaScript APIs and the native APIs takes the form of a Cordova plugin, named - crazily enough - the <a href="https://github.com/phonegap/phonegap-facebook-plugin">Cordova Facebook Plugin</a>. In this article we'll give a step-by-step guide to integrating this plugin into an <a href="http://www.telerik.com/appbuilder">AppBuilder</a> application; then we'll see what we can do with it.</p>

<p><em>Note: If you want to cut straight to the chase, the final example with the integration complete is available at <a href="https://github.com/tjvantoll/Facebook-Connect">https://github.com/tjvantoll/Facebook-Connect</a>. You can <a href="http://blogs.telerik.com/appbuilder/posts/13-12-19/git-started-with-github-in-mist">clone this project directly in AppBuilder</a>.</em></p>

<!--more-->


<h3>Adding the Plugin</h3>

<p>The first step to adding the plugin is to download it from <a href="https://github.com/phonegap/phonegap-facebook-plugin">https://github.com/phonegap/phonegap-facebook-plugin</a> - just click the <em>Download ZIP</em> button.</p>

<p>Then, with your project open in AppBuilder, select the <code>Plugins</code> directory, and select <em>Add</em> --> <em>From Archive</em> from the menu bar.</p>

<p><img src="/images/posts/2014-02-06/step-1.png" alt="Location of the From Archive menu" /></p>

<p>Select the ZIP file we just downloaded and click <em>Upload</em>.</p>

<p><img src="/images/posts/2014-02-06/step-2.png" alt="Add from archive dialog with newly download zip selected" /></p>

<p>Now add the following two <code>&lt;script&gt;</code> tags to your project's <code>index.html</code> file:</p>

<p>``` html</p>

<script src="cdv-plugin-fb-connect.js"></script>


<script src="facebook-js-sdk.js"></script>


<p>```</p>

<p>The plugin is now a part of your project, but before we dig into the its APIs, we have a bit of configuration we have to change.</p>

<h3>Configuring the Plugin</h3>

<p>In order for the Cordova plugin to speak to the native Facebook APIs, it has to know the id and name of <em>your</em> Facebook application. To get this, head over to <a href="https://developers.facebook.com/">https://developers.facebook.com/</a> and login to your app's dashboard settings. (If you don't have an app built in Facebook, you'll need to create one.) Here's what my app looks like:</p>

<p><img src="/images/posts/2014-02-06/facebook-dashboard.png" alt="The dashboard of my Facebook application" /></p>

<p>The two things we're interested in are the <strong>App ID</strong> and the <strong>Display Name</strong>. Take note of these and head back to AppBuilder, as we need to add these configuration variables to the plugin's <code>plugin.xml</code> file. Start by opening up <code>plugin.xml</code> and removing the two <code>&lt;preference&gt;</code> tags shown below.</p>

<p><img src="/images/posts/2014-02-06/step-3.png" alt="Visualization of earlier described steps" /></p>

<p>In Cordova plugins, <code>plugin.xml</code> files' <code>&lt;preference&gt;</code> tags are placeholders; they're a way of indicating that you need to change these strings elsewhere in the file. In the case of this plugin, you'll find <code>APP_ID</code> and <code>APP_NAME</code> used a few times as shown in the image below. You'll need to update the placeholder values with your app's actual data.</p>

<p><img src="/images/posts/2014-02-06/step-4.png" alt="Visualization of earlier described steps" /></p>

<p>And that's it! We now have Facebook integrated into our app, including the ability to use the full <a href="https://developers.facebook.com/docs/javascript/">Facebook JavaScript SDK</a>. So what can we do with it?</p>

<h3>Using the Facebook JavaScript SDK</h3>

<p>Facebook's APIs are provided through a <code>FB</code> global variable, and the first thing you must do with it is call <code>FB.init()</code>.</p>

<p>``` javascript
FB.init({</p>

<pre><code>appId: "204075246457176",
nativeInterface: CDV.FB
</code></pre>

<p>});
```</p>

<p>You can see that we again need to provide our Facebook's app id. We also need to set a <code>nativeInterface</code> property to <code>CDV.FB</code>. You won't find this property on Facebook's documentation, but it's what tells the Cordova plugin to step in and do its thing.</p>

<p>From here, there are several things we can do, but most of them require the user to be logged into Facebook. We can check whether the user is logged in using <code>FB.getLoginStatus()</code>.</p>

<p>``` javascript
FB.getLoginStatus(function( response ) {</p>

<pre><code>if ( response.status === "connected" ) {
    alert( "logged in" );
} else {
    alert( "not logged in" );
}
</code></pre>

<p>});
```</p>

<p>Or we can just prompt the user to login with <code>FB.login()</code>. Like most of Facebook's API methods, the first argument to <code>FB.login()</code> is a callback function to run when the login completes. The second argument is an object with a single <code>scope</code> property. The <code>scope</code> property needs to contain a comma delimited list of permissions your application needs. Here, we're asking the user to give us access to their email address.</p>

<p>``` javascript
FB.login(function( response ) {</p>

<pre><code>// Handle the response
</code></pre>

<p>}, { scope: "email" });
```</p>

<p><em>Note: Refer to Facebook's SDK documentation for a <a href="https://developers.facebook.com/docs/reference/login/extended-permissions">full list of the permissions you can request</a>.</em></p>

<p>When you call <code>FB.login()</code>, if the user is <em>not</em> logged in, they'll see a Facebook login form in a popup.</p>

<p><img src="/images/posts/2014-02-06/nexus-7-no-login.png" alt="Facebook login on Nexus 7" /></p>

<p>If they are logged in, they'll have to confirm that they want to give your application access to the information you requested.</p>

<p><img src="/images/posts/2014-02-06/nexus-7-login.png" alt="Facebook login on Nexus 7" /></p>

<p>Once they have given access, you can use Facebook's API to access what you need. For example the following retrieves the id, name, and picture of the user's friends.</p>

<p><code>javascript
FB.api( "/me/friends", { fields: "id, name, picture" });
</code></p>

<h3>Wrapping up</h3>

<p>To show this API in action, I built an AppBuilder app that logs the user in, and displays their friends in a <a href="http://demos.telerik.com/kendo-ui/mobile/listview/index.html">Kendo UI Mobile ListView</a>. The app is available at <a href="https://github.com/tjvantoll/Facebook-Connect">https://github.com/tjvantoll/Facebook-Connect</a>.</p>

<p>If you try this out, please let me know if everything works alright for you in the comments below. If there are any additional integrations or examples you'd like to see, let me know that as well.</p>
]]></content>
  </entry>
  
</feed>
