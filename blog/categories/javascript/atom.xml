<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2014-12-29T08:30:37-05:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A jQuery UI Vertical Tabs Extension]]></title>
    <link href="http://tjvantoll.com/2014/07/04/a-jquery-ui-vertical-tabs-extension/"/>
    <updated>2014-07-04T10:13:00-04:00</updated>
    <id>http://tjvantoll.com/2014/07/04/a-jquery-ui-vertical-tabs-extension</id>
    <content type="html"><![CDATA[<p>The single coolest thing in jQuery UI is the <a href="http://learn.jquery.com/jquery-ui/widget-factory/extending-widgets/">extension mechanism</a> built into the <a href="http://api.jqueryui.com/jquery.widget/">widget factory</a>. In my <a href="http://tjvantoll.com/jquery-ui-in-action.html">upcoming book</a> on jQuery UI I devote an entire chapter to building extensions, and now that the book is <em>mostly</em> done, I want to publish some of the extensions I built for the world to use.</p>

<p>The first of these is an extension to display a <a href="http://jqueryui.com/tabs/">jQuery UI tabs widget</a> vertically. The extension is simple: it adds a single <code>orientation</code> option that you can set to <code>"horizontal"</code> or <code>"vertical"</code>. Here it is in action:</p>

<p><div class="code_example"><h6>jQuery UI Vertical Tabs Extension<a href="/demos/2014-07-04/index.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 325px;" frameborder="0" src="/demos/2014-07-04/index.html"></iframe></div></p>

<p>The extension <a href="https://github.com/tjvantoll/jquery-ui-vertical-tabs#amd-usage">supports AMD usage</a>, including <a href="http://learn.jquery.com/jquery-ui/environments/amd/">the new AMD modules introduced in jQuery UI 1.11</a>. If you're a Bower user, you can install the extension with <code>bower install jquery-ui-vertical-tabs</code>.</p>

<p>Please <a href="https://github.com/tjvantoll/jquery-ui-vertical-tabs">check out the extension on GitHub</a>. Try it; report issues; and star it if you like it. The extension is released under the MIT license, so it use it in any project you'd like. I'll have more of these coming in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Only the gzip Size Matters]]></title>
    <link href="http://tjvantoll.com/2014/01/27/only-the-gzip-size-matters/"/>
    <updated>2014-01-27T19:32:00-05:00</updated>
    <id>http://tjvantoll.com/2014/01/27/only-the-gzip-size-matters</id>
    <content type="html"><![CDATA[<p>Let's just get it out there: the only size that matters for a CSS or JavaScript file is its gzipped size.</p>

<p>And by gzipped size I mean: the size of the file after it's compressed using <a href="http://en.wikipedia.org/wiki/Gzip">gzip</a>'s compression algorithm. All browsers since IE6 have supported gzipped assets, and enabling gzip on web servers has been a <a href="https://developers.google.com/speed/docs/best-practices/payload#GzipCompression">best practice</a> for years now; therefore it's relatively safe to assume that everyone who cares about the size of CSS or JavaScript files is gzipping them.</p>

<p>So if you're trying to find how big a front-end library is, the answer you need is not in Finder or Windows Explorer. While the uncompressed file size can give you a rough idea, you have no idea what the user will actually download until you gzip the files.</p>

<!--more-->


<h3>Running gzip</h3>

<p>If you're on OS X or Linux, you can run the <code>gzip</code> command on any file to compress it. For example the following shows the before and after of compressing jQuery 2.1.0.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery.png" alt="Running gzip on jQuery from the command line"></p>

<p>There are two things to note here:</p>

<ol>
<li><code>gzip</code> made quite the difference in file size - 82K down to 29K.</li>
<li><code>gzip</code> replaces the original file; <code>jquery.js</code> is now <code>jquery.js.gz</code>.</li>
</ol>


<p>Because replacing the original file is a bit annoying, you can make <code>gzip</code> generate a new file with a <a href="http://unix.stackexchange.com/questions/46786/how-to-tell-gzip-to-keep-original-file#answer-58814">little shell magic</a>, shown below.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery-new-file.png" alt="Running gzip on jQuery from the command line and generating a new file"></p>

<div class="warning">Commenter yalue <a href="http://tjvantoll.com/2014/01/27/only-the-gzip-size-matters/#comment-1278948548">pointed out</a> that the <code>gzip</code> command has a <code>--keep</code> option that preserves the original file. So you can run <code>gzip jquery.js --keep</code> instead of <code>gzip < jquery.js > jquery.js.gz</code>.</div>


<h3>Why It Matters</h3>

<p>There is no set percentage that <code>gzip</code> will reduce the size of a JavaScript or CSS file by. There is no way to know for sure other than running <code>gzip</code>.</p>

<p>To show this, let's look at the <a href="https://twitter.com/nelsonic/status/426724640090640384">specific situation</a> that made me feel the need to write this.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/twitter.png" alt="View of Twitter discussion of the size of the jQuery Mobile library"></p>

<p>414K! Yikes! But remember, this is the file size that is shown in Finder, not the size that the user is actually going to download from a server with gzip enabled.</p>

<p>To see what the user will actually download, we have to run <code>gzip</code>. Below we run <code>gzip</code> on each of jQuery Mobile's files.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery-mobile.png" alt="Running gzip on jQuery Mobile files"></p>

<p>As you can see, <code>gzip</code> reduced our two files down to a combined 88K. Quite the difference! Take note of one more thing: the drastic difference running <code>gzip</code> made on <code>jquery.mobile.css</code> - 216K to 25K. A savings of 88.5%!</p>

<p>Why was the compression so successful here?</p>

<p><a href="http://blog.jquerymobile.com/2013/12/23/jquery-mobile-1-4-0-released/">jQuery Mobile 1.4</a> made a big change to the way they handle images - namely, they now embed images directly within their css file to avoid separate HTTP requests. Because of this change, <a href="http://code.jquery.com/mobile/1.4.0/jquery.mobile-1.4.0.min.css">their CSS file</a> is packed full of <a href="https://developer.mozilla.org/en-US/docs/data_URIs">data URIs</a>.</p>

<p>How does this relate to <code>gzip</code>?</p>

<p>At a high level, the compression algorithm that runs under the hoods of <code>gzip</code> finds repeated strings and replaces them with symbols. Because of this, the files that compress best are the ones with a lot of repeated strings - such as a file with a bunch of data URIs.</p>

<p>Just look at all the repeated strings in jQuery Mobile's CSS. <code>gzip</code> is practically salivating.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery-mobile-source.png" alt="View of jQuery mobile 1.4's CSS source"></p>

<p><em>Note: If you concatenate your files <code>gzip</code> gets better. Bigger files = more repeated strings to substitute.</em></p>

<h3>Wrapping Up</h3>

<p>Anyways, the point is: if you're assessing the size of a library, framework, or whatever - run <code>gzip</code> on it first. Since it's what the user actually downloads, it's the only size that matters for front-end assets.</p>

<p>Because size is paramount in jQuery core, they actually make <a href="http://bugs.jquery.com/ticket/12229">changes</a> to improve how well the library is optimized by <code>gzip</code>'s compression algorithm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugs with document.activeElement in Internet Explorer]]></title>
    <link href="http://tjvantoll.com/2013/08/30/bugs-with-document-activeelement-in-internet-explorer/"/>
    <updated>2013-08-30T14:46:00-04:00</updated>
    <id>http://tjvantoll.com/2013/08/30/bugs-with-document-activeelement-in-internet-explorer</id>
    <content type="html"><![CDATA[<p>There are two <em>fun</em> bugs related to <code>document.activeElement</code> in IE that have come up recently in jQuery UI. To help save others some pain, I felt these needed to be documented.</p>

<h3>Accessing <code>document.activeElement</code> from an <code>&lt;iframe&gt;</code> in IE9</h3>

<p>Let's say you have an <code>&lt;iframe&gt;</code>.</p>

<p>``` html</p>

<iframe src="other.html"></iframe>


<p>```</p>

<p>And in that <code>&lt;iframe&gt;</code>, you want to know what element has focus.</p>

<p>``` html
/<em> other.html </em>/</p>

<script>
    console.log( parent.document.activeElement );
</script>


<p>```</p>

<p>In all browsers except IE9, this will log the element that has focus in the parent document (the <code>&lt;body&gt;</code> by default). In IE9 this will inexplicably throw an <code>"Unspecified Error"</code>.</p>

<p>Yes, you read right; ACCESSING the <code>activeElement</code> property of a parent <code>document</code> throws an error in IE9.</p>

<!--more-->


<p>What can you to about it? Since the access causes the error, the only recourse is a try / catch.</p>

<p>``` javascript
var activeElement;
try {</p>

<pre><code>activeElement = parent.document.activeElement;
</code></pre>

<p>} catch( error ) {</p>

<pre><code>activeElement = parent.document.body;
</code></pre>

<p>}
```</p>

<p>Luckily this is a problem unique to IE9; the same behavior is not present in IE 7, 8, or 10.</p>

<h3>Blurring the <code>&lt;body&gt;</code> Switches Windows in IE9 and IE10</h3>

<p>If you call <code>document.body.blur()</code> in IE9 or IE10, you will switch application windows. Yes you again read right; if you have IE and Notepad open, calling <code>document.body.blur()</code> will switch focus to Notepad. If you don't believe me, open IE9 or IE10 and try for yourself - run <code>document.body.blur()</code> in the console.</p>

<p>Why is this problematic?</p>

<p>Recall from the earlier section that the default <code>activeElement</code> is the <code>&lt;body&gt;</code>. Therefore, if you generically call <code>document.activeElement.blur()</code>, you will likely end up switching application windows for your users.</p>

<p>The workaround for this is to ensure the <code>activeElement</code> is not the <code>&lt;body&gt;</code> before calling <code>blur()</code>.</p>

<p>``` javascript
if ( document.activeElement.nodeName.toLowerCase() !== "body" ) {</p>

<pre><code>document.activeElement.blur();
</code></pre>

<p>}
```</p>

<p>Luckily this problem has been fixed in IE11; <code>document.body.blur()</code> no longer switches windows.</p>

<h3>Putting it all Together</h3>

<p>This is <a href="https://github.com/jquery/jquery-ui/commit/eae2c4b358af3ebfae258abfe77eeace48fcefcb">the commit</a> I ended up using for the jQuery UI bugs.</p>

<p>From:
<code>javascript
$( document.activeElement ).blur();
</code></p>

<p>To:
``` javascript
// support: IE9
// IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
try {</p>

<pre><code>// Support: IE9+
// If the &lt;body&gt; is blurred, IE will switch windows, see #9520
if ( document.activeElement &amp;&amp; document.activeElement.nodeName.toLowerCase() !== "body" ) {
    // Blur any element that currently has focus, see #4261
    $( document.activeElement ).blur();
}
</code></pre>

<p>} catch ( error ) {}
```</p>

<p>Sigh.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a jQuery UI Dialog with a Submit Button]]></title>
    <link href="http://tjvantoll.com/2013/07/10/creating-a-jquery-ui-dialog-with-a-submit-button/"/>
    <updated>2013-07-10T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2013/07/10/creating-a-jquery-ui-dialog-with-a-submit-button</id>
    <content type="html"><![CDATA[<p>Say you have the following submittable <code>&lt;form&gt;</code>:</p>

<p>``` html
<form id="myForm" action="http://google.com"></p>

<pre><code>&lt;label for="search"&gt;Search For:&lt;/label&gt;
&lt;input type="text" id="search" name="q"&gt;
&lt;button type="submit"&gt;Find&lt;/button&gt;
</code></pre>

<p></form>
```</p>

<p>And you want to show the form in a jQuery UI dialog. You can do that with the code below:</p>

<p>``` javascript Turning a form into a dialog
$( "form" ).dialog({</p>

<pre><code>open: function() {
    // On open, hide the original submit button
    $( this ).find( "[type=submit]" ).hide();
},
buttons: [
    {
        text: "Find",
        click: $.noop,
        type: "submit"
    },
    {
        text: "Close",
        click: function() {
            $( this ).dialog( "close" );
        }
    }
]
</code></pre>

<p>});
```</p>

<p>Which looks like this:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-07-10/form-dialog.png" alt="Display of the form within a jQuery UI dialog"></p>

<h3>The Problem</h3>

<p>There's one problem with this - the "Find" button doesn't work. Because of the generated structure of a jQuery UI dialog, the buttons are not within the <code>&lt;form&gt;</code> itself. Therefore, the buttons are not associated with the <code>&lt;form&gt;</code>. You can see the structure below:</p>

<!-- more -->


<p><img src="http://tjvantoll.com/images/posts/2013-07-10/markup.png" alt="Markup of a UI dialog showing the the buttons are not children of the content."></p>

<p>Note that the <code>&lt;button type="submit"&gt;</code> is not within the <code>&lt;form&gt;</code>.</p>

<h3>Solution</h3>

<p>There are a few ways we can work around this. One is avoid the <a href="http://api.jqueryui.com/dialog/#option-buttons">buttons option</a> and leave the original submit button in place. This works, but you lose the formatted display.</p>

<h3>Explicit Click Handler</h3>

<p>Another solution is to add a <code>click</code> handler to the button that submits the form:</p>

<p>``` js Using a Click Handler to Submit the Form
var form = $( "form" ).dialog({</p>

<pre><code>...
buttons: [
    {
        text: "Find",
        click: function() {
            form.submit();
        }
    }
    ...
]
</code></pre>

<p>});
```</p>

<p>This works, but you lose the browsers <a href="/2013/01/01/enter-should-submit-forms-stop-messing-with-that/">browser's default enter key handling</a>. Therefore it has to be replicated as well:</p>

<p>``` javascript Adding Enter Key Handling
var form = $( "form" ).dialog({ ... });
form.on( "keypress", "input[type=text]", function( event ) {</p>

<pre><code>if ( event.keyCode == 13 ) {
    form.submit();
}
</code></pre>

<p>});
```</p>

<h4>Form Attribute</h4>

<p>An elegant solution to this problem is to use HTML5's new <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-form">form attribute</a>. The attribute allows you to associate a <code>&lt;form&gt;</code> with a <code>&lt;button&gt;</code>, even if the <code>&lt;button&gt;</code> is not a descendant of the <code>&lt;form&gt;</code>. It's even smart enough to keep the <a href="/2013/01/01/enter-should-submit-forms-stop-messing-with-that/">browser's default enter key handling</a> in place.</p>

<p>For example here's the example <code>&lt;form&gt;</code> with a sibling (rather than child) submit button:</p>

<p>``` html
<form id="myForm" action="http://google.com"></p>

<pre><code>&lt;label for="search"&gt;Search For:&lt;/label&gt;
&lt;input type="text" id="search" name="q"&gt;
</code></pre>

<p></form>
<button type="submit" form="myForm">Find</button>
```</p>

<p>The <code>&lt;button&gt;</code> is outside of the <code>&lt;form&gt;</code>, but because its <code>form</code> attribute is equal to the <code>&lt;form&gt;</code>'s <code>id</code>, the <code>&lt;button&gt;</code> will submit the <code>&lt;form&gt;</code> regardless.</p>

<h4>Using the Form Attribute on a Dialog</h4>

<p>To add this attribute to the dialog version, we'll pass <code>form: "myForm"</code> into the <code>buttons</code> option for the Find button:</p>

<p>``` html Turning a form into a dialog
<form id="myForm" action="http://google.com"></p>

<pre><code>&lt;label for="search"&gt;Search For:&lt;/label&gt;
&lt;input type="text" id="search" name="q"&gt;
&lt;button type="submit"&gt;Find&lt;/button&gt;
</code></pre>

<p></form></p>

<script>
    $( "form" ).dialog({
        open: function() {
            // On open, hide the original submit button
            $( this ).find( "[type=submit]" ).hide();
        },
        buttons: [
            {
                text: "Find",
                click: $.noop,
                type: "submit",
                form: "myForm" // <-- Make the association
            },
            {
                text: "Close",
                click: function() {
                    $( this ).dialog( "close" );
                }
            }
        ]
    });
</script>


<p>```</p>

<p><a href="/demos/2013-07-10/form.html">Live Example</a></p>

<h3>Support</h3>

<p>The <code>form</code> attribute is implemented in Firefox, Chrome, Safari 5.1+, and Opera, HOWEVER, IE (as of version 10) still does not support the attribute.</p>

<p>Because the form attribute is so handy here, I wrote a polyfill that adds support in browsers that don't support it natively: <a href="https://gist.github.com/tjvantoll/5911571">https://gist.github.com/tjvantoll/5911571</a>. The source is below:</p>

<p>``` javascript
/<em>*
 * The form attribute can be used to associate a submit button with a form, even
 * if the button is not a child of the <form> itself.
 *
 * This polyfill uses a support check taken from Modernizr and polyfills the
 * functionality using jQuery.
 </em>/
(function() {</p>

<pre><code>// Via Modernizr
function formAttributeSupport() {
    var form = document.createElement( "form" ),
        input = document.createElement( "input" ),
        div = document.createElement( "div" ),
        id = "formtest"+ ( new Date().getTime() ),
        attr,
        bool = false;

        form.id = id;

    // IE6/7 confuses the form idl attribute and the form content attribute
    if ( document.createAttribute ) {
        attr = document.createAttribute("form");
        attr.nodeValue = id;
        input.setAttributeNode(attr);
        div.appendChild(form);
        div.appendChild(input);

        document.documentElement.appendChild(div);

        bool = form.elements.length === 1 &amp;&amp; input.form == form;

        div.parentNode.removeChild(div);
    }

    return bool;
};

if ( !formAttributeSupport() ) {
    $( document )
        .on( "click", "[type=submit][form]", function( event ) {
            event.preventDefault();
            var formId = $( this ).attr( "form" ),
            $form = $( "#" + formId ).submit();
        })
        .on( "keypress", "form input", function( event ) {
            var $form;
            if ( event.keyCode == 13 ) {
                $form = $( this ).parents( "form" );
                if ( $form.find( "[type=submit]" ).length == 0 &amp;&amp;
                    $( "[type=submit][form=" + $( this ).attr( "form" ) + "]" ).length &gt; 0 ) {
                    $form.submit();
                }
            }
        });
}
</code></pre>

<p>}());
```</p>

<p>This can be included anywhere on the page after jQuery is included.</p>

<p>Note that this polyfill only attempts to add support for the <code>form</code> attribute on submit buttons. The <code>form</code> attribute can also be applied to other form elements such as <code>&lt;input&gt;</code>s, <code>&lt;select&gt;</code>s, and <code>&lt;textarea&gt;</code>s, but that is beyond the scope of this script.</p>

<p>If you encounter any issues with this polyfill let me know in the comments.</p>

<h3>Conclusion</h3>

<p>If you need a dialog with a submit button the easiest solution is to add a <code>click</code> handler that manually submits the form. While this is not ideal, it'll work everywhere with no extra effort. Just make sure that you add Enter key handling to text inputs within the <code>&lt;form&gt;</code>.</p>

<p>Long term the <code>form</code> attribute is the solution to this problem. You can try it today as long as you're aware that you need to polyfill for IE support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Semantic Class Names to Show and Hide Elements]]></title>
    <link href="http://tjvantoll.com/2013/06/19/using-semantic-class-names-to-show-and-hide-elements/"/>
    <updated>2013-06-19T21:29:00-04:00</updated>
    <id>http://tjvantoll.com/2013/06/19/using-semantic-class-names-to-show-and-hide-elements</id>
    <content type="html"><![CDATA[<p>Showing and hiding elements has the potential to get complicated in large applications.</p>

<p>As a small example, say you have the following form that both displays a user's data as well as allows them to edit it:</p>

<p>``` html
<form></p>

<pre><code>&lt;fieldset&gt;
    &lt;legend&gt;Account Information&lt;/legend&gt;

    &lt;div&gt;
        &lt;label for="name"&gt;Name:&lt;/label&gt;
        &lt;input type="text" id="name" value="TJ" required&gt;
        &lt;span class="display"&gt;TJ&lt;/span&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;label for="email"&gt;Email:&lt;/label&gt;
        &lt;input type="email" id="email" value="tj@somedomain.com" required&gt;
        &lt;span class="display"&gt;tj@somedomain.com&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="actions"&gt;
        &lt;button type="button" class="edit"&gt;Edit&lt;/button&gt;
        &lt;button type="submit" class="save"&gt;Save&lt;/button&gt;
        &lt;button type="button" class="cancel"&gt;Cancel&lt;/button&gt;
    &lt;/div&gt;
&lt;/fieldset&gt;
</code></pre>

<p></form>
```</p>

<!-- more -->


<p>Without any logic both states of the form display:</p>

<p><div class="code_example"><h6>Initial Form Display<a href="/demos/2013-06-19/initialForm.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 300px;" frameborder="0" src="/demos/2013-06-19/initialForm.html"></iframe></div></p>

<h3>Adding the Logic</h3>

<p>Here's the goal. The Edit button should:</p>

<ul>
<li>Show the <code>&lt;input&gt;</code>s.</li>
<li>Show the Save button.</li>
<li>Show the Cancel button.</li>
<li>Hide the Edit button.</li>
<li>Hide the text in the <code>&lt;span&gt;</code>s.</li>
</ul>


<p>The Cancel button should then undo these changes.</p>

<p>The traditional approach to this problem is to show and hide elements explicitly in JavaScript:</p>

<p>``` javascript
$( ".edit" ).on( "click", function() {</p>

<pre><code>$( ".display, .edit" ).hide();
$( ".cancel, .save, input" ).show();
</code></pre>

<p>});
$( ".cancel" ).on( "click", function() {</p>

<pre><code>$( ".display, .edit" ).show();
$( ".cancel, .save, input" ).hide();
</code></pre>

<p>});
```</p>

<p>To get the initial state of the form correct you also need some CSS:</p>

<p>``` css
.cancel, .save, input {</p>

<pre><code>display: none;
</code></pre>

<p>}
```</p>

<p>Because the list of elements has to be specified in JavaScript and CSS, this logic will be difficult to maintain. And this is for a trivial example; usually requirements are much more complex.</p>

<p>How can we make this better?</p>

<h3>Semantic Class Names</h3>

<p>Instead of targeting individual elements in JavaScript, let's add a class name to the parent element that makes the most sense, in this case, the <code>&lt;form&gt;</code>:</p>

<p>``` javascript
$( ".edit" ).on( "click", function() {</p>

<pre><code>$( this ).parents( "form" ).addClass( "editing" );
</code></pre>

<p>});
$( ".cancel" ).on( "click", function() {</p>

<pre><code>$( this ).parents( "form" ).removeClass( "editing" );
</code></pre>

<p>});
```</p>

<p>Since the logic is simple, this can be written library-free as well (<em>note <code>classList</code> is not available in IE &lt; 10</em>):</p>

<p>``` javascript
(function() {</p>

<pre><code>var form = document.querySelector( "form" ),
    editButton = document.querySelector( ".edit" ),
    cancelButton = document.querySelector( ".cancel" );

editButton.addEventListener( "click", function() {
    form.classList.add( "editing" ); 
});
cancelButton.addEventListener( "click", function() {
    form.classList.remove( "editing" ); 
});
</code></pre>

<p>}());
```</p>

<h3>Advantages of Using Semantic Classes</h3>

<p>There are 2 major advantages to this approach.</p>

<p>1) All display logic is now handled in CSS:</p>

<p>``` css
.cancel, .save, input {</p>

<pre><code>display: none;
</code></pre>

<p>}
.editing .save,
.editing .cancel,
.editing input {</p>

<pre><code>display: inline-block;
</code></pre>

<p>}
.editing .edit,
.editing .display {</p>

<pre><code>display: none;
</code></pre>

<p>}
```</p>

<p>2) You have a styling hook that can be used to make further changes to the display. For example, you might want to bold the labels when editing:</p>

<p>``` css
.editing label {</p>

<pre><code>font-weight: bold;
</code></pre>

<p>}
```</p>

<p>The final display of the form looks like this:</p>

<p><div class="code_example"><h6>Semantic Class Approach<a href="/demos/2013-06-19/finalForm.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 300px;" frameborder="0" src="/demos/2013-06-19/finalForm.html"></iframe></div></p>

<h3>Conclusion</h3>

<p>This is not a technique that I came up with but I've used it successfully in several large applications and have found that it scales well over time.</p>

<p>Do you have any other tricks you use to show &amp; hide elements? If so, let me know in the comments.</p>
]]></content>
  </entry>
  
</feed>
