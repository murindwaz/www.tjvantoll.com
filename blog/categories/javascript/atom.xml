<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | TJ VanToll]]></title>
  <link href="http://tjvantoll.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2013-06-09T00:27:55-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Showing a Resize Icon on a jQuery UI Dialog]]></title>
    <link href="http://tjvantoll.com/2013/05/28/showing-a-resize-icon-on-a-jquery-ui-dialog/"/>
    <updated>2013-05-28T21:09:00-04:00</updated>
    <id>http://tjvantoll.com/2013/05/28/showing-a-resize-icon-on-a-jquery-ui-dialog</id>
    <content type="html"><![CDATA[<p>Upon <a href="http://jqueryui.com/upgrade-guide/1.10/">upgrading to jQuery UI 1.10</a> you might notice a visual change to the dialog widget - the resize icon no longer displays by default:</p>

<p>Default dialog display in 1.9:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-05-28/dialog-1.9.png" alt="Default display of jQuery UI's dialog in version 1.9"></p>

<p>Default dialog display in 1.10:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-05-28/dialog-1.10.png" alt="Default display of jQuery UI's dialog in version 1.10"></p>

<p>The dialog is still resizable, the icon is just not displayed anymore. The change was made because when a dialog contains scrolling content, the scrollbar becomes very difficult to use when the resize icon is present, especially in Windows browsers (see <a href="http://bugs.jqueryui.com/ticket/4575">bug #4575</a>).</p>

<p>The image below is of a version 1.9 dialog in IE9, note how the down arrow of the scrollbar and the resize icon are essentially on top of each other:</p>

<p><img src="http://tjvantoll.com/images/posts/2013-05-28/ie9-dialog.png" alt="Display of a scrolling jQuery UI dialog in IE9."></p>

<h3>Adding the Resize Icon Back</h3>

<p>To get the icon back, you have to override the rules that position the icon:</p>

<p>``` css
.ui-dialog .ui-resizable-se {</p>

<pre><code>width: 14px;
height: 14px;
right: 3px;
bottom: 3px;
background-position: -80px -224px;
</code></pre>

<p>}
```</p>

<p>This will display as follows:</p>

<p><div class="code_example"><h6>Dialog with a Resizable Icon<a href="/demos/2013-05-28/dialog.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 300px;" frameborder="0" src="/demos/2013-05-28/dialog.html"></iframe></div></p>

<p>Remember that there is a reason the icon was removed from the default dialog. If you have scrolling dialogs, you should not add the icon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why are Enter Keypresses Clicking My Buttons in IE?]]></title>
    <link href="http://tjvantoll.com/2013/05/22/why-are-enter-keypresses-clicking-my-buttons-in-ie/"/>
    <updated>2013-05-22T22:15:00-04:00</updated>
    <id>http://tjvantoll.com/2013/05/22/why-are-enter-keypresses-clicking-my-buttons-in-ie</id>
    <content type="html"><![CDATA[<p>When you press the Enter key in a textbox, the browser will automatically attempt to perform an <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#implicit-submission">implicit submission</a> of the textbox's <code>&lt;form&gt;</code>.</p>

<p>For example, if you press Enter in the textbox of the following <code>&lt;form&gt;</code> it will submit a search query to Google:</p>

<p>``` html
<form action="http://google.com"></p>

<pre><code>&lt;input name="q" type="text"&gt;
&lt;input type="submit"&gt;
</code></pre>

<p></form>
```</p>

<!--more-->


<p>The same will occur if you use a <code>&lt;button&gt;</code> element, which has a default <code>type</code> of <code>submit</code>:</p>

<p>``` html
<form action="http://google.com"></p>

<pre><code>&lt;input name="q" type="text"&gt;
&lt;button&gt;Submit&lt;/button&gt;
</code></pre>

<p></form>
```</p>

<p>In each of these examples a <code>click</code> event will be triggered on the form's <code>input[type="submit"]</code> / <code>button[type="submit"]</code>. This is all expected and speced behavior that is consistently implemented across browsers.</p>

<h3>Internet Explorer</h3>

<p>Internet Explorer has an annoying quirk that still exists as of IE10: submit buttons can be clicked when Enter is pressed in a textbox, even when no <code>&lt;form&gt;</code> is present. Consider the example below:</p>

<p>``` html
<input type="text"></p>

<!-- other stuff -->


<p><button>Some Unrelated Action</button>
```</p>

<p>Pressing Enter in this textbox in IE will click the completely unrelated <code>&lt;button&gt;</code>. No other browsers exhibit this behavior.</p>

<p>I have no idea what IE's algorithm for selecting a submit button is, but it will find buttons in completely unrelated portions of the DOM. For instance it is responsible for a <a href="http://bugs.jqueryui.com/ticket/9312">jQuery UI bug</a> by causing a dialog's close button to be triggered on enter keypresses in unrelated textboxes.</p>

<h3>Solution</h3>

<p>All <code>&lt;input&gt;</code>s should be within a <code>&lt;form&gt;</code>, and all forms should have a submit button. So if you're running into this bug, changing your markup to be semantic will avoid this issue altogether.</p>

<p>If for whatever reason that's not an option, you can add <code>type="button"</code> to the <code>&lt;button&gt;</code>:</p>

<p>``` html
<input type="text"></p>

<!-- other stuff -->


<p><button type="button">Some Unrelated Action</button>
```</p>

<p>This will override the default <code>type="submit"</code> and prevent IE from clicking the <code>&lt;button&gt;</code> on Enter keypresses.</p>

<p>If anybody has knowledge of the algorithm IE uses to find submittable elements when no <code>&lt;form&gt;</code>s are present please let me know in the comments. I'm very curious.</p>

<h4>Related Reading</h4>

<ul>
<li><a href="/2013/01/01/enter-should-submit-forms-stop-messing-with-that/">The Enter Key should Submit Forms, Stop Suppressing it</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ternary Operators for More Maintainable Templates]]></title>
    <link href="http://tjvantoll.com/2013/04/26/using-ternary-operators-for-more-maintainable-templates/"/>
    <updated>2013-04-26T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2013/04/26/using-ternary-operators-for-more-maintainable-templates</id>
    <content type="html"><![CDATA[<p>With the rise of JavaScript MVC frameworks, writing templates has become a large part of many web developer's workflow. As such, I thought I'd share a tip that has made my templates far more readable and maintainable over the years, ternary operators.<!-- http://jsbin.com/ekiwal/3/edit --></p>

<p><i>Note: For my examples I'm using <a href="http://underscorejs.org/#template">Underscore's templates</a>, but this same tip applies to any templating language, even traditional server side ones like PHP.</i></p>

<!-- more -->


<h3>Example</h3>

<p>Let's say you have the following data for your application:</p>

<p>``` javascript
var items = [</p>

<pre><code>{ name: 'Clock', selected: false },
{ name: 'Chair', selected: false },
{ name: 'Radio', selected: true }
</code></pre>

<p>];
```</p>

<p>And you want to run this data through a template to generate an HTML list. You might start with something like this:</p>

<p>``` html</p>

<ul>
    <% _.each( items, function( item ) { %>
        <li>
            <%- item.name %>
        </li>
    <% }); %>
</ul>


<p>```</p>

<p>This works fine.  But chances are, for a real application you'll need to do something significantly more complicated than this.  As a first step, let's say you have to add a CSS hook for selected items. You could accomplish that with an if check around each list item:</p>

<p>``` html</p>

<ul>
    <% _.each( items, function( item ) { %>
        <% if ( item.selected ) { %>
            <li class="selected">
        <% } else { %>
            <li>
        <% } %>
            <%- item.name %>
        </li>
    <% }); %>
</ul>


<p>```</p>

<p>Unfortunately this adds 4 lines of code and some unfortunate indentation just to add a simple class. Another alternative is to put the if check within the attribute:</p>

<p>``` html</p>

<ul>
    <% _.each( items, function( item ) { %>
        <li class="<% if ( item.selected ) { %>selected<% } %>">
            <%- item.name %>
        </li>
    <% }); %>
</ul>


<p>```</p>

<p>This isn't bad, but personally I find this code difficult to scan. I prefer to handle this situation with a ternary operator:</p>

<p>``` html</p>

<ul>
    <% _.each( items, function( item ) { %>
        <li class="<%= (item.selected) ? 'selected' : '' %>">
            <%- item.name %>
        </li>
    <% }); %>
</ul>


<p>```</p>

<p>Yes this is a stylistic thing, but I find this clearer and more readable. This will produce an unnecessary empty class attribute on non-selected items, but I believe the readability of the code to be far more important.</p>

<p>For added fun, ternary operators can be nested. Say your application now has to handle deleted items:</p>

<p>``` javascript
var items = [</p>

<pre><code>{ name: 'Clock', selected: false, deleted: true },
{ name: 'Chair', selected: false, deleted: false },
{ name: 'Radio', selected: true, deleted: false }
</code></pre>

<p>];
```</p>

<p>The following template shows how nested ternaries could be used to handle either a selected or deleted hook:</p>

<p><i>Note: This assumes that the selected and deleted states will not occur at the same time.</i></p>

<p>``` html</p>

<ul>
    <% _.each( items, function( item ) { %>
        <li class="<%= (item.selected) ? 'selected' :
                       (item.deleted) ? 'deleted' : '' %>">
            <%- item.name %>
        </li>
    <% }); %>
</ul>


<p>```</p>

<p>Here are a couple other examples of how you could structure this check. The most important thing is to find something that works for you, or more importantly, the person who will be maintaining your code.</p>

<p>``` html</p>

<ul>
    <% _.each( items, function( item ) { %>
        <li class="<% if (item.selected) { %>selected<% } %>
                   <% if (item.deleted) { %>deleted<% } %>">
            <%- item.name %>
        </li>
    <% }); %>
</ul>


<p>```</p>

<p>``` html</p>

<ul>
    <% _.each( items, function( item ) { %>
        <li class="
          <% if (item.selected) { %> selected <% } %>
          <% if (item.deleted)  { %> deleted  <% } %>
        ">
            <%- item.name %>
        </li>
    <% }); %>
</ul>


<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better Ways of Comparing a JavaScript String to Multiple Values]]></title>
    <link href="http://tjvantoll.com/2013/03/14/better-ways-of-comparing-a-javascript-string-to-multiple-values/"/>
    <updated>2013-03-14T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2013/03/14/better-ways-of-comparing-a-javascript-string-to-multiple-values</id>
    <content type="html"><![CDATA[<p>This is a seemingly simple programming task that we deal with everyday.  Here's the situation:</p>

<ul>
<li>1) You have a string in JavaScript, like <code>var fruit = ''</code>.</li>
<li>2) You need to know if that string is equal to one of multiple values, say <code>"banana"</code> or <code>"lemon"</code> (because the yellow fruits need special yellow fruit processing or something).</li>
</ul>


<p>Most people accomplish this by doing two string comparisons connected by a logical OR, which looks like this:</p>

<p>``` javascript
if (fruit == 'banana' || fruit == 'lemon') {</p>

<pre><code>handleYellowFruit();
</code></pre>

<p>}
```</p>

<p>Which works fine, but is a bit clunky.  I mean, you have to type <code>fruit ==</code> two whole times.  It also doesn't scale well.  Say your fruit processing product takes off and you need to support more fruit, now you have this:</p>

<p>``` javascript
if (fruit == 'banana' || fruit == 'lemon' || fruit == 'mango' || fruit == 'pineapple') {</p>

<pre><code>handleYellowFruit();
</code></pre>

<p>}
```</p>

<!--more-->


<p>This is getting a bit ugly.  Let's look at some other ways of accomplishing the same check.</p>

<h3>Switch</h3>

<p>The switch statement can be used to achieve the same ends:</p>

<p>``` javascript
switch (fruit) {</p>

<pre><code>case 'banana':
case 'lemon':
case 'mango':
case 'pineapple':
    handleYellowFruit();
</code></pre>

<p>}
```</p>

<p>This approach would be helpful if we have to handle for multiple classifications of fruits.  But for one check it's a lot of typing and takes up a lot of space.</p>

<h3>Array Based</h3>

<p>ECMAScript 5 introduced an <code>indexOf</code> method on <code>Array.prototype</code> (<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf">docs</a>).  We can use this to create an array on the fly, then see whether the value matches one of the values in the array:</p>

<p>```javascript
if (['banana', 'lemon', 'mango', 'pineapple'].indexOf(fruit) >= 0) {</p>

<pre><code>handleYellowFruit();
</code></pre>

<p>}
```</p>

<p>This is better, but still not ideal.  Understanding this code relies on the reader knowing that the <code>indexOf</code> method returns <code>-1</code>, which is not necessarily common knowledge.</p>

<p>Also, because <code>Array.prototype.indexOf</code> was added in ECMAScript 5, it's not present in IE &lt;= 8.  Therefore, if you're supporting IE &lt;= 8, you either need to add an <code>indexOf</code> method to the prototype yourself or use a library.</p>

<p>Speaking of libraries, most provide a cross browser means of finding values in an array.</p>

<h4>jQuery</h4>

<p><a href="http://jquery.com">jQuery</a> provides an <code>inArray</code> method (<a href="http://api.jquery.com/jQuery.inArray/">docs</a>):</p>

<p>``` javascript
if ($.inArray(fruit, ['banana', 'lemon', 'mango', 'pineapple']) >= 0) {</p>

<pre><code>handleYellowFruit();
</code></pre>

<p>}
```</p>

<h4>Underscore</h4>

<p><a href="http://underscorejs.org">Underscore.js</a> provides a <code>contains</code> method (<a href="http://underscorejs.org/#contains">docs</a>):</p>

<p>``` javascript
if (_.contains(['banana', 'lemon', 'mango', 'pineapple'], fruit)) {</p>

<pre><code>handleYellowFruit();
</code></pre>

<p>}
```</p>

<p>Other libraries provide similar methods.  Personally, I find Underscore's API to be the cleanest.  The contains API intuitively returns a boolean and there's not much to type.  You might however find yourself needing to remember the order of the parameters (does the array come first or the value?).</p>

<p>The check would be cleaner if the <code>contains</code> method were added to <code>Array.prototype</code> directly:</p>

<p>``` javascript
Array.prototype.contains = function(obj) {</p>

<pre><code>return this.indexOf(obj) &gt; -1;
</code></pre>

<p>};
```</p>

<p>This allows the check to be:</p>

<p>``` javascript
if (['banana', 'lemon', 'mango', 'pineapple'].contains(fruit)) {</p>

<pre><code>handleYellowFruit();
</code></pre>

<p>}
```</p>

<h3>Regular Expressions</h3>

<p>An often overlooked means of performing this check is to use regular expressions via <code>String.prototype.match</code> (<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String">docs</a>).</p>

<p>``` javascript
if (fruit.match(/<sup>(banana|lemon|mango|pineapple)$/))</sup> {</p>

<pre><code>handleYellowFruit();
</code></pre>

<p>}
```</p>

<p>This check clearly requires the least amount of typing.  It is also the most flexible as you can easily alter things like case sensitivity, special character handling, white space, etc.  This will work in all browsers and you don't have to worry about messing with the native prototypes.</p>

<p>While this is the most powerful option, it comes at a cost of being less readable.  I had to look up the <code>^</code> (match at the beginning of input) and <code>$</code> (match at the end of input) characters when writing this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Detecting Internet Explorer without jQuery]]></title>
    <link href="http://tjvantoll.com/2013/01/11/detecting-internet-explorer-without-jquery/"/>
    <updated>2013-01-11T17:26:00-05:00</updated>
    <id>http://tjvantoll.com/2013/01/11/detecting-internet-explorer-without-jquery</id>
    <content type="html"><![CDATA[<p>One of the changes in jQuery's <a href="http://blog.jquery.com/2013/01/09/jquery-1-9-rc1-and-migrate-rc1-released/">upcoming 1.9 release</a> is the removal of <a href="http://api.jquery.com/jQuery.browser/">$.browser</a>.  So if you're using it to test for Internet Explorer, what do you do?</p>

<!--more-->


<h3>Option 1: Use the migrate plugin</h3>

<p>If you want to avoid upgrading existing code, use the <a href="https://github.com/jquery/jquery-migrate/">migrate plugin</a> which will preserve <code>$.browser</code> as it was.  Of course this is simply putting off the inevitable, but if you need to upgrade a large code base it's a good temporary measure.  The development version of the plugin will produce a console warning message whenever <code>$.browser</code> is used, which can help you identify where you're using it and migrate accordingly.</p>

<h3>Option 2: Switch to feature detection</h3>

<p>Testing for specific browsers is <a href="http://www.sitepoint.com/why-browser-sniffing-stinks/">a</a> <a href="http://msdn.microsoft.com/en-us/magazine/hh475813.aspx">bad</a> <a href="http://diveintohtml5.info/detect.html">practice</a>.  If you are not supporting IE because of features that it does not possess, test for those features instead of the browser.  The <a href="http://modernizr.com">Modernizr</a> library includes a wide variety of feature tests and is a good place to get started.</p>

<h3>Option 3: Use conditional classes or conditional comments</h3>

<p>IE versions &lt; 10 support <a href="http://msdn.microsoft.com/en-us/library/ms537512(v=vs.85).aspx">conditional comments</a> that can be used to detect Internet Explorer.  For example the <a href="http://html5boilerplate.com/">HTML5 boilerplate</a> <a href="https://github.com/h5bp/html5-boilerplate/blob/master/index.html">uses the following</a> to show a warning to users using IE &lt; 7:</p>

<p>``` html</p>

<!--[if lt IE 7]>
    <p class="chromeframe">
        You are using an <strong>outdated</strong> browser. Please
        <a href="http://browsehappy.com/">upgrade your browser</a>
        or <a href="http://www.google.com/chromeframe/?redirect=true">
        activate Google Chrome Frame</a> to improve your experience.
    </p>
<![endif]-->


<p>```</p>

<p>This approach can be used to add conditional classes on the <code>html</code> element (<a href="http://paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/">via Paul Irish</a>).</p>

<p>``` html Conditional classes on the html element</p>

<!--[if lt IE 7]>      <html class="ie6"> <![endif]-->


<!--[if IE 7]>         <html class="ie7"> <![endif]-->


<!--[if IE 8]>         <html class="ie8"> <![endif]-->


<!--[if gt IE 8]><!-->


<p> <html>         <!--<![endif]-->
```</p>

<p>Now the presence of a class on the <code>html</code> element can be used to derive the version of Internet Explorer the user is using:</p>

<p><code>javascript
$('html').hasClass('ie6'); //True if the user is using IE6
</code></p>

<h3>Option 4: Sniff the User Agent</h3>

<p>If for whatever reason you cannot do any of the options above, you <em>can</em> determine IE usage the from <code>navigator</code> object.</p>

<div class="warning" style="display: block;">
    User agent sniffing should be used as a last resort.  Make sure you at least consider the options above before using this.
</div>


<p>``` javascript Sniffing the user agent string to test for Internet Explorer
//Test for Internet Explorer
if (/MSIE\s([\d.]+)/.test(navigator.userAgent)) {</p>

<pre><code>//Get the IE version.  This will be 6 for IE6, 7 for IE7, etc...
version = new Number(RegExp.$1);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
