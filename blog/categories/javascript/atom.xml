<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | TJ VanToll's Blog]]></title>
  <link href="http://tjvantoll.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://tjvantoll.com/"/>
  <updated>2015-05-22T12:36:08-04:00</updated>
  <id>http://tjvantoll.com/</id>
  <author>
    <name><![CDATA[TJ VanToll]]></name>
    <email><![CDATA[tj.vantoll@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linting JavaScript in NativeScript Apps]]></title>
    <link href="http://tjvantoll.com/2015/05/22/linting-javascript-in-nativescript-apps/"/>
    <updated>2015-05-22T00:00:00-04:00</updated>
    <id>http://tjvantoll.com/2015/05/22/linting-javascript-in-nativescript-apps</id>
    <content type="html"><![CDATA[<p>One of the great things about <a href="https://www.nativescript.org/">NativeScript</a> is you can use the JavaScript tools you already know to help build your native iOS and Android apps. In my case I recently added two tools I was already familiar with—<a href="http://jshint.com/">JSHint</a> and <a href="http://jscs.info/">JSCS</a>—to my NativeScript apps to automate <a href="http://en.wikipedia.org/wiki/Lint_%28software%29">linting</a>. In this article I'll show you how to do it too.</p>

<!-- more -->


<h2>Setting up Gulp</h2>

<p>There are a number of tools you can use to automate tasks in NativeScript apps—including <a href="http://gulpjs.com/">Gulp</a>, <a href="http://gruntjs.com/">Grunt</a>, and even <a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/">npm</a>—but I'm a fan of Gulp so that's what I'll be using in this article. First, if you don't have Gulp installed globally you'll need to grab it from npm:</p>

<pre class="language-shell"><code>npm install -g gulp</code></pre>


<p>Next, to start using Gulp in your NativeScript projects you need to make sure each project has a <code>package.json</code> file in its root:</p>

<pre class="language-shell"><code>.
├── app
│   └── ...
├── package.json ────────────── here
└── platforms
    └── ...</code></pre>


<p>If your project doesn't already have a <code>package.json</code> file, run <a href="https://docs.npmjs.com/cli/init"><code>npm init</code></a> in the project's root and npm will help you build one.</p>

<p>After that, install Gulp locally along with its <a href="https://www.npmjs.com/package/gulp-jshint">JSHint</a> and <a href="https://www.npmjs.com/package/gulp-jscs">JSCS</a> packages:</p>

<pre class="language-shell"><code>npm install gulp gulp-jshint gulp-jscs --save-dev</code></pre>


<p>The <code>--save-dev</code> flag tells npm to remember these dependencies in your newly created <code>package.json</code> file. If you open your project's <code>package.json</code> you should now see a <code>"devDependencies"</code> key at the bottom that looks something like this:</p>

<pre class="language-javascript"><code>{
  ...
  "devDependencies": {
    "gulp": "^3.8.11",
    "gulp-jscs": "^1.6.0",
    "gulp-jshint": "^1.10.0"
  }
}</code></pre>


<p>With the installation out the way, now it's time to write the code that uses these tools.</p>

<h2>Writing the task</h2>

<p>To write a Gulp task that runs JSHint and JSCS you'll need to create a <code>gulpfile.js</code> file in your project's root:</p>

<pre class="language-shell"><code>.
├── app
│   └── ...
├── gulpfile.js ────────────── here
├── package.json
└── platforms
    └── ...</code></pre>


<p>Paste the following code into your newly created <code>gulpfile.js</code>:</p>

<pre class="language-javascript"><code>var gulp = require("gulp");
var jscs = require("gulp-jscs");
var jshint = require("gulp-jshint");

var filesToLint = [
    "app/**/*.js",

    // Exclude node modules from linting
    "!app/node_modules/**/*.js",

    // Exclude NativeScript modules from linting
    "!app/tns_modules/**/*.js"
];

gulp.task("jscs", function() {
    gulp.src(filesToLint)
        .pipe(jscs());
});

gulp.task("jshint", function() {
    return gulp.src(filesToLint)
        .pipe(jshint())
        .pipe(jshint.reporter());
});

gulp.task("lint", ["jshint", "jscs"]);</code></pre>


<p>This code defines three Gulp tasks: <code>jscs</code>, <code>jshint</code>, and <code>lint</code>. As you might expect, <code>gulp jscs</code> runs JSCS, <code>gulp jshint</code> runs JSHint, and <code>gulp lint</code> runs both.</p>

<p>The <code>filesToLint</code> array specifies which files the linters should hit. By default this is set to lint all JavaScript files in the <code>app</code> directory—excluding any npm modules you have in the <code>node_modules</code> folder, and any NativeScript modules in <code>tns_modules</code> folder—but you may wish to customize this depending on how you've structured your app.</p>

<p>With the <code>gulpfile.js</code> file in place the last thing you need to do is add a few configuration files.</p>

<h2>Configuring JSHint and JSCS</h2>

<p>JSHint and JSCS each have comprehensive sets of options for specifying exactly how they should lint your code. To specify these options, head back to the root of your project and create two files: <code>.jshintrc</code> and <code>.jscsrc</code>:</p>

<pre class="language-shell"><code>.
├── app
│   └── ...
├── gulpfile.js
├── package.json
├── platforms
│   └── ...
├── .jshintrc ────────────── here
└── .jscsrc ────────────── here</code></pre>


<p>The contents of these configuration files will depend on your personal coding preferences. I'll share my preferences if you'd like to use them as a starting point, and you can look over <a href="http://jshint.com/docs/options/">JSHint's option docs</a> and <a href="http://jscs.info/rules.html">JSCS's option docs</a> to configure them to your liking.</p>

<p>Here's my <code>.jshintrc</code>:</p>

<pre class="language-javascript"><code>{
  "boss": true,
  "curly": true,
  "esnext": true,
  "eqeqeq": true,
  "eqnull": true,
  "expr": true,
  "immed": true,
  "noarg": true,
  "quotmark": "double",
  "smarttabs": true,
  "trailing": true,
  "unused": true
}</code></pre>


<p>And here's my <code>.jscsrc</code>:</p>

<pre class="language-javascript"><code>{
  "disallowMixedSpacesAndTabs": true,
  "disallowMultipleLineBreaks": true,
  "disallowMultipleSpaces": true,
  "disallowMultipleVarDecl": true,
  "disallowNamedUnassignedFunctions": true,
  "disallowNewlineBeforeBlockStatements": true,
  "disallowSpacesInCallExpression": true,
  "disallowSpacesInFunctionDeclaration": {
    "beforeOpeningRoundBrace": true
  },
  "disallowTrailingWhitespace": true,
  "esnext": true,
  "requireCommaBeforeLineBreak": true,
  "requireCurlyBraces": ["if", "else", "for", "while", "try", "catch"],
  "requireSemicolons": true,
  "requireSpaceBetweenArguments": true,
  "requireSpacesInConditionalExpression": true,
  "requireSpacesInForStatement": true,
  "requireSpacesInsideObjectBrackets": "all",
  "validateIndentation": "\t",
  "validateQuoteMarks": "\""
}</code></pre>


<p>After you have these files in place head back to your terminal and run <code>gulp lint</code>. If all went well you should see something like this:</p>

<pre class="language-shell"><code>$ gulp lint
[12:06:49] Using gulpfile /path/to/my-project/gulpfile.js
[12:06:49] Starting 'jshint'...
[12:06:49] Starting 'jscs'...
[12:06:49] Finished 'jscs' after 84 ms
[12:06:49] Finished 'jshint' after 305 ms
[12:06:49] Starting 'lint'...
[12:06:49] Finished 'lint' after 13 μs</code></pre>


<p>If you head back into your app and create a problem, such as changing <code>var</code> to <code>vax</code>, <code>gulp lint</code> should now point out the error:</p>

<pre class="language-shell"><code>$ gulp lint
[12:09:24] Using gulpfile /path/to/my-project/gulpfile.js
[12:09:24] Starting 'jshint'...
[12:09:24] Starting 'jscs'...
[12:09:24] Finished 'jscs' after 70 ms
[12:09:24] Finished 'jshint' after 255 ms
[12:09:24] Starting 'lint'...
[12:09:24] Finished 'lint' after 6.09 μs

events.js:72
        throw er; // Unhandled 'error' event
              ^
Error: Unexpected identifier at my-file.js :
     2 |
     3 |exports.loaded = function(args) {
     4 | vax page = args.object;
--------------^
     5 | page.bindingContext = viewModel;
     6 |};</code></pre>


<h2>Wrapping up</h2>

<p>That's it! If you have any other questions about this setup let me know in the comments. If you're looking for an example of this setup in a real app, check out JustMeme, which is <a href="https://github.com/NativeScript/sample-JustMeme">available on GitHub</a> as well as the <a href="https://itunes.apple.com/us/app/justmeme/id989340374?mt=8">iOS app store</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A reportValidity() Use Case and Polyfill]]></title>
    <link href="http://tjvantoll.com/2015/01/28/reportvalidity/"/>
    <updated>2015-01-28T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2015/01/28/reportvalidity</id>
    <content type="html"><![CDATA[<p>Last week Chrome 40 was released, and while the greater web community <a href="https://twitter.com/addyosmani/status/558051510840356864">was celebrating service workers landing</a>, a little known DOM method made its first appearance in a browser: <code>reportValidity()</code>.</p>

<p>Because I don't think many people know what <code>reportValidity()</code> does, I thought I'd write a quick article about it. Personally I think the best way to explain <code>reportValidity()</code> is with a real-world example, so let's start there.</p>

<!-- more -->


<h2><code>reportValidity()</code> use case: a registration form</h2>

<p>Suppose that you're building a registration form and you require a username:</p>

<pre class="language-markup line-numbers"><code>&lt;form&gt;
    &lt;label&gt;
        Username:
        &lt;input required&gt;
    &lt;/label&gt;
    ...
    &lt;button&gt;Submit&lt;/button&gt;
&lt;/form&gt;</code></pre>


<p>The username is required so you use a <code>required</code> attribute. But there's another common username requirement that you can't handle with an HTML attribute: uniqueness. You can't have two “bieber_fan_2003”s in your system after all.</p>

<p>So typically you use some sort of server-side check to make sure the user-provided username is available. Straightfoward. But the next part is tricky, and where <code>reportValidity()</code> comes into play. If you determine that the username is not available, how do you display that error to the user using the HTML5 form validation mechanisms?</p>

<p>It <em>seems</em> like this task should be easy, and it is—at least it only requires two lines of code—but it can be unintuitive to say the least. The first thing you need to do is mark the <code>&lt;input&gt;</code> as invalid, which you can do by calling <code>setCustomValidity()</code> on it with the error message you want to use:</p>

<pre class="language-javascript"><code>document.querySelector( "input" )
    .setCustomValidity( "This username is not available" );</code></pre>


<p>This tells the browser that the text in the <code>&lt;input&gt;</code> is invalid (<code>setCustomValidity()</code> considers an empty string valid, and non-empty strings invalid), but it does not <em>report</em> the error to the user—aka the user doesn't see any bubbles. That is what <code>reportValidity()</code> does:</p>

<pre class="language-javascript"><code>document.querySelector( "form" ).reportValidity();</code></pre>


<p><code>reportValidity()</code> displays the form's first error to the user using the browser's native validation bubbles. Here's what it looks like:</p>

<p><img src="http://tjvantoll.com/images/posts/2015-01-28/error-message.png" alt=""></p>

<h2>Report errors without <code>reportValidity()</code></h2>

<p>You may be wondering, if this is such a common use case, how did you report errors before <code>reportValidity()</code>? The completely unintuitive way to do that is by...  wait for it.... clicking the <code>&lt;form&gt;</code>'s submit button in JavaScript:</p>

<pre class="language-javascript"><code>document.querySelector( "button" ).submit();</code></pre>


<p>OF COURSE, right? Here's a <a href="http://jsfiddle.net/tj_vantoll/fdofmt7o/">live example</a> that proves this technique works, in case you don't believe me.</p>

<p>Basically, clicking the submit button mimics an actual user submission, which triggers the HTML form validation algorithm, which reports the first error to the user. The thing is, if you wanted to report errors to the user you'd never think to use JavaScript to click the submit button, you'd look for a method named something like, oh I don't know, <code>reportValidity()</code>.</p>

<h2>Polyfill</h2>

<p>Because <code>reportValidity()</code> and “clicking” a submit button in JavaScript are essentially equivalent actions, you can write a polyfill that takes advantage of this similarity. The following code does just that. You can include it to gain the ability to use <code>reportValidity()</code> in Firefox and IE 10+ (the first version of IE with an HTML5 form validation implementation):</p>

<pre class="language-javascript line-numbers"><code>if ( !HTMLFormElement.prototype.reportValidity ) {
    HTMLFormElement.prototype.reportValidity = function() {
        var submitButtons = this.querySelectorAll( "button, input[type=submit]" );
        for ( var i = 0; i < submitButtons.length; i++ ) {
            // Filter out &lt;button type="button"&gt;, as querySelectorAll can't
            // handle :not filtering
            if ( submitButtons[ i ].type === "submit" ) {
                submitButtons[ i ].click();
                return;
            }
        }
    }
}</code></pre>


<blockquote><p>This also adds support to Safari, but Safari does not have a native error reporting mechanism (i.e. bubbles), so you have to add your own. I went through some strategies to do so at a talk I gave last year. Here are <a href="http://tjvantoll.com/speaking/slides/Constraint-Validation/Chicago/">the slides</a> and here's the <a href="https://www.youtube.com/watch?v=8qvjhMr6UGM&amp;list=PL-0yjdC10QYpmXI3l-PGK1od4kTWOjm_A&amp;index=12">video</a> if you're interested.</p></blockquote>

<p>This polyfill relies on all forms having a submit button because having one is a <a href="http://www.smashingmagazine.com/2014/05/21/mobile-accessibility-why-care-what-can-you-do/">best practice</a>, but you could easily alter the script to insert a hidden submit button into the DOM if you really wanted to.</p>

<h2>Who cares?</h2>

<p>Ok, I'll admit that a single DOM method being shipped isn't life altering, but it's a small thing that makes HTML5 form validation a little easier to implement. I've been <a href="http://tjvantoll.com/speaking/slides/Constraint-Validation/Atlanta/">advocating the usage of HTML form validation</a> for a long time now, but <a href="https://www.youtube.com/watch?v=8qvjhMr6UGM&amp;list=PL-0yjdC10QYpmXI3l-PGK1od4kTWOjm_A&amp;index=12">very few people actually use it in production</a>. I'm hoping that <code>reportValidity()</code> is a sign that browsers vendors care and are willing to put some effort into making HTML5 form validation easier to use.</p>

<p>Firefox <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1088761">has a ticket for <code>reportValidity()</code></a>, but I have no clue if IE has this method on their roadmap. WebKit can't consider <code>reportValidity()</code> until they actually have a means of reporting errors—i.e. bubbles. WebKit has a <a href="https://bugs.webkit.org/show_bug.cgi?id=28649">ticket to add bubbles</a>, but it has been inactive since 2010.</p>

<p>Oh, and browser vendors, if you're listening, I have two other things on my form validation wish list that still have zero implementations:</p>

<ul>
<li>1) There's a new <code>invalid</code> event on <code>&lt;form&gt;</code> elements (see <a href="http://www.w3.org/html/wg/drafts/html/master/forms.html#form-submission-algorithm">step 4 on this form submission algorithm</a>) that makes <a href="http://tjvantoll.com/speaking/slides/Constraint-Validation/Chicago/#/28">aggregating error messages</a> a lot easier.</li>
<li>2) There's a <a href="http://dev.w3.org/csswg/selectors-4/#user-pseudos"><code>:user-error</code> pseudo-class</a> in the CSS Selectors 4 spec that's <a href="http://tjvantoll.com/speaking/slides/Constraint-Validation/Chicago/#/33">far more useful than <code>:invalid</code></a>.</li>
</ul>


<p>Let's make it happen!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Kendo UI Core]]></title>
    <link href="http://tjvantoll.com/2015/01/18/getting-started-with-kendo-ui-core/"/>
    <updated>2015-01-18T00:00:00-05:00</updated>
    <id>http://tjvantoll.com/2015/01/18/getting-started-with-kendo-ui-core</id>
    <content type="html"><![CDATA[<p>I've been using <a href="https://github.com/telerik/kendo-ui-core">Kendo UI Core</a> in a bunch of projects lately, so I thought I'd document the process I use to get Kendo UI Core up and running. Note that the workflow I show isn't the “right” way of doing things, just the workflow I like.</p>

<!-- more -->


<h2>Step 1) Download</h2>

<p>I start by downloading Kendo UI Core from Bower, as it's my preferred package manager for web apps:</p>

<p><code>
$ bower install kendo-ui-core
</code></p>

<p>You can alternatively <a href="https://github.com/telerik/kendo-ui-core/archive/master.zip">download Kendo UI Core from GitHub</a>, but Bower is my jam. (Not to be confused with <a href="http://jamjs.org/">Jam</a>, which—believe it or not—is actually the name of a competing JavaScript package manager. Who knew?)</p>

<h2>Step 2) Scaffold HTML</h2>

<p>Next I create an index.html and paste in the following boilerplate HTML:</p>

<p>``` html
&lt;!doctype html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
&lt;title&gt;My Project&lt;/title&gt;
&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;

&lt;link rel="stylesheet" href="bower_components/kendo-ui-core/src/styles/web/kendo.common.core.css"&gt;
&lt;link rel="stylesheet" href="bower_components/kendo-ui-core/src/styles/web/kendo.flat.css"&gt;
</code></pre>

<p></head>
<body></p>

<script src="bower_components/jquery/dist/jquery.js"></script>


<script src="bower_components/kendo-ui-core/src/js/kendo.ui.core.js"></script>


<p></body>
</html>
```</p>

<p>A couple things to note here. First, my HTML follows the <a href="http://contribute.jquery.org/style-guide/html/">jQuery HTML style guide</a>, which yes, actually is a thing.</p>

<p>Second, and more relevantly, I use the Kendo UI flat theme. (The import of kendo.flat.min.css file controls which theme the library uses.) Kendo UI has like 15 themes or something, but I'm a fan of the flat one. If you want to try out different themes all you have to do is switch “flat” in “kendo.flat.css” to the name of another theme. For instance changing “kendo.flat.min.css“ to “kendo.material.min.css” switches your app to Kendo UI's new material design inspired theme.</p>

<p><img src="http://tjvantoll.com/images/posts/2015-01-18/kendo-ui-themes.png" alt="">
<i>See how the Flat theme is highlighted? That's because it's the best one.</i></p>

<p>Finally, note that I'm including the <em>source</em> files for jQuery and Kendo UI—not the minified ones. I do this because it makes debugging easier, and because I'm going to tackle minification later.</p>

<p>This markup makes for a decent starting point for demos and quick tests. I even keep this HTML stored as a <a href="http://sublimetext.info/docs/en/extensibility/snippets.html">Sublime snippet</a> for when I need to get a quick test case up and running. And this workflow works great, but for bigger projects I want a little more structure, and a structure that's ready to scale for bigger projects. Here's how I do that.</p>

<h2>Step 3) Package Management</h2>

<p>I like using AMD and <a href="http://requirejs.org/">RequireJS</a> to manage my app's dependencies, and luckily Kendo UI Core is intelligently broken into AMD modules. To start with AMD I download RequireJS from Bower:</p>

<p><code>
$ bower install requirejs
</code></p>

<p>Next I create an app.js file to serve as the main JavaScript file for my app. At this point my project's folder structure looks a little something like this:</p>

<p>```
.
├── bower_components
│   ├── jquery
│   │   └── ...
│   ├── kendo-ui-core
│   │   └── ...
│   └── requirejs
│       └── ...
├── index.html
└── js</p>

<pre><code>└── app.js
</code></pre>

<p>```</p>

<p>With this structure in place I switch my index.html to use a single <code>&lt;script&gt;</code> tag:</p>

<p>``` html</p>

<script src="bower_components/requirejs/require.js" data-main="js/app"></script>


<p>```</p>

<p>Then I paste the following code in as a starting point for app.js:</p>

<p>``` javascript
require.config({</p>

<pre><code>paths: {
    "jquery": "/bower_components/jquery/dist/jquery",
    "kendo-ui-core": "/bower_components/kendo-ui-core/src/js"
}
</code></pre>

<p>});</p>

<p>require([ "jquery", "kendo-ui-core/kendo.ui.core" ], function( $ ) {</p>

<p>});
```</p>

<p>This gives me an entry point for my app that loads jQuery and Kendo UI Core dynamically. If my app only needs one portion of Kendo UI Core I only specify the modules I need in the <code>require()</code> call. For instance if I only want a <a href="http://demos.telerik.com/kendo-ui/maskedtextbox/index">MaskedTextBox</a> I only require <code>"jquery"</code> and <code>"kendo-ui-core/kendo.maskedtextbox"</code>—i.e. <code>require([ "jquery", "kendo-ui-core/kendo.maskedtextbox" ])</code>.</p>

<p>Eventually I'll add the <a href="http://requirejs.org/docs/optimization.html">RequireJS Optimizer</a> to my app to optimize into a single <code>&lt;script&gt;</code> tag for production, but that won't happen until I'm ready to deploy my project, and I wanted to focus this article on getting started. If you're interested in the optimization workflow I use, check out my article on <a href="http://developer.telerik.com/featured/using-ui-libraries-without-the-bloat/">Using UI Libraries Without the Bloat</a>.</p>

<p>For now I hope what I have here was helpful. If you have any other questions about using Kendo UI let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A jQuery UI Vertical Tabs Extension]]></title>
    <link href="http://tjvantoll.com/2014/07/04/a-jquery-ui-vertical-tabs-extension/"/>
    <updated>2014-07-04T10:13:00-04:00</updated>
    <id>http://tjvantoll.com/2014/07/04/a-jquery-ui-vertical-tabs-extension</id>
    <content type="html"><![CDATA[<p>The single coolest thing in jQuery UI is the <a href="http://learn.jquery.com/jquery-ui/widget-factory/extending-widgets/">extension mechanism</a> built into the <a href="http://api.jqueryui.com/jquery.widget/">widget factory</a>. In my <a href="http://tjvantoll.com/jquery-ui-in-action.html">upcoming book</a> on jQuery UI I devote an entire chapter to building extensions, and now that the book is <em>mostly</em> done, I want to publish some of the extensions I built for the world to use.</p>

<p>The first of these is an extension to display a <a href="http://jqueryui.com/tabs/">jQuery UI tabs widget</a> vertically. The extension is simple: it adds a single <code>orientation</code> option that you can set to <code>"horizontal"</code> or <code>"vertical"</code>. Here it is in action:</p>

<p><div class="code_example"><h6>jQuery UI Vertical Tabs Extension<a href="/demos/2014-07-04/index.html" target="_blank">Open in New Window</a></h6><iframe style="width: 100%; height: 325px;" frameborder="0" src="/demos/2014-07-04/index.html"></iframe></div></p>

<p>The extension <a href="https://github.com/tjvantoll/jquery-ui-vertical-tabs#amd-usage">supports AMD usage</a>, including <a href="http://learn.jquery.com/jquery-ui/environments/amd/">the new AMD modules introduced in jQuery UI 1.11</a>. If you're a Bower user, you can install the extension with <code>bower install jquery-ui-vertical-tabs</code>.</p>

<p>Please <a href="https://github.com/tjvantoll/jquery-ui-vertical-tabs">check out the extension on GitHub</a>. Try it; report issues; and star it if you like it. The extension is released under the MIT license, so it use it in any project you'd like. I'll have more of these coming in the near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Only the gzip Size Matters]]></title>
    <link href="http://tjvantoll.com/2014/01/27/only-the-gzip-size-matters/"/>
    <updated>2014-01-27T19:32:00-05:00</updated>
    <id>http://tjvantoll.com/2014/01/27/only-the-gzip-size-matters</id>
    <content type="html"><![CDATA[<p>Let's just get it out there: the only size that matters for a CSS or JavaScript file is its gzipped size.</p>

<p>And by gzipped size I mean: the size of the file after it's compressed using <a href="http://en.wikipedia.org/wiki/Gzip">gzip</a>'s compression algorithm. All browsers since IE6 have supported gzipped assets, and enabling gzip on web servers has been a <a href="https://developers.google.com/speed/docs/best-practices/payload#GzipCompression">best practice</a> for years now; therefore it's relatively safe to assume that everyone who cares about the size of CSS or JavaScript files is gzipping them.</p>

<p>So if you're trying to find how big a front-end library is, the answer you need is not in Finder or Windows Explorer. While the uncompressed file size can give you a rough idea, you have no idea what the user will actually download until you gzip the files.</p>

<!--more-->


<h3>Running gzip</h3>

<p>If you're on OS X or Linux, you can run the <code>gzip</code> command on any file to compress it. For example the following shows the before and after of compressing jQuery 2.1.0.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery.png" alt="Running gzip on jQuery from the command line"></p>

<p>There are two things to note here:</p>

<ol>
<li><code>gzip</code> made quite the difference in file size - 82K down to 29K.</li>
<li><code>gzip</code> replaces the original file; <code>jquery.js</code> is now <code>jquery.js.gz</code>.</li>
</ol>


<p>Because replacing the original file is a bit annoying, you can make <code>gzip</code> generate a new file with a <a href="http://unix.stackexchange.com/questions/46786/how-to-tell-gzip-to-keep-original-file#answer-58814">little shell magic</a>, shown below.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery-new-file.png" alt="Running gzip on jQuery from the command line and generating a new file"></p>

<div class="warning">Commenter yalue <a href="http://tjvantoll.com/2014/01/27/only-the-gzip-size-matters/#comment-1278948548">pointed out</a> that the <code>gzip</code> command has a <code>--keep</code> option that preserves the original file. So you can run <code>gzip jquery.js --keep</code> instead of <code>gzip < jquery.js > jquery.js.gz</code>.</div>


<h3>Why It Matters</h3>

<p>There is no set percentage that <code>gzip</code> will reduce the size of a JavaScript or CSS file by. There is no way to know for sure other than running <code>gzip</code>.</p>

<p>To show this, let's look at the <a href="https://twitter.com/nelsonic/status/426724640090640384">specific situation</a> that made me feel the need to write this.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/twitter.png" alt="View of Twitter discussion of the size of the jQuery Mobile library"></p>

<p>414K! Yikes! But remember, this is the file size that is shown in Finder, not the size that the user is actually going to download from a server with gzip enabled.</p>

<p>To see what the user will actually download, we have to run <code>gzip</code>. Below we run <code>gzip</code> on each of jQuery Mobile's files.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery-mobile.png" alt="Running gzip on jQuery Mobile files"></p>

<p>As you can see, <code>gzip</code> reduced our two files down to a combined 88K. Quite the difference! Take note of one more thing: the drastic difference running <code>gzip</code> made on <code>jquery.mobile.css</code> - 216K to 25K. A savings of 88.5%!</p>

<p>Why was the compression so successful here?</p>

<p><a href="http://blog.jquerymobile.com/2013/12/23/jquery-mobile-1-4-0-released/">jQuery Mobile 1.4</a> made a big change to the way they handle images - namely, they now embed images directly within their css file to avoid separate HTTP requests. Because of this change, <a href="http://code.jquery.com/mobile/1.4.0/jquery.mobile-1.4.0.min.css">their CSS file</a> is packed full of <a href="https://developer.mozilla.org/en-US/docs/data_URIs">data URIs</a>.</p>

<p>How does this relate to <code>gzip</code>?</p>

<p>At a high level, the compression algorithm that runs under the hoods of <code>gzip</code> finds repeated strings and replaces them with symbols. Because of this, the files that compress best are the ones with a lot of repeated strings - such as a file with a bunch of data URIs.</p>

<p>Just look at all the repeated strings in jQuery Mobile's CSS. <code>gzip</code> is practically salivating.</p>

<p><img src="http://tjvantoll.com/images/posts/2014-01-27/jquery-mobile-source.png" alt="View of jQuery mobile 1.4's CSS source"></p>

<p><em>Note: If you concatenate your files <code>gzip</code> gets better. Bigger files = more repeated strings to substitute.</em></p>

<h3>Wrapping Up</h3>

<p>Anyways, the point is: if you're assessing the size of a library, framework, or whatever - run <code>gzip</code> on it first. Since it's what the user actually downloads, it's the only size that matters for front-end assets.</p>

<p>Because size is paramount in jQuery core, they actually make <a href="http://bugs.jquery.com/ticket/12229">changes</a> to improve how well the library is optimized by <code>gzip</code>'s compression algorithm.</p>
]]></content>
  </entry>
  
</feed>
